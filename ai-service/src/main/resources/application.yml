spring:
  application:
    name: ai-service
  profiles:
    active: dev

  datasource:
    url: jdbc:postgresql://localhost:5434/ai_db
    username: ai_user
    password: ai_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        default_schema: public
    open-in-view: false

  data:
    redis:
      host: localhost
      port: 6379
      password: redis_pass
      timeout: 10s
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 5

  cache:
    type: redis
    redis:
      time-to-live: 3600s
      cache-null-values: false

  cloud:
    azure:
      servicebus:
        enabled: true
        connection-string: ${AZURE_SERVICEBUS_CONNECTION_STRING:}
        pricing-tier: standard

server:
  port: 8083
  servlet:
    context-path: /api/v1/ai

security:
  jwt:
    secret: ${JWT_SECRET:TripGenAI2025SecretKeyForJWTTokenGeneration}
    expiration: 3600000 # 1 hour

# AI Service Configurations
ai:
  openai:
    api-key: ${OPENAI_API_KEY}
    model: gpt-4
    max-tokens: 4000
    temperature: 0.7
    timeout: 60s
  
  claude:
    api-key: ${CLAUDE_API_KEY}
    model: claude-3-opus-20240229
    max-tokens: 4000
    timeout: 60s

  job:
    schedule-generation:
      timeout: 300s # 5 minutes
      max-retries: 3
      queue-name: ai-schedule-jobs
    recommendation:
      timeout: 180s # 3 minutes
      max-retries: 3
      queue-name: ai-recommendation-jobs

# External Service URLs
external-services:
  user-service:
    url: http://localhost:8081/api/v1/users
    connect-timeout: 5s
    read-timeout: 30s
  
  location-service:
    url: http://localhost:8082/api/v1/locations
    connect-timeout: 5s
    read-timeout: 30s
  
  weather-service:
    url: http://localhost:8082/api/v1/locations/weather
    connect-timeout: 5s
    read-timeout: 30s

# Feign Configuration
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 30000
        loggerLevel: basic
  compression:
    request:
      enabled: true
    response:
      enabled: true

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Logging
logging:
  level:
    com.unicorn.tripgen.ai: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/ai-service.log

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
  
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: false

external-services:
  user-service:
    url: ${USER_SERVICE_URL}
  location-service:
    url: ${LOCATION_SERVICE_URL}
  weather-service:
    url: ${WEATHER_SERVICE_URL}

logging:
  level:
    com.unicorn.tripgen.ai: INFO
    org.springframework.web: WARN
    org.hibernate: WARN