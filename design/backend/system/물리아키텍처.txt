@startuml
!theme mono

title Azure Cloud 기반 여행 일정 생성 서비스 - 물리 아키텍처

' 사용자 및 외부 시스템
actor "여행자" as User
cloud "외부 API" {
    component "카카오 MCP" as KakaoMCP #FFA07A
    component "구글 MCP" as GoogleMCP #FFA07A
}

' GitHub Actions (CI/CD)
rectangle "CI/CD 파이프라인" {
    component "GitHub Actions" as GitHubActions #FFB6C1
    component "Azure Container Registry" as ACR #FFB6C1
}

' Azure Cloud Platform
rectangle "Azure Cloud" #E6F3FF {
    
    ' DNS 및 Global Load Balancing
    component "Azure Traffic Manager\n(DNS 기반 라우팅)" as TrafficManager #87CEEB
    
    ' CDN 및 엣지 캐싱
    component "Azure Front Door\n(CDN + WAF)" as FrontDoor #87CEEB
    
    ' Hub-Spoke Network Architecture
    rectangle "Hub VNet (10.0.0.0/16)" #E0F8FF {
        component "Azure Firewall\n(중앙 방화벽)" as AzureFirewall #FF6B6B
        component "VPN Gateway\n(하이브리드 연결)" as VPNGateway #FF6B6B
    }
    
    rectangle "Spoke VNet (10.1.0.0/16)" #F0F8FF {
        
        ' Application Gateway 및 WAF
        rectangle "Web Tier (10.1.1.0/24)" {
            component "Application Gateway\n+ WAF" as AppGateway #4169E1
            component "Azure API Management\n(Developer Tier)" as APIM #4169E1
        }
        
        ' Container Apps 계층
        rectangle "Application Tier (10.1.2.0/24)" {
            component "Profile Service\n(Container Apps)" as ProfileService #90EE90
            component "Itinerary Service\n(Container Apps)" as ItineraryService #90EE90
            component "Location Service\n(Container Apps)" as LocationService #90EE90
            
            ' 서버리스 함수
            component "MCP Proxy Functions\n(외부 API 호출)" as MCPProxy #DDA0DD
        }
        
        ' 통합 서비스 계층
        rectangle "Integration Tier (10.1.3.0/24)" {
            component "Service Bus Premium\n(Job Queue)" as ServiceBus #FFC0CB
            database "Azure Cache for Redis\n(Premium Cluster)" as RedisCache #F08080
        }
        
        ' 데이터 계층
        rectangle "Data Tier (10.1.4.0/24)" {
            database "PostgreSQL Profile DB\n(Flexible Server)" as ProfileDB #B0E0E6
            database "PostgreSQL Itinerary DB\n(Flexible Server)" as ItineraryDB #B0E0E6
            database "PostgreSQL Location DB\n(PostGIS Enabled)" as LocationDB #B0E0E6
            
            database "Azure Blob Storage\n(Hot/Cool Tiers)" as BlobStorage #ADD8E6
        }
        
        ' Private Endpoint 계층
        rectangle "Private Endpoint Subnet (10.1.5.0/24)" {
            component "Private Link\nEndpoints" as PrivateLink #D3D3D3
        }
    }
    
    ' 보안 및 관리 서비스
    rectangle "Security & Management" #FFF8DC {
        component "Azure Key Vault\n(Premium HSM)" as KeyVault #FFD700
        component "Azure Active Directory\n(Premium P2)" as AAD #FFD700
        component "Azure Monitor\n+ Application Insights" as Monitor #FFA500
        component "Log Analytics\n(중앙 로깅)" as LogAnalytics #FFA500
    }
    
    ' 재해복구 리전 (Japan East)
    rectangle "DR Region - Japan East" #F5F5F5 {
        component "Traffic Manager\nEndpoint" as DREndpoint #C0C0C0
        database "PostgreSQL\nRead Replica" as DRDatabase #C0C0C0
        database "Geo-Replicated\nBlob Storage" as DRStorage #C0C0C0
    }
}

' 사용자 요청 플로우 (처리순서별 번호 부여)
User --> TrafficManager : 1. DNS 질의 (글로벌 라우팅)
TrafficManager --> FrontDoor : 2. 최적 리전 라우팅
FrontDoor --> AppGateway : 3. WAF 보안 검사 + SSL 종료
AppGateway --> APIM : 4. API Gateway 인증/권한

' API Gateway에서 마이크로서비스 라우팅
APIM --> ProfileService : 5a. 프로파일 관련 요청
APIM --> ItineraryService : 5b. 일정 관련 요청  
APIM --> LocationService : 5c. 장소 관련 요청

' 마이크로서비스 간 통신
ItineraryService --> RedisCache : 6. 캐시 직접 읽기 (프로파일 정보)
ItineraryService --> ServiceBus : 7. AI 일정 생성 Job 큐잉
ServiceBus --> MCPProxy : 8. 외부 API 호출 트리거

' 데이터베이스 연결 (Private Link)
ProfileService --> PrivateLink : DB 연결
PrivateLink --> ProfileDB
ItineraryService --> PrivateLink
PrivateLink --> ItineraryDB
LocationService --> PrivateLink  
PrivateLink --> LocationDB

' 외부 API 호출
MCPProxy --> AzureFirewall : 9. 아웃바운드 트래픽 검사
AzureFirewall --> KakaoMCP : 10a. 국내 장소 API
AzureFirewall --> GoogleMCP : 10b. 해외 장소 API

' 캐시 및 파일 저장소
ProfileService --> RedisCache : 프로파일 캐시
ItineraryService --> BlobStorage : 첨부파일 업로드
LocationService --> RedisCache : 장소 정보 캐시

' 보안 통합
ProfileService --> KeyVault : 시크릿 조회
ItineraryService --> KeyVault
LocationService --> KeyVault
APIM --> AAD : 인증 토큰 검증

' 모니터링 및 로깅
ProfileService --> Monitor : 메트릭 및 로그
ItineraryService --> Monitor
LocationService --> Monitor
Monitor --> LogAnalytics : 통합 로그 저장

' CI/CD 파이프라인
GitHubActions --> ACR : 11. 컨테이너 이미지 빌드/푸시
ACR --> ProfileService : 12. 배포 (Blue-Green)
ACR --> ItineraryService
ACR --> LocationService

' 재해복구 복제
ProfileDB --> DRDatabase : 데이터 복제
BlobStorage --> DRStorage : Geo 복제
TrafficManager --> DREndpoint : 페일오버 엔드포인트

' 처리 플로우 설명
note top of User
<b>사용자 요청 처리 플로우</b>
----
1. DNS 기반 글로벌 라우팅
2. CDN + WAF 보안 처리
3. SSL 종료 및 로드밸런싱
4. API Gateway 인증/권한
5. 마이크로서비스 라우팅
6-7. 캐시 조회 및 비동기 처리
8-10. 외부 API 통합
end note

note right of ServiceBus
<b>비동기 처리 패턴</b>
----
• AI 일정 생성 Job Queue
• 외부 API 호출 최적화
• 배치 처리 및 재시도
• Dead Letter Queue 관리
end note

note bottom of RedisCache
<b>캐시 전략</b>
----
• 3계층 캐싱 구조
• Write-Through 패턴
• 캐시 히트율 > 80%
• TTL: 프로필(1h), 장소(2h)
end note

note left of Monitor
<b>운영 모니터링</b>
----
• 실시간 메트릭 수집
• 사용자 정의 대시보드
• 자동 알림 및 스케일링
• 99.9% 가용성 목표
end note

note bottom of DRDatabase
<b>재해복구 전략</b>
----
• Multi-Region 구성
• 자동 페일오버 (RTO: 15분)
• 데이터 백업 (RPO: 5분)
• 정기 DR 테스트
end note

' 범례
legend right
|= 색상 구분 |= Azure 서비스 |
| <#87CEEB> | 네트워킹 (Traffic Manager, Front Door) |
| <#4169E1> | 웹 계층 (App Gateway, API Management) |
| <#90EE90> | 애플리케이션 (Container Apps) |
| <#DDA0DD> | 서버리스 (Azure Functions) |
| <#FFC0CB> | 통합 서비스 (Service Bus) |
| <#F08080> | 캐시 (Redis) |
| <#B0E0E6> | 데이터베이스 (PostgreSQL) |
| <#ADD8E6> | 저장소 (Blob Storage) |
| <#FFD700> | 보안/관리 (Key Vault, AAD) |
| <#FFA500> | 모니터링 (Monitor, Log Analytics) |
| <#FFB6C1> | CI/CD (GitHub Actions, ACR) |
| <#C0C0C0> | 재해복구 (DR Region) |
|= 네트워크 구성 |= 설명 |
| Hub-Spoke VNet | 중앙집중식 네트워크 관리 |
| Private Link | 모든 PaaS 서비스 프라이빗 연결 |
| NSG 규칙 | 계층별 트래픽 제어 |
|= 비용 최적화 |= 전략 |
| Reserved Instances | PostgreSQL 30% 절약 |
| Spot Instances | 배치 작업 70% 절약 |
| Auto Scaling | 사용량 기반 스케일링 |
endlegend

@enduml