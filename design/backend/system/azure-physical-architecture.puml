@startuml
!theme mono

skinparam componentStyle rectangle
skinparam defaultTextAlignment center

title 여행 상세 일정 생성 서비스 - 물리 아키텍처 (Azure Kubernetes Service 기반)

' Azure 색상 정의
!define AZURE_COLOR #0078D4
!define AZURE_SYMBOL_COLOR #FFFFFF

' 사용자 및 외부 시스템
actor "여행자" as User

cloud "외부 API" {
    component "카카오 MCP API" as KakaoAPI #FFA07A
    component "구글 MCP API" as GoogleAPI #FFA07A
}

' Azure 리전
rectangle "Azure Korea Central Region" {
    
    ' 프론트엔드 계층 (향후 확장 예정)
    note "Frontend Tier - CDN 및 Static Web Storage는 향후 확장 예정" as FrontendNote #FFFFE0
    
    ' 컴퓨팅 계층
    rectangle "Compute Tier" #F5FFFA {
        component "Azure Kubernetes Service\n(Standard_D2s_v3)" as AKS #90EE90 {
            component "Profile Service\n(2 pods)" as ProfilePod
            component "Itinerary Service\n(3 pods)" as ItineraryPod
            component "Location Service\n(2 pods)" as LocationPod
            component "Spring Cloud Gateway" as SCG
        }
    }
    
    ' 데이터 계층
    rectangle "Data Tier" #FFF5EE {
        database "PostgreSQL\n(오픈소스)" as PostgreSQL #336791 {
            database "profile_db" as ProfileDB
            database "itinerary_db" as ItineraryDB
            database "location_db" as LocationDB
        }
        
        component "Redis\n(오픈소스)" as Redis #DC382D
    }
    
    ' 메시징 계층
    rectangle "Messaging Tier" #F5F5DC {
        component "Azure Service Bus\n(Standard)" as ServiceBus #DDA0DD
    }
    
    ' 모니터링 (향후 확장 예정)
    note "Monitoring - Azure Monitor 및 Application Insights는 향후 확장 예정" as MonitoringNote #FFFFE0
}

' 연결 관계
User --> SCG : HTTPS (REST API)
SCG --> ProfilePod
SCG --> ItineraryPod
SCG --> LocationPod

ProfilePod --> ProfileDB
ItineraryPod --> ItineraryDB
LocationPod --> LocationDB

ProfilePod --> Redis : Cache Write
ItineraryPod --> Redis : Cache Read/Write
LocationPod --> Redis : Cache Read/Write

ItineraryPod --> ServiceBus : AI Job Queue
ServiceBus --> ItineraryPod : Job Processing

LocationPod --> KakaoAPI : HTTPS
LocationPod --> GoogleAPI : HTTPS

' 모니터링 연결 (향후 확장 예정)

' 범례 및 설명
legend right
|= 구성 요소 |= 서비스 |= 스펙 |
| API Gateway | Spring Cloud Gateway | AKS 내부 배포 |
| Container Platform | Azure Kubernetes Service | Standard_D2s_v3 (3 nodes) |
| Database | PostgreSQL (오픈소스) | 2 vCores, 8GB RAM |
| Cache | Redis (오픈소스) | 1GB Memory |
| Message Queue | Azure Service Bus | Standard Tier |
| Frontend (향후) | CDN + Static Storage | 향후 확장 예정 |
| Monitoring (향후) | Monitor + App Insights | 향후 확장 예정 |

<b>예상 월 비용 (MVP 기준)</b>
• AKS: $300 (3 nodes)
• PostgreSQL (VM): $100
• Redis (VM): $30
• Service Bus: $10
• 기타: $20
<b>총계: 약 $460/월</b>

<b>스케일링 전략</b>
• HPA: CPU 70% 초과 시 자동 스케일
• 최소/최대 Pod: 2-10 (서비스별)
• DB: 필요시 vCore 증설
endlegend

note bottom of AKS
<b>AKS 구성 상세</b>
• Node Pool: Standard_D2s_v3 (2 vCPU, 8GB RAM)
• 초기 노드 수: 3개
• 자동 스케일링: 3-10 노드
• Kubernetes 버전: 1.27.x
• Container Runtime: containerd
• Ingress: Spring Cloud Gateway
• 외부 노출: LoadBalancer Service
end note

note right of Redis
<b>Redis 캐시 전략 (오픈소스)</b>
• 프로파일 데이터: TTL 24시간
• 장소 정보: TTL 1시간
• 검색 결과: TTL 10분
• Eviction Policy: allkeys-lru
• Redis 버전: 7.0+
end note

note left of ServiceBus
<b>Service Bus 구성</b>
• Queue: ai-generation-queue
• Max Delivery: 3회
• Lock Duration: 5분
• Message TTL: 1시간
end note

@enduml