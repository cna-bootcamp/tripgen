@startuml
!theme mono

title 여행 일정 생성 서비스 - 전체 클래스 구조도

' ======================================
' Common Components
' ======================================
package "Common Components" <<rectangle>> #lightgray {
    class BaseException
    class ApiResponse<T>
    class BaseEntity
    class DateUtils
    class ValidationUtils
    class SecurityUtils
}

' ======================================
' User Service (Layered Architecture)
' ======================================
package "User Service" <<rectangle>> #lightblue {
    class UserController {
        +registerUser: 회원가입
        +loginUser: 로그인
        +getProfile: 프로필 조회
        +updateProfile: 프로필 수정
    }
    
    interface UserService
    class UserServiceImpl {
        +authenticateUser: 사용자 인증
        +getUserProfile: 프로필 조회
        +updateProfile: 프로필 수정
    }
    
    interface UserRepository
    class UserRepositoryImpl {
        +findByUsername: 사용자명으로 조회
        +save: 사용자 저장
        +update: 사용자 정보 수정
    }
    
    class User
}

' ======================================
' Location Service (Layered Architecture)
' ======================================
package "Location Service" <<rectangle>> #lightgreen {
    class LocationController {
        +searchLocation: 위치 검색
        +getLocationDetail: 위치 상세 조회
        +getWeather: 날씨 정보 조회
        +getRoute: 경로 정보 조회
    }
    
    interface LocationService
    class LocationServiceImpl {
        +searchLocations: 위치 검색
        +getLocationDetail: 위치 상세 정보
        +getWeatherInfo: 날씨 정보 조회
    }
    
    interface LocationRepository
    class LocationRepositoryImpl {
        +findByName: 이름으로 위치 검색
        +findById: ID로 위치 조회
        +save: 위치 정보 저장
    }
    
    class Location
}

' ======================================
' AI Service (Layered Architecture)
' ======================================
package "AI Service" <<rectangle>> #lightyellow {
    class AIScheduleController {
        +generateSchedule: 일정 생성 요청
        +getScheduleJobStatus: 일정 생성 상태 조회
    }
    
    class AIRecommendationController {
        +generateRecommendation: 추천 정보 생성
        +getRecommendationJobStatus: 추천 상태 조회
    }
    
    interface AIScheduleService
    class AIScheduleServiceImpl {
        +generateSchedule: AI 일정 생성
        +getJobStatus: 작업 상태 조회
    }
    
    interface AIScheduleRepository
    class AIScheduleRepositoryImpl {
        +save: AI 일정 저장
        +findByJobId: 작업 ID로 조회
    }
    
    class AISchedule
}

' ======================================
' Trip Service (Clean Architecture)
' ======================================
package "Trip Service" <<rectangle>> #lightcoral {
    ' Framework & Driver Layer
    class TripController {
        +createTrip: 여행 생성
        +getTripDetail: 여행 상세 조회
        +updateTrip: 여행 정보 수정
    }
    
    class ScheduleController {
        +generateSchedule: 일정 생성
        +getSchedule: 일정 조회
        +updateSchedule: 일정 수정
    }
    
    ' Use Case Layer
    interface TripUseCase {
        +createTrip: 여행 생성 비즈니스 로직
        +getTripDetail: 여행 상세 조회 로직
        +updateTrip: 여행 수정 로직
    }
    
    interface ScheduleUseCase {
        +generateSchedule: 일정 생성 비즈니스 로직
        +getSchedule: 일정 조회 로직
        +updateSchedule: 일정 수정 로직
    }
    
    ' Interface Adapter Layer
    interface TripRepository
    class TripRepositoryImpl {
        +save: 여행 정보 저장
        +findById: ID로 여행 조회
        +update: 여행 정보 수정
    }
    
    interface UserServiceClient {
        +getUser: 사용자 정보 조회
        +validateUser: 사용자 검증
    }
    
    interface LocationServiceClient {
        +getLocationInfo: 위치 정보 조회
        +getWeatherInfo: 날씨 정보 조회
    }
    
    interface AiServiceClient {
        +generateSchedule: AI 일정 생성 요청
        +getScheduleStatus: 일정 생성 상태 조회
    }
    
    ' Entity Layer
    class Trip
    class Schedule
}

' ======================================
' External Services
' ======================================
package "External Services" <<rectangle>> #lightpink {
    class GooglePlacesClient {
        +searchPlaces: Google Places API 호출
    }
    
    class OpenAIClient {
        +generateText: OpenAI API 호출
    }
    
    class WeatherApiClient {
        +getWeather: 날씨 API 호출
    }
}

' ======================================
' Relationships - User Service
' ======================================
UserController --> UserService : 1
UserService <|.. UserServiceImpl : implements
UserServiceImpl --> UserRepository : 1
UserRepository <|.. UserRepositoryImpl : implements
UserRepositoryImpl ..> User : manages

' ======================================
' Relationships - Location Service
' ======================================
LocationController --> LocationService : 1
LocationService <|.. LocationServiceImpl : implements
LocationServiceImpl --> LocationRepository : 1
LocationRepository <|.. LocationRepositoryImpl : implements
LocationRepositoryImpl ..> Location : manages
LocationServiceImpl --> GooglePlacesClient : 1
LocationServiceImpl --> WeatherApiClient : 1

' ======================================
' Relationships - AI Service
' ======================================
AIScheduleController --> AIScheduleService : 1
AIScheduleService <|.. AIScheduleServiceImpl : implements
AIScheduleServiceImpl --> AIScheduleRepository : 1
AIScheduleRepository <|.. AIScheduleRepositoryImpl : implements
AIScheduleRepositoryImpl ..> AISchedule : manages
AIScheduleServiceImpl --> OpenAIClient : 1

' ======================================
' Relationships - Trip Service (Clean Architecture)
' ======================================
TripController --> TripUseCase : 1
ScheduleController --> ScheduleUseCase : 1
TripUseCase --> TripRepository : 1
ScheduleUseCase --> TripRepository : 1
TripRepository <|.. TripRepositoryImpl : implements
TripRepositoryImpl ..> Trip : manages
TripRepositoryImpl ..> Schedule : manages

' Trip Service External Dependencies
TripUseCase --> UserServiceClient : 1
ScheduleUseCase --> LocationServiceClient : 1
ScheduleUseCase --> AiServiceClient : 1

' Cross-Service Dependencies
UserServiceClient ..> UserService : "HTTP 호출"
LocationServiceClient ..> LocationService : "HTTP 호출"
AiServiceClient ..> AIScheduleService : "HTTP 호출"

' ======================================
' Common Component Usage
' ======================================
UserServiceImpl ..> BaseException : throws
LocationServiceImpl ..> BaseException : throws
AIScheduleServiceImpl ..> BaseException : throws
TripUseCase ..> BaseException : throws

UserController ..> ApiResponse : uses
LocationController ..> ApiResponse : uses
AIScheduleController ..> ApiResponse : uses
TripController ..> ApiResponse : uses

User --|> BaseEntity : extends
Location --|> BaseEntity : extends
AISchedule --|> BaseEntity : extends
Trip --|> BaseEntity : extends

UserServiceImpl ..> ValidationUtils : uses
LocationServiceImpl ..> DateUtils : uses
AIScheduleServiceImpl ..> SecurityUtils : uses

' ======================================
' Architecture Pattern Labels
' ======================================
note top of "User Service" : Layered Architecture\n(Controller → Service → Repository)

note top of "Location Service" : Layered Architecture\n(Controller → Service → Repository)

note top of "AI Service" : Layered Architecture\n(Controller → Service → Repository)

note top of "Trip Service" : Clean Architecture\n(Controller → UseCase → Repository)

note top of "Common Components" : 모든 서비스에서 공통 사용

@enduml