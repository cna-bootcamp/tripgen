@startuml
!theme mono

title Trip 서비스 간단 클래스 설계서 (Clean Architecture)

' ======================================
' Clean Architecture Layers Overview
' ======================================

package "Entity Layer (Domain)" <<Rectangle>> {
    class Trip {
        +createTrip(): 여행 생성
        +updateProgress(): 여행 진행 상태 업데이트
        +validateTripData(): 여행 데이터 검증
    }

    class Member {
        +addPreference(): 선호도 추가
        +isEligibleForActivity(): 활동 참여 가능 여부 확인
    }

    class Destination {
        +calculateEndDate(): 종료 날짜 계산
        +validateDestinationData(): 목적지 데이터 검증
    }

    class Schedule {
        +addPlace(): 장소 추가
        +updatePlaceOrder(): 장소 순서 변경
    }
}

package "Use Case Layer (Application)" <<Rectangle>> {
    interface TripUseCase {
        +createTrip(): 여행 생성
        +getTripList(): 여행 목록 조회
        +updateTrip(): 여행 정보 수정
    }

    interface MemberUseCase {
        +addTripMember(): 여행 멤버 추가
        +updateTripMember(): 여행 멤버 정보 수정
    }

    interface DestinationUseCase {
        +addTripDestination(): 여행 목적지 추가
        +updateDestinationsBatch(): 목적지 일괄 수정
    }

    interface ScheduleUseCase {
        +generateSchedule(): 일정 생성
        +getSchedules(): 일정 조회
        +exportSchedule(): 일정 내보내기
    }

    class TripUseCaseImpl {
        +createTrip(): 여행 생성 비즈니스 로직
        +getTripList(): 여행 목록 조회 비즈니스 로직
        +updateTrip(): 여행 정보 수정 비즈니스 로직
    }

    class ScheduleGenerationService {
        +generateTripSchedule(): 여행 일정 생성
        +getGenerationStatus(): 생성 상태 조회
    }
}

package "Interface Adapter Layer (Infrastructure)" <<Rectangle>> {
    interface TripRepository {
        +save(): 여행 정보 저장
        +findById(): ID로 여행 조회
        +findByUserId(): 사용자 ID로 여행 조회
    }

    interface UserServiceClient {
        +getUserById(): 사용자 ID로 사용자 정보 조회
        +validateUser(): 사용자 유효성 검증
    }

    interface AiServiceClient {
        +generateSchedule(): AI 일정 생성 요청
        +getGenerationStatus(): 생성 상태 조회
    }

    class TripRepositoryImpl {
        +save(): 여행 정보 저장 구현
        +findById(): ID로 여행 조회 구현
    }

    class UserServiceClientImpl {
        +getUserById(): 사용자 서비스 API 호출
    }

    class AiServiceClientImpl {
        +generateSchedule(): AI 서비스 API 호출
    }
}

package "Framework & Driver Layer (Controller)" <<Rectangle>> {
    class TripController {
        +getTripList(): 여행 목록 조회 API
        +createTrip(): 여행 생성 API
        +updateTrip(): 여행 정보 수정 API
    }

    class MemberController {
        +addTripMember(): 여행 멤버 추가 API
        +updateTripMember(): 여행 멤버 정보 수정 API
    }

    class DestinationController {
        +addTripDestination(): 여행 목적지 추가 API
        +updateDestinationsBatch(): 목적지 일괄 수정 API
    }

    class ScheduleController {
        +generateSchedule(): 일정 생성 API
        +getSchedules(): 일정 조회 API
        +exportSchedule(): 일정 내보내기 API
    }
}

' ======================================
' Key Relationships (Clean Architecture)
' ======================================

' Entity relationships
Trip ||--o{ Member : has
Trip ||--o{ Destination : has  
Trip ||--o{ Schedule : has

' Clean Architecture dependencies (inward only)
TripController --> TripUseCase : 1
MemberController --> MemberUseCase : 1
DestinationController --> DestinationUseCase : 1
ScheduleController --> ScheduleUseCase : 1

TripUseCaseImpl <|.. TripUseCase : implements
TripUseCaseImpl --> TripRepository : 1
TripUseCaseImpl --> UserServiceClient : 1

TripRepositoryImpl <|.. TripRepository : implements
UserServiceClientImpl <|.. UserServiceClient : implements
AiServiceClientImpl <|.. AiServiceClient : implements

' External service dependencies
ScheduleGenerationService --> AiServiceClient : 1
ScheduleUseCase --> ScheduleGenerationService : 1

' ======================================
' Architecture Notes
' ======================================
note top of "Entity Layer (Domain)"
**Entity Layer (Domain)**
- 비즈니스 규칙과 엔티티
- 외부 의존성 없음
- Clean Architecture 핵심
end note

note top of "Use Case Layer (Application)"
**Use Case Layer (Application)**  
- 애플리케이션 비즈니스 로직
- Entity Layer만 의존
- 외부 시스템과 격리
end note

note top of "Interface Adapter Layer (Infrastructure)"
**Interface Adapter Layer (Infrastructure)**
- 외부 시스템 연동
- Repository 구현체
- 외부 서비스 클라이언트
end note

note top of "Framework & Driver Layer (Controller)"
**Framework & Driver Layer (Controller)**
- 웹 컨트롤러
- Use Case Layer만 의존
- HTTP 요청/응답 처리
end note

' ======================================
' External Service Integration
' ======================================
package "External Services" <<Cloud>> {
    class UserService {
        +getUserInfo()
    }
    
    class LocationService {
        +getLocationInfo()
        +getWeatherInfo()
    }
    
    class AiService {
        +generateSchedule()
        +getRecommendations()
    }
}

UserServiceClientImpl ..> UserService : uses
AiServiceClientImpl ..> AiService : uses

@enduml