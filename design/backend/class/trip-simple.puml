@startuml
!theme mono

title Trip 서비스 간단 클래스 설계서 (Clean Architecture)

' ======================================
' Clean Architecture Layers Overview
' ======================================

package "Entity Layer (Domain)" <<Rectangle>> {
    class Trip {
        -tripId: String
        -tripName: String
        -transportMode: TransportMode
        -status: TripStatus
        +createTrip()
        +updateProgress()
        +validateTripData()
    }

    class Member {
        -memberId: String
        -name: String
        -age: Integer
        -healthStatus: HealthStatus
        +addPreference()
        +isEligibleForActivity()
    }

    class Destination {
        -destinationId: String
        -destinationName: String
        -nights: Integer
        +calculateEndDate()
        +validateDestinationData()
    }

    class Schedule {
        -scheduleId: String
        -day: Integer
        -places: List<SchedulePlace>
        +addPlace()
        +updatePlaceOrder()
    }
}

package "Use Case Layer (Application)" <<Rectangle>> {
    interface TripUseCase {
        +createTrip()
        +getTripList()
        +updateTrip()
    }

    interface MemberUseCase {
        +addTripMember()
        +updateTripMember()
    }

    interface DestinationUseCase {
        +addTripDestination()
        +updateDestinationsBatch()
    }

    interface ScheduleUseCase {
        +generateSchedule()
        +getSchedules()
        +exportSchedule()
    }

    class TripUseCaseImpl {
        +createTrip()
        +getTripList()
        +updateTrip()
    }

    class ScheduleGenerationService {
        +generateTripSchedule()
        +getGenerationStatus()
    }
}

package "Interface Adapter Layer (Infrastructure)" <<Rectangle>> {
    interface TripRepository {
        +save()
        +findById()
        +findByUserId()
    }

    interface UserServiceClient {
        +getUserById()
        +validateUser()
    }

    interface AiServiceClient {
        +generateSchedule()
        +getGenerationStatus()
    }

    class TripRepositoryImpl {
        +save()
        +findById()
    }

    class UserServiceClientImpl {
        +getUserById()
    }

    class AiServiceClientImpl {
        +generateSchedule()
    }
}

package "Framework & Driver Layer (Controller)" <<Rectangle>> {
    class TripController {
        +getTripList()
        +createTrip()
        +updateTrip()
    }

    class MemberController {
        +addTripMember()
        +updateTripMember()
    }

    class DestinationController {
        +addTripDestination()
        +updateDestinationsBatch()
    }

    class ScheduleController {
        +generateSchedule()
        +getSchedules()
        +exportSchedule()
    }
}

' ======================================
' Key Relationships (Clean Architecture)
' ======================================

' Entity relationships
Trip ||--o{ Member : has
Trip ||--o{ Destination : has  
Trip ||--o{ Schedule : has

' Clean Architecture dependencies (inward only)
TripController --> TripUseCase : uses
MemberController --> MemberUseCase : uses
DestinationController --> DestinationUseCase : uses
ScheduleController --> ScheduleUseCase : uses

TripUseCaseImpl ..|> TripUseCase : implements
TripUseCaseImpl --> TripRepository : uses
TripUseCaseImpl --> UserServiceClient : uses

TripRepositoryImpl ..|> TripRepository : implements
UserServiceClientImpl ..|> UserServiceClient : implements
AiServiceClientImpl ..|> AiServiceClient : implements

' External service dependencies
ScheduleGenerationService --> AiServiceClient : uses
ScheduleUseCase --> ScheduleGenerationService : uses

' ======================================
' Architecture Notes
' ======================================
note top of "Entity Layer (Domain)"
**Entity Layer (Domain)**
- 비즈니스 규칙과 엔티티
- 외부 의존성 없음
- Clean Architecture 핵심
end note

note top of "Use Case Layer (Application)"
**Use Case Layer (Application)**  
- 애플리케이션 비즈니스 로직
- Entity Layer만 의존
- 외부 시스템과 격리
end note

note top of "Interface Adapter Layer (Infrastructure)"
**Interface Adapter Layer (Infrastructure)**
- 외부 시스템 연동
- Repository 구현체
- 외부 서비스 클라이언트
end note

note top of "Framework & Driver Layer (Controller)"
**Framework & Driver Layer (Controller)**
- 웹 컨트롤러
- Use Case Layer만 의존
- HTTP 요청/응답 처리
end note

' ======================================
' External Service Integration
' ======================================
package "External Services" <<Cloud>> {
    class UserService {
        +getUserInfo()
    }
    
    class LocationService {
        +getLocationInfo()
        +getWeatherInfo()
    }
    
    class AiService {
        +generateSchedule()
        +getRecommendations()
    }
}

UserServiceClientImpl ..> UserService : calls
AiServiceClientImpl ..> AiService : calls

@enduml