@startuml
!theme mono

title Trip Service - Clean Architecture (Simplified)

' ===== USE CASE LAYER (INPUT PORTS) =====
package "usecase/in" {
    interface TripUseCase
    interface MemberUseCase
    interface DestinationUseCase
    interface ScheduleUseCase
}

' ===== USE CASE LAYER (OUTPUT PORTS) =====
package "usecase/out" {
    interface TripPort
    interface MemberPort
    interface DestinationPort
    interface SchedulePort
    interface AIServicePort
    interface LocationServicePort
    interface ExportServicePort
    interface CachePort
    interface EventPort
}

' ===== SERVICE LAYER =====
package "service" {
    class TripService
    class MemberService
    class DestinationService
    class ScheduleService
}

' ===== DOMAIN LAYER =====
package "domain" {
    class Trip
    class Member
    class Destination
    class Schedule
    class Place
    class Weather
    class Transportation
    class HealthConsideration
    class ScheduleGenerationRequest
    
    enum TripStatus
    enum TransportMode
    enum Gender
    enum HealthStatus
    enum ActivityPreference
    enum TransportType
    enum AccessibilityFeature
    enum GenerationRequestStatus
}

' ===== CONTROLLER LAYER =====
package "controller" {
    class TripController
    class MemberController
    class DestinationController
    class ScheduleController
}

' ===== GATEWAY LAYER =====
package "gateway" {
    class TripJpaAdapter
    class MemberJpaAdapter
    class DestinationJpaAdapter
    class ScheduleJpaAdapter
    class AIServiceAdapter
    class LocationServiceAdapter
    class ExportServiceAdapter
    class RedisCacheAdapter
    class EventPublisherAdapter
}

' ===== DTO LAYER =====
package "dto" {
    ' Command Objects
    class CreateTripCommand
    class UpdateTripCommand
    class UpdateBasicInfoCommand
    class TripListQuery
    class CreateMemberCommand
    class UpdateMemberCommand
    class CreateDestinationCommand
    class UpdateDestinationCommand
    class UpdateDestinationsBatchCommand
    class GenerateScheduleCommand
    class UpdateScheduleCommand
    class RegenerateScheduleCommand
    class ExportScheduleCommand
    
    ' Response Objects
    class TripSummary
    class TripDetail
    class TripDestinationResult
    class ScheduleGenerationResult
    class GenerationStatus
    class ExportResult
    class PlaceRecommendation
    
    ' External Service DTOs
    class AIScheduleRequest
    class AIScheduleResponse
    class PlaceRecommendationRequest
    class PlaceRecommendationResponse
    class LocationInfo
}

' ===== RELATIONSHIPS =====
' Clean Architecture Dependencies (Inner -> Outer)
TripService --|> TripUseCase : implements
MemberService --|> MemberUseCase : implements
DestinationService --|> DestinationUseCase : implements
ScheduleService --|> ScheduleUseCase : implements

TripController --> TripUseCase : uses
MemberController --> MemberUseCase : uses
DestinationController --> DestinationUseCase : uses
ScheduleController --> ScheduleUseCase : uses

TripJpaAdapter --|> TripPort : implements
MemberJpaAdapter --|> MemberPort : implements
DestinationJpaAdapter --|> DestinationPort : implements
ScheduleJpaAdapter --|> SchedulePort : implements
AIServiceAdapter --|> AIServicePort : implements
LocationServiceAdapter --|> LocationServicePort : implements
ExportServiceAdapter --|> ExportServicePort : implements
RedisCacheAdapter --|> CachePort : implements
EventPublisherAdapter --|> EventPort : implements

TripService --> TripPort : uses
TripService --> MemberPort : uses
TripService --> DestinationPort : uses
TripService --> CachePort : uses
TripService --> EventPort : uses

MemberService --> MemberPort : uses
MemberService --> TripPort : uses
MemberService --> CachePort : uses

DestinationService --> DestinationPort : uses
DestinationService --> TripPort : uses
DestinationService --> LocationServicePort : uses
DestinationService --> CachePort : uses

ScheduleService --> SchedulePort : uses
ScheduleService --> TripPort : uses
ScheduleService --> AIServicePort : uses
ScheduleService --> ExportServicePort : uses
ScheduleService --> CachePort : uses
ScheduleService --> EventPort : uses

' Domain Relationships
Trip ||--o{ Member : contains
Trip ||--o{ Destination : contains
Trip ||--o{ Schedule : contains
Schedule ||--o{ Place : contains
Schedule ||--o{ Weather : has
Place ||--o{ Transportation : has
Place ||--o{ HealthConsideration : has

@enduml