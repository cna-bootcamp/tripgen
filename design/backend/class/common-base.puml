@startuml
!theme mono

title 공통 베이스 컴포넌트 설계

package "Common Response" {
    class ApiResponse<T> {
        +success: boolean
        +message: String
        +data: T
        +timestamp: LocalDateTime
        +ApiResponse(success: boolean, message: String, data: T)
        +success(data: T): ApiResponse<T>
        +error(message: String): ApiResponse<T>
    }

    class ErrorResponse {
        +errorCode: String
        +errorMessage: String
        +details: Map<String, Object>
        +path: String
        +timestamp: LocalDateTime
        +ErrorResponse(errorCode: String, errorMessage: String, path: String)
    }
}

package "Common Exception" {
    abstract class BaseException {
        +errorCode: String
        +message: String
        +BaseException(errorCode: String, message: String)
        +getErrorCode(): String
    }

    class BusinessException {
        +BusinessException(errorCode: String, message: String)
    }

    class ValidationException {
        +field: String
        +rejectedValue: Object
        +ValidationException(field: String, message: String, rejectedValue: Object)
    }

    class ResourceNotFoundException {
        +resourceType: String
        +resourceId: String
        +ResourceNotFoundException(resourceType: String, resourceId: String)
    }
}

package "Common Entity" {
    abstract class BaseTimeEntity {
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        +onCreate(): void
        +onUpdate(): void
    }

    abstract class BaseEntity {
        +id: Long
        +version: Long
        +equals(obj: Object): boolean
        +hashCode(): int
    }
}

package "Common Utility" {
    class DateTimeUtil {
        +now(): LocalDateTime
        +format(dateTime: LocalDateTime, pattern: String): String
        +parse(dateTimeString: String, pattern: String): LocalDateTime
        +isValidDateTimeRange(start: LocalDateTime, end: LocalDateTime): boolean
    }

    class ValidationUtil {
        +isValidEmail(email: String): boolean
        +isValidPassword(password: String): boolean
        +isValidPhoneNumber(phoneNumber: String): boolean
        +sanitizeInput(input: String): String
    }

    class SecurityUtil {
        +encryptPassword(password: String): String
        +verifyPassword(rawPassword: String, encodedPassword: String): boolean
        +generateToken(userId: Long): String
        +validateToken(token: String): boolean
        +extractUserIdFromToken(token: String): Long
    }
}

package "Common Configuration" {
    interface CacheConfig {
        +getCacheName(): String
        +getTtl(): Duration
    }

    class RedisCacheConfig {
        +redisTemplate: RedisTemplate
        +getCacheName(): String
        +getTtl(): Duration
        +configureRedisTemplate(): RedisTemplate
    }
}

' Relationships
BaseException <|-- BusinessException
BaseException <|-- ValidationException
BaseException <|-- ResourceNotFoundException

BaseTimeEntity <|-- BaseEntity

CacheConfig <|.. RedisCacheConfig

@enduml