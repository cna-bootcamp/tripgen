@startuml
!theme mono

title Common Base Components - 공통 기본 컴포넌트

' ===== Common Exception Hierarchy =====
package "com.unicorn.tripgen.common.exception" {
    abstract class BaseException {
        -errorCode: ErrorCode
        -message: String
        -details: String
        +BaseException(errorCode: ErrorCode, message: String)
        +BaseException(errorCode: ErrorCode, message: String, details: String)
        +getErrorCode(): ErrorCode
        +getDetails(): String
    }
    
    class BusinessException extends BaseException {
        +BusinessException(errorCode: ErrorCode, message: String)
    }
    
    class ValidationException extends BaseException {
        +ValidationException(errorCode: ErrorCode, message: String)
    }
    
    class InfraException extends BaseException {
        +InfraException(errorCode: ErrorCode, message: String)
    }
    
    enum ErrorCode {
        +USER_NOT_FOUND
        +INVALID_CREDENTIALS
        +DUPLICATE_USERNAME
        +DUPLICATE_EMAIL
        +VALIDATION_ERROR
        +UNAUTHORIZED
        +FORBIDDEN
        +INTERNAL_SERVER_ERROR
        +TRIP_NOT_FOUND
        +LOCATION_NOT_FOUND
        +AI_SERVICE_ERROR
        -code: String
        -message: String
        +ErrorCode(code: String, message: String)
        +getCode(): String
        +getMessage(): String
    }
}

' ===== Common DTO Components =====
package "com.unicorn.tripgen.common.dto" {
    class ApiResponse<T> {
        -success: boolean
        -message: String
        -data: T
        -timestamp: LocalDateTime
        +ApiResponse()
        +ApiResponse(success: boolean, message: String, data: T)
        +success(data: T): ApiResponse<T>
        +error(message: String): ApiResponse<Void>
        +getSuccess(): boolean
        +getMessage(): String
        +getData(): T
        +getTimestamp(): LocalDateTime
    }
    
    class PageRequest {
        -page: int
        -size: int
        -sort: String
        +PageRequest()
        +PageRequest(page: int, size: int)
        +PageRequest(page: int, size: int, sort: String)
        +getPage(): int
        +getSize(): int
        +getSort(): String
    }
    
    class PageResponse<T> {
        -content: List<T>
        -totalElements: long
        -totalPages: int
        -currentPage: int
        -size: int
        -hasNext: boolean
        -hasPrevious: boolean
        +PageResponse()
        +PageResponse(content: List<T>, totalElements: long, currentPage: int, size: int)
        +getContent(): List<T>
        +getTotalElements(): long
        +getTotalPages(): int
        +getCurrentPage(): int
        +getSize(): int
        +isHasNext(): boolean
        +isHasPrevious(): boolean
    }
    
    class SuccessResponse {
        -message: String
        -timestamp: LocalDateTime
        +SuccessResponse()
        +SuccessResponse(message: String)
        +getMessage(): String
        +getTimestamp(): LocalDateTime
    }
}

' ===== Common Entity Base =====
package "com.unicorn.tripgen.common.entity" {
    abstract class BaseTimeEntity {
        -createdAt: LocalDateTime
        -updatedAt: LocalDateTime
        +BaseTimeEntity()
        +getCreatedAt(): LocalDateTime
        +getUpdatedAt(): LocalDateTime
        +onPrePersist(): void
        +onPreUpdate(): void
    }
}

' ===== Common Utility =====
package "com.unicorn.tripgen.common.util" {
    class PasswordEncoder {
        +encode(rawPassword: String): String
        +matches(rawPassword: String, encodedPassword: String): boolean
    }
    
    class JwtTokenProvider {
        -secretKey: String
        -tokenValidityInSeconds: long
        +generateToken(userDetails: UserDetails): String
        +validateToken(token: String): boolean
        +getUsernameFromToken(token: String): String
        +getExpirationDateFromToken(token: String): Date
    }
    
    class ValidationUtils {
        +isValidEmail(email: String): boolean
        +isValidUsername(username: String): boolean
        +isValidPassword(password: String): boolean
        +isValidPhoneNumber(phoneNumber: String): boolean
    }
    
    class DateTimeUtils {
        +now(): LocalDateTime
        +format(dateTime: LocalDateTime, pattern: String): String
        +parse(dateString: String, pattern: String): LocalDateTime
    }
}

' ===== Common Cache Service =====
package "com.unicorn.tripgen.common.service" {
    interface CacheService {
        +put(key: String, value: Object): void
        +put(key: String, value: Object, ttl: Duration): void
        +get(key: String, type: Class<T>): T
        +delete(key: String): void
        +exists(key: String): boolean
        +clear(): void
    }
    
    class RedisCacheService implements CacheService {
        -redisTemplate: RedisTemplate<String, Object>
        +RedisCacheService(redisTemplate: RedisTemplate<String, Object>)
        +put(key: String, value: Object): void
        +put(key: String, value: Object, ttl: Duration): void
        +get(key: String, type: Class<T>): T
        +delete(key: String): void
        +exists(key: String): boolean
        +clear(): void
    }
}

' ===== Security Components =====
package "com.unicorn.tripgen.common.security" {
    class SecurityUtils {
        +getCurrentUserId(): String
        +getCurrentUsername(): String
        +hasRole(role: String): boolean
        +isAuthenticated(): boolean
    }
    
    interface AuthenticationService {
        +authenticate(username: String, password: String): String
        +validateToken(token: String): boolean
        +logout(token: String): void
    }
}

' ===== Event Components =====
package "com.unicorn.tripgen.common.event" {
    abstract class BaseEvent {
        -eventId: String
        -timestamp: LocalDateTime
        -eventType: String
        +BaseEvent()
        +BaseEvent(eventType: String)
        +getEventId(): String
        +getTimestamp(): LocalDateTime
        +getEventType(): String
    }
    
    interface EventPublisher {
        +publish(event: BaseEvent): void
    }
    
    interface EventHandler<T extends BaseEvent> {
        +handle(event: T): void
    }
}

' ===== Relationships =====
ApiResponse ..> BaseException : uses
BusinessException --> ErrorCode : uses
ValidationException --> ErrorCode : uses
InfraException --> ErrorCode : uses
BaseTimeEntity <|-- "all entities" : extends

@enduml