@startuml
!theme mono

title 여행 일정 생성 서비스 - 공통 컴포넌트 클래스 다이어그램

package "com.unicorn.tripgen.common" {
    
    package "dto" {
        class ApiResponse<T> {
            - success: Boolean
            - message: String
            - data: T
            - errorCode: String
            - timestamp: LocalDateTime
            + ApiResponse()
            + static success(data: T): ApiResponse<T>
            + static error(message: String, errorCode: String): ApiResponse<T>
        }
        
        class PageRequest {
            - page: Integer
            - size: Integer
            - sort: String
            - direction: SortDirection
            + PageRequest()
            + getOffset(): Long
            + toPageable(): Pageable
        }
        
        class PageResponse<T> {
            - content: List<T>
            - totalElements: Long
            - totalPages: Integer
            - currentPage: Integer
            - size: Integer
            + PageResponse()
            + static of(content: List<T>, pageRequest: PageRequest, total: Long): PageResponse<T>
        }
        
        enum SortDirection {
            ASC
            DESC
        }
        
        class ErrorResponse {
            - errorCode: String
            - message: String
            - details: Map<String, String>
            - timestamp: LocalDateTime
            - path: String
            + ErrorResponse()
            + addDetail(key: String, value: String): void
        }
    }
    
    package "exception" {
        abstract class BusinessException {
            - errorCode: String
            - message: String
            + BusinessException(errorCode: String, message: String)
            + getErrorCode(): String
        }
        
        class ResourceNotFoundException extends BusinessException {
            + ResourceNotFoundException(resourceType: String, id: String)
        }
        
        class ValidationException extends BusinessException {
            - violations: Map<String, String>
            + ValidationException(message: String)
            + addViolation(field: String, message: String): void
            + getViolations(): Map<String, String>
        }
        
        class ExternalApiException extends BusinessException {
            - apiName: String
            - statusCode: Integer
            + ExternalApiException(apiName: String, statusCode: Integer, message: String)
        }
        
        class ConcurrentModificationException extends BusinessException {
            + ConcurrentModificationException(resourceType: String, id: String)
        }
    }
    
    package "util" {
        class DateTimeUtils {
            + {static} toLocalDateTime(instant: Instant): LocalDateTime
            + {static} toInstant(localDateTime: LocalDateTime): Instant
            + {static} format(dateTime: LocalDateTime, pattern: String): String
            + {static} parse(dateTimeStr: String, pattern: String): LocalDateTime
            + {static} isValidDateRange(start: LocalDate, end: LocalDate): Boolean
        }
        
        class StringUtils {
            + {static} isBlank(str: String): Boolean
            + {static} isNotBlank(str: String): Boolean
            + {static} truncate(str: String, maxLength: Integer): String
            + {static} generateRandomString(length: Integer): String
            + {static} toKebabCase(str: String): String
        }
        
        class JsonUtils {
            + {static} toJson(object: Object): String
            + {static} fromJson(json: String, clazz: Class<T>): T
            + {static} toMap(object: Object): Map<String, Object>
            + {static} merge(target: Object, source: Object): Object
        }
        
        class ValidationUtils {
            + {static} validateNotNull(object: Object, fieldName: String): void
            + {static} validateEmail(email: String): Boolean
            + {static} validatePhoneNumber(phoneNumber: String): Boolean
            + {static} validateDateRange(start: LocalDate, end: LocalDate): void
        }
    }
    
    package "config" {
        abstract class BaseConfig {
            # environment: String
            # applicationName: String
            + getEnvironment(): String
            + isProduction(): Boolean
            + isDevelopment(): Boolean
        }
        
        class CacheConfig extends BaseConfig {
            - defaultTtl: Duration
            - maxSize: Long
            - evictionPolicy: String
            + CacheConfig()
            + getCacheManager(): CacheManager
        }
        
        class RestTemplateConfig extends BaseConfig {
            - connectTimeout: Duration
            - readTimeout: Duration
            - maxConnections: Integer
            + RestTemplateConfig()
            + restTemplate(): RestTemplate
            + configureTimeouts(builder: RestTemplateBuilder): void
        }
        
        class ObjectMapperConfig extends BaseConfig {
            + ObjectMapperConfig()
            + objectMapper(): ObjectMapper
            + configureJavaTimeModule(mapper: ObjectMapper): void
        }
    }
    
    package "constant" {
        class CacheKeys {
            + {static} PROFILE_PREFIX: String = "profile:"
            + {static} LOCATION_PREFIX: String = "location:"
            + {static} ITINERARY_PREFIX: String = "itinerary:"
            + {static} buildProfileKey(tripId: String): String
            + {static} buildLocationKey(placeId: String): String
            + {static} buildItineraryKey(itineraryId: String): String
        }
        
        class ErrorCodes {
            + {static} RESOURCE_NOT_FOUND: String = "ERR_001"
            + {static} VALIDATION_FAILED: String = "ERR_002"
            + {static} EXTERNAL_API_ERROR: String = "ERR_003"
            + {static} CONCURRENT_MODIFICATION: String = "ERR_004"
            + {static} UNAUTHORIZED: String = "ERR_005"
            + {static} INTERNAL_SERVER_ERROR: String = "ERR_999"
        }
        
        class ApiConstants {
            + {static} DEFAULT_PAGE_SIZE: Integer = 20
            + {static} MAX_PAGE_SIZE: Integer = 100
            + {static} API_VERSION: String = "v1"
            + {static} CONTENT_TYPE_JSON: String = "application/json"
        }
    }
    
    package "interfaces" {
        interface Auditable {
            + getCreatedAt(): LocalDateTime
            + getUpdatedAt(): LocalDateTime
            + getCreatedBy(): String
            + getUpdatedBy(): String
        }
        
        interface Cacheable {
            + getCacheKey(): String
            + getCacheTtl(): Duration
        }
        
        interface Identifiable<ID> {
            + getId(): ID
        }
        
        interface Versionable {
            + getVersion(): Long
        }
    }
}

' 관계 정의
ApiResponse ..> ErrorResponse : uses
PageResponse ..> PageRequest : uses
ValidationException ..> ValidationUtils : uses
CacheConfig ..> CacheKeys : uses
ErrorResponse ..> ErrorCodes : uses

@enduml