@startuml
!theme mono

title AI 서비스 클래스 설계 (간단)

' ========== Controller Layer ==========
package "Controller Layer" {
    class AIScheduleController {
        -aiScheduleService: AIScheduleService
        +generateAISchedule(): ResponseEntity
        +getGenerationStatus(): ResponseEntity
        +getGeneratedSchedule(): ResponseEntity
        +cancelGeneration(): ResponseEntity
        +regenerateDaySchedule(): ResponseEntity
        +analyzeWeatherImpact(): ResponseEntity
    }

    class AIRecommendationController {
        -aiRecommendationService: AIRecommendationService
        +generatePlaceRecommendations(): ResponseEntity
    }
}

' ========== Service Layer ==========
package "Service Layer" {
    interface AIScheduleService {
        +generateSchedule(): GenerateScheduleResponse
        +getGenerationStatus(): GenerationStatusResponse
        +getGeneratedSchedule(): GeneratedScheduleResponse
        +cancelGeneration(): void
        +regenerateDaySchedule(): GenerateScheduleResponse
        +analyzeWeatherImpact(): WeatherImpactResponse
    }

    class AIScheduleServiceImpl {
        -aiRequestRepository: AIRequestRepository
        -aiScheduleRepository: AIScheduleRepository
        -aiEngineClient: AIEngineClient
        -weatherService: WeatherService
        -locationService: LocationService
        -cacheService: CacheService
        -messagingService: MessagingService
    }

    interface AIRecommendationService {
        +generateRecommendations(): RecommendationResponse
    }

    class AIRecommendationServiceImpl {
        -aiRecommendationRepository: AIRecommendationRepository
        -aiEngineClient: AIEngineClient
        -locationService: LocationService
        -cacheService: CacheService
    }

    interface WeatherService {
        +getCurrentWeather(): WeatherInfo
        +getWeatherForecast(): List<WeatherInfo>
        +analyzeWeatherImpact(): WeatherImpactAnalysis
    }

    class WeatherServiceImpl {
        -weatherApiClient: WeatherApiClient
        -cacheService: CacheService
    }

    interface LocationService {
        +getLocationInfo(): LocationInfo
        +searchNearbyPlaces(): List<LocationInfo>
        +calculateRoute(): RouteInfo
    }

    class LocationServiceImpl {
        -locationApiClient: LocationApiClient
        -cacheService: CacheService
    }

    interface CacheService {
        +put(): void
        +get(): Optional<T>
        +evict(): void
    }

    class CacheServiceImpl {
        -redisTemplate: RedisTemplate
    }

    interface MessagingService {
        +publishScheduleGenerationEvent(): void
        +subscribeToScheduleEvents(): void
    }

    class MessagingServiceImpl {
        -rabbitTemplate: RabbitTemplate
    }
}

' ========== Domain Layer ==========
package "Domain Layer" {
    class AIRequest {
        +requestId: String
        +tripId: String
        +status: GenerationStatus
        +progress: Integer
        +members: List<TripMember>
        +destinations: List<Destination>
        +updateStatus(): void
        +markCompleted(): void
        +isCompleted(): boolean
    }

    class AISchedule {
        +requestId: String
        +tripId: String
        +schedules: List<DaySchedule>
        +metadata: ScheduleMetadata
        +addDaySchedule(): void
        +getTotalDays(): Integer
    }

    class AIRecommendation {
        +placeId: String
        +recommendations: RecommendationContent
        +generatedAt: LocalDateTime
        +isExpired(): boolean
    }

    class TripMember {
        +name: String
        +age: Integer
        +gender: Gender
        +healthStatus: HealthStatus
        +preferences: List<String>
        +isElderly(): boolean
        +needsSpecialCare(): boolean
    }

    class Destination {
        +destinationName: String
        +nights: Integer
        +startDate: LocalDate
        +endDate: LocalDate
        +accommodation: String
        +getDuration(): Period
    }

    class DaySchedule {
        +day: Integer
        +date: LocalDate
        +destinationName: String
        +weather: WeatherInfo
        +places: List<PlaceVisit>
        +getTotalDuration(): Integer
    }

    class PlaceVisit {
        +placeId: String
        +placeName: String
        +startTime: LocalTime
        +duration: Integer
        +transportation: Transportation
        +getEndTime(): LocalTime
    }

    class RecommendationContent {
        +reasons: List<String>
        +tips: RecommendationTips
        +addReason(): void
    }

    class WeatherInfo {
        +condition: String
        +temperature: Temperature
        +precipitation: Double
        +isRainy(): boolean
    }
}

' ========== Repository Layer ==========
package "Repository Layer" {
    interface AIRequestRepository {
        +findByRequestId(): Optional<AIRequestEntity>
        +findByTripId(): List<AIRequestEntity>
        +save(): AIRequestEntity
    }

    interface AIScheduleRepository {
        +findByRequestId(): Optional<AIScheduleEntity>
        +findByTripId(): List<AIScheduleEntity>
        +save(): AIScheduleEntity
    }

    interface AIRecommendationRepository {
        +findByPlaceId(): Optional<AIRecommendationEntity>
        +save(): AIRecommendationEntity
        +deleteExpiredRecommendations(): void
    }

    class AIRequestEntity {
        +id: Long
        +requestId: String
        +tripId: String
        +status: String
        +toDomain(): AIRequest
        +fromDomain(): AIRequestEntity
    }

    class AIScheduleEntity {
        +id: Long
        +requestId: String
        +tripId: String
        +schedulesJson: String
        +toDomain(): AISchedule
        +fromDomain(): AIScheduleEntity
    }

    class AIRecommendationEntity {
        +id: Long
        +placeId: String
        +recommendationsJson: String
        +toDomain(): AIRecommendation
        +fromDomain(): AIRecommendationEntity
    }
}

' ========== External Client Layer ==========
package "External Client Layer" {
    interface AIEngineClient {
        +submitScheduleGeneration(): AIEngineResponse
        +getGenerationStatus(): AIEngineStatusResponse
        +generateRecommendations(): AIEngineRecommendationResponse
    }

    class AIEngineClientImpl {
        -restTemplate: RestTemplate
        -aiEngineConfig: AIEngineConfig
    }

    interface WeatherApiClient {
        +getCurrentWeather(): WeatherApiResponse
        +getWeatherForecast(): WeatherForecastResponse
    }

    class WeatherApiClientImpl {
        -restTemplate: RestTemplate
        -weatherApiConfig: WeatherApiConfig
    }

    interface LocationApiClient {
        +getLocationDetails(): LocationApiResponse
        +searchPlaces(): LocationSearchResponse
        +calculateRoute(): RouteApiResponse
    }

    class LocationApiClientImpl {
        -restTemplate: RestTemplate
        -locationApiConfig: LocationApiConfig
    }
}

' ========== Configuration ==========
package "Configuration Layer" {
    class AIServiceConfig {
        +aiEngineConfig: AIEngineConfig
        +cacheConfig: CacheConfig
        +messagingConfig: MessagingConfig
    }
}

' ========== Common Components ==========
package "Common Components" {
    class ApiResponse
    class BaseException
    class BaseTimeEntity
    class CacheConfig
}

' ========== Relationships ==========

' Controller to Service
AIScheduleController --> AIScheduleService
AIRecommendationController --> AIRecommendationService

' Service Implementation
AIScheduleService <|.. AIScheduleServiceImpl
AIRecommendationService <|.. AIRecommendationServiceImpl
WeatherService <|.. WeatherServiceImpl
LocationService <|.. LocationServiceImpl
CacheService <|.. CacheServiceImpl
MessagingService <|.. MessagingServiceImpl

' Service Dependencies
AIScheduleServiceImpl --> AIRequestRepository
AIScheduleServiceImpl --> AIScheduleRepository
AIScheduleServiceImpl --> AIEngineClient
AIScheduleServiceImpl --> WeatherService
AIScheduleServiceImpl --> LocationService
AIScheduleServiceImpl --> CacheService

AIRecommendationServiceImpl --> AIRecommendationRepository
AIRecommendationServiceImpl --> AIEngineClient
AIRecommendationServiceImpl --> LocationService

' Domain Relationships
AIRequest --> TripMember
AIRequest --> Destination
AISchedule --> DaySchedule
DaySchedule --> PlaceVisit
PlaceVisit --> Transportation
AIRecommendation --> RecommendationContent

' Repository Relationships
AIRequestRepository --> AIRequestEntity
AIScheduleRepository --> AIScheduleEntity
AIRecommendationRepository --> AIRecommendationEntity

' Entity to Base
AIRequestEntity --> BaseTimeEntity
AIScheduleEntity --> BaseTimeEntity
AIRecommendationEntity --> BaseTimeEntity

' Client Implementation
AIEngineClient <|.. AIEngineClientImpl
WeatherApiClient <|.. WeatherApiClientImpl
LocationApiClient <|.. LocationApiClientImpl

' Common Components
AIScheduleController --> ApiResponse
AIRecommendationController --> ApiResponse
AIScheduleServiceImpl --> BaseException
CacheServiceImpl --> CacheConfig

@enduml