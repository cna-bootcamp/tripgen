@startuml
!theme mono

title AI Service - Simple Class Design (Layered Architecture)

' ===== Controller Layer =====
package "com.unicorn.tripgen.ai.controller" <<Container>> {
    class AIScheduleController
    class AIRecommendationController
    class AIExceptionHandler
}

' ===== Service Layer =====
package "com.unicorn.tripgen.ai.service" <<Container>> {
    interface AIScheduleService
    class AIScheduleServiceImpl
    interface AIRecommendationService
    class AIRecommendationServiceImpl
    interface GenerationStatusService
    class GenerationStatusServiceImpl
    interface AIModelService
    class OpenAIModelService
    class GeminiModelService
}

' ===== Repository Layer =====
package "com.unicorn.tripgen.ai.repository" <<Container>> {
    interface ScheduleRepository
    interface GenerationStatusRepository
    interface RecommendationRepository
}

' ===== Entity Layer =====
package "com.unicorn.tripgen.ai.entity" <<Container>> {
    class SchedulePlan
    class GenerationStatusEntity
    class PlaceRecommendationEntity
    enum GenerationStatus
}

' ===== DTO Layer =====
package "com.unicorn.tripgen.ai.dto" <<Container>> {
    class GenerateScheduleRequestDto
    class GenerateScheduleResponseDto
    class GenerationStatusResponseDto
    class GeneratedScheduleResponseDto
    class RegenerateScheduleRequestDto
    class RecommendationRequestDto
    class RecommendationResponseDto
    class WeatherImpactRequestDto
    class WeatherImpactResponseDto
    
    ' Supporting DTOs
    class TripMemberDto
    class TripDestinationDto
    class DailyScheduleDto
    class PlaceScheduleDto
    class GenerationStepDto
    class ScheduleMetadataDto
    class ExistingScheduleDto
    class UserProfileDto
    class TripContextDto
    class PlaceRecommendationDto
    class RecommendationTipsDto
    class AlternativePlaceDto
    class ScheduleForAnalysisDto
    class AnalysisPlaceDto
    class WeatherChangeDto
    class ImpactedDayDto
    class WeatherDto
    class TemperatureDto
    class TransportationDto
    class ParkingInfoDto
    class HealthConsiderationDto
    class OptionalActivitiesDto
    class WeatherConsiderationDto
}

' ===== Configuration Layer =====
package "com.unicorn.tripgen.ai.config" <<Container>> {
    class AIServiceConfig
    class AIModelConfig
    class CacheConfig
    class AsyncConfig
}

' ===== Exception Layer =====
package "com.unicorn.tripgen.ai.exception" <<Container>> {
    class AIServiceException
    class AIModelException
    class GenerationTimeoutException
    class ScheduleNotFoundException
    class RecommendationNotFoundException
}

' ===== Event Layer =====
package "com.unicorn.tripgen.ai.event" <<Container>> {
    class ScheduleGenerationStartedEvent
    class ScheduleGenerationCompletedEvent
    class ScheduleGenerationFailedEvent
}

' ===== Model Layer =====
package "com.unicorn.tripgen.ai.model" <<Container>> {
    class DailySchedule
    class PlaceSchedule
    class PlaceRecommendation
    class RecommendationTips
    class AlternativePlace
    class Weather
    class Temperature
    class Transportation
    class ParkingInfo
    class HealthConsideration
    class OptionalActivities
    class WeatherConsideration
}

' ===== Layer Relationships =====
' Interface Implementations
AIScheduleServiceImpl ..|> AIScheduleService : implements
AIRecommendationServiceImpl ..|> AIRecommendationService : implements
GenerationStatusServiceImpl ..|> GenerationStatusService : implements
OpenAIModelService ..|> AIModelService : implements
GeminiModelService ..|> AIModelService : implements

' Controller to Service Dependencies
AIScheduleController --> AIScheduleService : uses
AIScheduleController --> GenerationStatusService : uses
AIRecommendationController --> AIRecommendationService : uses

' Service to Repository Dependencies
AIScheduleServiceImpl --> ScheduleRepository : uses
AIScheduleServiceImpl --> GenerationStatusRepository : uses
AIRecommendationServiceImpl --> RecommendationRepository : uses
GenerationStatusServiceImpl --> GenerationStatusRepository : uses

' Service to Model Dependencies
AIScheduleServiceImpl --> AIModelService : uses
AIRecommendationServiceImpl --> AIModelService : uses
OpenAIModelService --> AIModelConfig : uses
GeminiModelService --> AIModelConfig : uses

' Entity Inheritance
SchedulePlan --|> BaseTimeEntity : extends
GenerationStatusEntity --|> BaseTimeEntity : extends
PlaceRecommendationEntity --|> BaseTimeEntity : extends

' Exception Inheritance
AIServiceException --|> BusinessException : extends
AIModelException --|> InfraException : extends
GenerationTimeoutException --|> InfraException : extends
ScheduleNotFoundException --|> BusinessException : extends
RecommendationNotFoundException --|> BusinessException : extends

' Event Inheritance
ScheduleGenerationStartedEvent --|> BaseEvent : extends
ScheduleGenerationCompletedEvent --|> BaseEvent : extends
ScheduleGenerationFailedEvent --|> BaseEvent : extends

' Configuration Dependencies
AIServiceConfig --> AIModelConfig : creates
AIServiceConfig --> OpenAIModelService : creates
AIServiceConfig --> GeminiModelService : creates
CacheConfig --> CacheService : creates

@enduml