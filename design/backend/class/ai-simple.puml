@startuml
!theme mono

title AI 서비스 간단 클래스 설계서 (Layered Architecture)

' ======================================
' Controller Layer
' ======================================
package "Controller Layer" <<Node>> {
    class AIScheduleController {
        +generateAISchedule(): AI 여행 일정 생성 요청
        +getGenerationStatus(): 일정 생성 상태 조회
        +getGeneratedSchedule(): 생성된 일정 조회
        +cancelGeneration(): 일정 생성 취소
        +regenerateDaySchedule(): 특정 날짜 일정 재생성
        +analyzeWeatherImpact(): 날씨 영향 분석
    }

    class AIRecommendationController {
        +generatePlaceRecommendations(): 장소 추천 정보 생성
    }
}

' ======================================
' Service Layer
' ======================================
package "Service Layer" <<Node>> {
    interface AIScheduleService
    class AIScheduleServiceImpl {
        +generateSchedule(): 일정 생성 비즈니스 로직
        +getGenerationStatus(): 생성 상태 조회 로직
        +getGeneratedSchedule(): 생성된 일정 반환
        +cancelGeneration(): 생성 취소 처리
        +regenerateDaySchedule(): 일별 일정 재생성 로직
        +analyzeWeatherImpact(): 날씨 영향 분석 처리
    }

    interface AIRecommendationService
    class AIRecommendationServiceImpl {
        +generatePlaceRecommendations(): 장소 추천 생성 로직
        +getCachedRecommendations(): 캐시된 추천 정보 조회
        +cacheRecommendations(): 추천 정보 캐싱
    }

    class AIJobService {
        +createJob(): 비동기 작업 생성
        +updateJobStatus(): 작업 상태 업데이트
        +completeJob(): 작업 완료 처리
        +failJob(): 작업 실패 처리
        +getJobStatus(): 작업 상태 조회
        +cancelJob(): 작업 취소 처리
    }
}

' ======================================
' Repository Layer
' ======================================
package "Repository Layer" <<Database>> {
    interface AIScheduleRepository {
        +save(): 일정 데이터 저장
        +findByRequestId(): 요청 ID로 일정 조회
        +findByTripId(): 여행 ID로 일정 조회
        +deleteByRequestId(): 요청 ID로 일정 삭제
    }

    interface AIJobRepository {
        +save(): 작업 정보 저장
        +findByRequestId(): 요청 ID로 작업 조회
        +findByStatus(): 상태별 작업 조회
        +updateJobStatus(): 작업 상태 업데이트
    }

    interface AIRecommendationRepository {
        +save(): 추천 정보 저장
        +findByPlaceIdAndProfileHash(): 장소와 프로필로 추천 조회
        +findByPlaceId(): 장소 ID로 추천 조회
        +deleteExpired(): 만료된 추천 정보 삭제
    }
}

' ======================================
' Entity Layer
' ======================================
package "Entity Layer" <<Database>> {
    class AISchedule

    class AIJob

    class AIRecommendation
}

' ======================================
' External Clients
' ======================================
package "External Clients" <<Cloud>> {
    interface AIModelClient
    class OpenAIClient
    class ClaudeClient
    
    interface WeatherServiceClient
    interface LocationServiceClient
}

' ======================================
' DTO Layer
' ======================================
package "DTO Layer" <<Folder>> {
    class GenerateScheduleRequest
    class GenerateScheduleResponse
    class GenerationStatusResponse
    class GeneratedScheduleDto
    class RecommendationRequest
    class RecommendationResponse
    class WeatherImpactRequest
    class WeatherImpactResponse
}

' ======================================
' Enums
' ======================================
package "Enums" <<Folder>> {
    enum AIJobType {
        SCHEDULE_GENERATION
        SCHEDULE_REGENERATION
        RECOMMENDATION_GENERATION
        WEATHER_IMPACT_ANALYSIS
    }

    enum AIJobStatus {
        QUEUED
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
    }
}

' ======================================
' Infrastructure
' ======================================
package "Infrastructure" <<Component>> {
    interface CacheManager
    interface MessageQueue
}

' ======================================
' Validation
' ======================================
package "Validation" <<Component>> {
    class AIScheduleValidator
    class RecommendationValidator
}

' ======================================
' Main Relationships
' ======================================

' Layered Architecture Flow
AIScheduleController --> AIScheduleService : 1
AIScheduleController --> AIScheduleValidator : 1
AIRecommendationController --> AIRecommendationService : 1
AIRecommendationController --> RecommendationValidator : 1

AIScheduleService <|.. AIScheduleServiceImpl : implements
AIRecommendationService <|.. AIRecommendationServiceImpl : implements

AIScheduleServiceImpl --> AIScheduleRepository : 1
AIScheduleServiceImpl --> AIJobRepository : 1
AIScheduleServiceImpl --> AIModelClient : 1
AIScheduleServiceImpl --> WeatherServiceClient : 1
AIScheduleServiceImpl --> LocationServiceClient : 1
AIScheduleServiceImpl --> CacheManager : 1
AIScheduleServiceImpl --> MessageQueue : 1

AIRecommendationServiceImpl --> AIRecommendationRepository : 1
AIRecommendationServiceImpl --> AIModelClient : 1
AIRecommendationServiceImpl --> LocationServiceClient : 1
AIRecommendationServiceImpl --> CacheManager : 1

AIJobService --> AIJobRepository : 1
AIJobService --> MessageQueue : 1

' AI Model Client Implementations  
AIModelClient <|.. OpenAIClient : implements
AIModelClient <|.. ClaudeClient : implements

' Entity Usage
AIScheduleRepository --> AISchedule : 1
AIJobRepository --> AIJob : 1
AIRecommendationRepository --> AIRecommendation : 1

AISchedule --> AIJobStatus : 1
AIJob --> AIJobType : 1
AIJob --> AIJobStatus : 1

' DTO Usage by Controllers
AIScheduleController ..> GenerateScheduleRequest : uses
AIScheduleController ..> GenerateScheduleResponse : uses
AIScheduleController ..> GenerationStatusResponse : uses
AIScheduleController ..> GeneratedScheduleDto : uses
AIScheduleController ..> WeatherImpactRequest : uses
AIScheduleController ..> WeatherImpactResponse : uses

AIRecommendationController ..> RecommendationRequest : uses
AIRecommendationController ..> RecommendationResponse : uses

@enduml