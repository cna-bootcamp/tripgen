@startuml
!theme mono

title Location Service - 간단 클래스 설계서

' ================================
' Controller Layer
' ================================
package "Controller" {
    class LocationController {
        +searchNearbyPlaces(): ResponseEntity<ApiResponse<NearbySearchResponse>>
        +searchByKeyword(): ResponseEntity<ApiResponse<KeywordSearchResponse>>
        +getPlaceDetails(): ResponseEntity<ApiResponse<PlaceDetails>>
        +getPlaceRecommendations(): ResponseEntity<ApiResponse<AIRecommendationResponse>>
        +getBusinessHours(): ResponseEntity<ApiResponse<BusinessHours>>
    }
}

' ================================
' Service Layer
' ================================
package "Service" {
    interface LocationService {
        +searchNearbyPlaces(): NearbySearchResponse
        +searchByKeyword(): KeywordSearchResponse
        +getPlaceDetails(): PlaceDetails
        +getPlaceRecommendations(): AIRecommendationResponse
        +getBusinessHours(): BusinessHours
    }

    class LocationServiceImpl {
        +searchNearbyPlaces(): NearbySearchResponse
        +searchByKeyword(): KeywordSearchResponse
        +getPlaceDetails(): PlaceDetails
        +getPlaceRecommendations(): AIRecommendationResponse
        +getBusinessHours(): BusinessHours
    }

    class PlaceSearchService {
        +searchNearbyPlaces(): List<PlaceCard>
        +searchByKeyword(): List<PlaceCard>
        +getTotalCount(): Integer
    }

    class PlaceDetailsService {
        +getPlaceDetails(): PlaceDetails
        +enrichWithReviews(): PlaceDetails
    }

    class AIRecommendationService {
        +getRecommendations(): AIRecommendationResponse
        +generateRecommendations(): CompletableFuture<AIRecommendation>
    }

    class BusinessHoursService {
        +getBusinessHours(): BusinessHours
        +getCurrentStatus(): String
    }

    class ReviewService {
        +getLatestReviews(): List<Review>
    }

    class CacheService {
        +get(): T
        +put(): void
        +evict(): void
        +exists(): Boolean
    }
}

' ================================
' Domain Layer
' ================================
package "Domain" {
    class Location {
        +latitude: Double
        +longitude: Double
        +address: String
    }

    class PlaceCard {
        +placeId: String
        +name: String
        +category: PlaceCategory
        +rating: Float
        +reviewCount: Integer
        +address: String
        +distance: Integer
        +travelTime: Integer
        +imageUrl: String
    }

    class PlaceDetails {
        +placeId: String
        +name: String
        +category: PlaceCategory
        +description: String
        +rating: Float
        +reviewCount: Integer
        +images: List<String>
        +location: LocationInfo
        +businessHours: BusinessHours
        +contact: ContactInfo
        +aiRecommendation: AIRecommendation
        +reviews: List<Review>
    }

    class BusinessHours {
        +isOpen: Boolean
        +currentStatus: String
        +todayHours: String
        +weeklyHours: List<DayHours>
    }

    class AIRecommendation {
        +recommendReason: String
        +tips: AITips
    }

    class AITips {
        +description: String
        +bestVisitTime: String
        +estimatedDuration: String
        +photoSpots: List<String>
        +practicalTips: List<String>
        +alternativePlaces: List<AlternativePlace>
    }

    enum TransportMode {
        PUBLIC_TRANSPORT
        CAR
        WALKING
    }

    enum PlaceCategory {
        ALL
        TOURIST
        RESTAURANT
        LAUNDRY
    }
}

' ================================
' DTO Layer
' ================================
package "DTO" {
    class NearbySearchRequest {
        +origin: Location
        +transportMode: TransportMode
        +timeRange: Integer
        +category: PlaceCategory
        +page: Integer
        +size: Integer
    }

    class NearbySearchResponse {
        +totalCount: Integer
        +page: Integer
        +size: Integer
        +hasNext: Boolean
        +places: List<PlaceCard>
    }

    class KeywordSearchResponse {
        +keyword: String
        +totalCount: Integer
        +page: Integer
        +size: Integer
        +hasNext: Boolean
        +places: List<PlaceCard>
    }

    class AIRecommendationResponse {
        +locationId: String
        +recommendations: AIRecommendation
        +fromCache: Boolean
        +generatedAt: LocalDateTime
    }
}

' ================================
' Repository Layer
' ================================
package "Repository" {
    interface ExternalPlaceRepository {
        +searchNearbyPlaces(): List<ExternalPlace>
        +searchByKeyword(): List<ExternalPlace>
        +getPlaceDetails(): ExternalPlace
        +getBusinessHours(): ExternalBusinessHours
        +getReviews(): List<ExternalReview>
    }

    class GooglePlacesRepository {
        +searchNearbyPlaces(): List<ExternalPlace>
        +searchByKeyword(): List<ExternalPlace>
        +getPlaceDetails(): ExternalPlace
        +getBusinessHours(): ExternalBusinessHours
        +getReviews(): List<ExternalReview>
    }
}

' ================================
' Client Layer
' ================================
package "Client" {
    interface AIServiceClient {
        +generateRecommendations(): CompletableFuture<AIRecommendation>
        +isServiceAvailable(): Boolean
    }

    class AIServiceClientImpl {
        +generateRecommendations(): CompletableFuture<AIRecommendation>
        +isServiceAvailable(): Boolean
    }

    interface TripServiceClient {
        +getUserProfile(): UserProfile
        +isServiceAvailable(): Boolean
    }

    class TripServiceClientImpl {
        +getUserProfile(): UserProfile
        +isServiceAvailable(): Boolean
    }
}

' ================================
' Configuration Layer
' ================================
package "Configuration" {
    class LocationConfig {
        +googlePlacesRepository(): GooglePlacesRepository
        +aiServiceClient(): AIServiceClient
        +tripServiceClient(): TripServiceClient
    }

    class CacheConfiguration {
        +defaultTtl: Duration
        +placeDetailsTtl: Duration
        +aiRecommendationTtl: Duration
    }
}

' ================================
' Common Components (참조만)
' ================================
package "Common" {
    class ApiResponse<T>
    abstract class BaseException
    class ValidationUtil
    class DateTimeUtil
    interface CacheConfig
}

' ================================
' Main Relationships
' ================================

' Controller to Service
LocationController --> LocationService

' Service Layer
LocationService <|.. LocationServiceImpl
LocationServiceImpl --> PlaceSearchService
LocationServiceImpl --> PlaceDetailsService
LocationServiceImpl --> AIRecommendationService
LocationServiceImpl --> BusinessHoursService
LocationServiceImpl --> CacheService

' Service to Repository/Client
PlaceSearchService --> ExternalPlaceRepository
PlaceDetailsService --> ExternalPlaceRepository
AIRecommendationService --> AIServiceClient
AIRecommendationService --> TripServiceClient

' Repository Implementation
ExternalPlaceRepository <|.. GooglePlacesRepository

' Client Implementation
AIServiceClient <|.. AIServiceClientImpl
TripServiceClient <|.. TripServiceClientImpl

' Domain Relationships
PlaceDetails --> BusinessHours
PlaceDetails --> AIRecommendation
AIRecommendation --> AITips
NearbySearchRequest --> Location
NearbySearchRequest --> TransportMode
NearbySearchResponse --> PlaceCard

' Common Dependencies
LocationController --> ApiResponse
LocationServiceImpl --> BaseException
LocationConfig --> CacheConfig

@enduml