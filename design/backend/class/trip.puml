@startuml
!theme mono

title Trip Service - Clean Architecture Class Design

' ===== USE CASE LAYER (INPUT PORTS) =====
package "usecase/in" {
    interface TripUseCase {
        +createTrip(request: CreateTripCommand): Trip
        +getTripList(userId: String, request: TripListQuery): PageResponse<TripSummary>
        +getTripDetail(tripId: String): TripDetail
        +updateTrip(tripId: String, request: UpdateTripCommand): Trip
        +deleteTrip(tripId: String): void
        +updateBasicInfo(tripId: String, request: UpdateBasicInfoCommand): TripDetail
    }
    
    interface MemberUseCase {
        +getTripMembers(tripId: String): List<Member>
        +addMember(tripId: String, request: CreateMemberCommand): Member
        +updateMember(tripId: String, memberId: String, request: UpdateMemberCommand): Member
        +deleteMember(tripId: String, memberId: String): void
    }
    
    interface DestinationUseCase {
        +getTripDestinations(tripId: String): List<Destination>
        +addDestination(tripId: String, request: CreateDestinationCommand): Destination
        +updateDestination(tripId: String, destinationId: String, request: UpdateDestinationCommand): Destination
        +deleteDestination(tripId: String, destinationId: String): void
        +updateDestinationsBatch(tripId: String, request: UpdateDestinationsBatchCommand): TripDestinationResult
    }
    
    interface ScheduleUseCase {
        +generateSchedule(tripId: String, request: GenerateScheduleCommand): ScheduleGenerationResult
        +getGenerationStatus(tripId: String, requestId: String): GenerationStatus
        +getSchedules(tripId: String, day: Integer): List<Schedule>
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleCommand): Schedule
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleCommand): ScheduleGenerationResult
        +exportSchedule(tripId: String, request: ExportScheduleCommand): ExportResult
        +getPlaceRecommendations(tripId: String, placeId: String, day: Integer): PlaceRecommendation
    }
}

' ===== USE CASE LAYER (OUTPUT PORTS) =====
package "usecase/out" {
    interface TripPort {
        +save(trip: Trip): Trip
        +findById(tripId: String): Optional<Trip>
        +findByUserIdAndStatus(userId: String, status: TripStatus, pageable: Pageable): Page<Trip>
        +findByUserId(userId: String, pageable: Pageable): Page<Trip>
        +searchTrips(userId: String, search: String, pageable: Pageable): Page<Trip>
        +delete(tripId: String): void
        +existsByUserIdAndTripName(userId: String, tripName: String): boolean
    }
    
    interface MemberPort {
        +save(member: Member): Member
        +findByTripId(tripId: String): List<Member>
        +findById(memberId: String): Optional<Member>
        +deleteByTripId(tripId: String): void
        +delete(memberId: String): void
    }
    
    interface DestinationPort {
        +save(destination: Destination): Destination
        +findByTripId(tripId: String): List<Destination>
        +findById(destinationId: String): Optional<Destination>
        +deleteByTripId(tripId: String): void
        +delete(destinationId: String): void
        +saveAll(destinations: List<Destination>): List<Destination>
    }
    
    interface SchedulePort {
        +save(schedule: Schedule): Schedule
        +findByTripId(tripId: String): List<Schedule>
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<Schedule>
        +deleteByTripId(tripId: String): void
        +saveGenerationRequest(request: ScheduleGenerationRequest): ScheduleGenerationRequest
        +findGenerationRequest(requestId: String): Optional<ScheduleGenerationRequest>
        +updateGenerationStatus(requestId: String, status: GenerationStatus): void
    }
    
    interface AIServicePort {
        +generateSchedule(request: AIScheduleRequest): CompletableFuture<AIScheduleResponse>
        +getRecommendations(request: PlaceRecommendationRequest): CompletableFuture<PlaceRecommendationResponse>
    }
    
    interface LocationServicePort {
        +getLocationInfo(locationName: String): Optional<LocationInfo>
        +searchLocations(query: String): List<LocationInfo>
        +validateDestination(destinationName: String): boolean
    }
    
    interface ExportServicePort {
        +exportToPdf(schedules: List<Schedule>, options: ExportOptions): byte[]
        +exportToImage(schedules: List<Schedule>, options: ExportOptions): byte[]
    }
    
    interface CachePort {
        +put(key: String, value: Object, ttl: Duration): void
        +get(key: String, type: Class<T>): Optional<T>
        +delete(key: String): void
        +exists(key: String): boolean
    }
    
    interface EventPort {
        +publishTripCreated(event: TripCreatedEvent): void
        +publishTripDeleted(event: TripDeletedEvent): void
        +publishScheduleGenerated(event: ScheduleGeneratedEvent): void
    }
}

' ===== SERVICE LAYER =====
package "service" {
    class TripService implements TripUseCase {
        -tripPort: TripPort
        -memberPort: MemberPort
        -destinationPort: DestinationPort
        -cachePort: CachePort
        -eventPort: EventPort
        +TripService(tripPort: TripPort, memberPort: MemberPort, destinationPort: DestinationPort, cachePort: CachePort, eventPort: EventPort)
        +createTrip(request: CreateTripCommand): Trip
        +getTripList(userId: String, request: TripListQuery): PageResponse<TripSummary>
        +getTripDetail(tripId: String): TripDetail
        +updateTrip(tripId: String, request: UpdateTripCommand): Trip
        +deleteTrip(tripId: String): void
        +updateBasicInfo(tripId: String, request: UpdateBasicInfoCommand): TripDetail
        -validateTripOwnership(tripId: String, userId: String): void
        -generateTripId(): String
    }
    
    class MemberService implements MemberUseCase {
        -memberPort: MemberPort
        -tripPort: TripPort
        -cachePort: CachePort
        +MemberService(memberPort: MemberPort, tripPort: TripPort, cachePort: CachePort)
        +getTripMembers(tripId: String): List<Member>
        +addMember(tripId: String, request: CreateMemberCommand): Member
        +updateMember(tripId: String, memberId: String, request: UpdateMemberCommand): Member
        +deleteMember(tripId: String, memberId: String): void
        -validateTripExists(tripId: String): void
        -generateMemberId(): String
    }
    
    class DestinationService implements DestinationUseCase {
        -destinationPort: DestinationPort
        -tripPort: TripPort
        -locationServicePort: LocationServicePort
        -cachePort: CachePort
        +DestinationService(destinationPort: DestinationPort, tripPort: TripPort, locationServicePort: LocationServicePort, cachePort: CachePort)
        +getTripDestinations(tripId: String): List<Destination>
        +addDestination(tripId: String, request: CreateDestinationCommand): Destination
        +updateDestination(tripId: String, destinationId: String, request: UpdateDestinationCommand): Destination
        +deleteDestination(tripId: String, destinationId: String): void
        +updateDestinationsBatch(tripId: String, request: UpdateDestinationsBatchCommand): TripDestinationResult
        -validateDestinationName(destinationName: String): void
        -calculateTripDates(destinations: List<Destination>): TripDateRange
        -generateDestinationId(): String
    }
    
    class ScheduleService implements ScheduleUseCase {
        -schedulePort: SchedulePort
        -tripPort: TripPort
        -aiServicePort: AIServicePort
        -exportServicePort: ExportServicePort
        -cachePort: CachePort
        -eventPort: EventPort
        +ScheduleService(schedulePort: SchedulePort, tripPort: TripPort, aiServicePort: AIServicePort, exportServicePort: ExportServicePort, cachePort: CachePort, eventPort: EventPort)
        +generateSchedule(tripId: String, request: GenerateScheduleCommand): ScheduleGenerationResult
        +getGenerationStatus(tripId: String, requestId: String): GenerationStatus
        +getSchedules(tripId: String, day: Integer): List<Schedule>
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleCommand): Schedule
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleCommand): ScheduleGenerationResult
        +exportSchedule(tripId: String, request: ExportScheduleCommand): ExportResult
        +getPlaceRecommendations(tripId: String, placeId: String, day: Integer): PlaceRecommendation
        -validateTripForScheduleGeneration(tripId: String): void
        -buildAIScheduleRequest(trip: Trip, request: GenerateScheduleCommand): AIScheduleRequest
        -processAIScheduleResponse(tripId: String, response: AIScheduleResponse): List<Schedule>
        -generateRequestId(): String
    }
}

' ===== DOMAIN LAYER =====
package "domain" {
    class Trip extends BaseTimeEntity {
        -tripId: String
        -userId: String
        -tripName: String
        -transportMode: TransportMode
        -status: TripStatus
        -currentStep: String
        -startDate: LocalDate
        -endDate: LocalDate
        -progress: Integer
        +Trip()
        +Trip(tripId: String, userId: String, tripName: String, transportMode: TransportMode)
        +updateBasicInfo(tripName: String, transportMode: TransportMode): void
        +updateStatus(status: TripStatus): void
        +updateProgress(progress: Integer): void
        +updateDates(startDate: LocalDate, endDate: LocalDate): void
        +getTotalDays(): Integer
        +isOwner(userId: String): boolean
        +canGenerateSchedule(): boolean
        +isCompleted(): boolean
    }
    
    enum TripStatus {
        +PLANNING
        +ONGOING
        +COMPLETED
    }
    
    enum TransportMode {
        +PUBLIC
        +CAR
    }
    
    class Member extends BaseTimeEntity {
        -memberId: String
        -tripId: String
        -name: String
        -age: Integer
        -gender: Gender
        -healthStatus: HealthStatus
        -preferences: List<ActivityPreference>
        +Member()
        +Member(memberId: String, tripId: String, name: String, age: Integer, gender: Gender, healthStatus: HealthStatus)
        +updateInfo(name: String, age: Integer, gender: Gender, healthStatus: HealthStatus): void
        +updatePreferences(preferences: List<ActivityPreference>): void
        +isValidAge(): boolean
        +canParticipateIn(activity: String): boolean
    }
    
    enum Gender {
        +MALE
        +FEMALE
    }
    
    enum HealthStatus {
        +EXCELLENT
        +GOOD
        +CAUTION
        +LIMITED
    }
    
    enum ActivityPreference {
        +SIGHTSEEING
        +SHOPPING
        +CULTURE
        +NATURE
        +SPORTS
        +REST
    }
    
    class Destination extends BaseTimeEntity {
        -destinationId: String
        -tripId: String
        -destinationName: String
        -nights: Integer
        -accommodation: String
        -checkInTime: LocalTime
        -checkOutTime: LocalTime
        -startDate: LocalDate
        -endDate: LocalDate
        -order: Integer
        +Destination()
        +Destination(destinationId: String, tripId: String, destinationName: String, nights: Integer)
        +updateInfo(destinationName: String, nights: Integer, accommodation: String): void
        +updateCheckTimes(checkInTime: LocalTime, checkOutTime: LocalTime): void
        +updateDates(startDate: LocalDate, endDate: LocalDate): void
        +updateOrder(order: Integer): void
        +getTotalNights(): Integer
        +isValidNights(): boolean
    }
    
    class Schedule extends BaseTimeEntity {
        -scheduleId: String
        -tripId: String
        -day: Integer
        -date: LocalDate
        -city: String
        -weather: Weather
        -places: List<Place>
        +Schedule()
        +Schedule(scheduleId: String, tripId: String, day: Integer, date: LocalDate, city: String)
        +addPlace(place: Place): void
        +removePlace(placeId: String): void
        +updatePlace(place: Place): void
        +reorderPlaces(places: List<Place>): void
        +updateWeather(weather: Weather): void
        +getTotalDuration(): Integer
        +isValidSchedule(): boolean
    }
    
    class Place {
        -placeId: String
        -placeName: String
        -category: String
        -startTime: LocalTime
        -duration: Integer
        -transportation: Transportation
        -healthConsideration: HealthConsideration
        -order: Integer
        +Place()
        +Place(placeId: String, placeName: String, category: String, startTime: LocalTime, duration: Integer)
        +updateTiming(startTime: LocalTime, duration: Integer): void
        +updateTransportation(transportation: Transportation): void
        +updateOrder(order: Integer): void
        +getEndTime(): LocalTime
        +isAccessible(healthStatus: HealthStatus): boolean
    }
    
    class Weather {
        -condition: String
        -minTemperature: Double
        -maxTemperature: Double
        -icon: String
        +Weather()
        +Weather(condition: String, minTemperature: Double, maxTemperature: Double, icon: String)
        +getTemperatureRange(): String
        +isGoodWeather(): boolean
    }
    
    class Transportation {
        -type: TransportType
        -duration: Integer
        -distance: Double
        -route: String
        +Transportation()
        +Transportation(type: TransportType, duration: Integer, distance: Double, route: String)
        +isWalkingDistance(): boolean
        +getEstimatedCost(): Double
    }
    
    enum TransportType {
        +WALK
        +CAR
        +PUBLIC
    }
    
    class HealthConsideration {
        -restPoints: List<String>
        -accessibility: List<AccessibilityFeature>
        -walkingDistance: Double
        +HealthConsideration()
        +addRestPoint(restPoint: String): void
        +addAccessibility(feature: AccessibilityFeature): void
        +isSuitableFor(healthStatus: HealthStatus): boolean
    }
    
    enum AccessibilityFeature {
        +ELEVATOR
        +RAMP
        +WHEELCHAIR
    }
    
    class ScheduleGenerationRequest extends BaseTimeEntity {
        -requestId: String
        -tripId: String
        -startTime: LocalTime
        -specialRequests: String
        -status: GenerationRequestStatus
        -progress: Integer
        -message: String
        -estimatedTime: Integer
        -error: String
        +ScheduleGenerationRequest()
        +ScheduleGenerationRequest(requestId: String, tripId: String, startTime: LocalTime)
        +updateStatus(status: GenerationRequestStatus, progress: Integer, message: String): void
        +updateError(error: String): void
        +isCompleted(): boolean
        +isFailed(): boolean
    }
    
    enum GenerationRequestStatus {
        +QUEUED
        +PROCESSING
        +COMPLETED
        +FAILED
    }
}

' ===== CONTROLLER LAYER =====
package "controller" {
    class TripController {
        -tripUseCase: TripUseCase
        +TripController(tripUseCase: TripUseCase)
        +getTripList(status: String, search: String, sort: String, page: Integer, size: Integer): ResponseEntity<ApiResponse<TripListResponse>>
        +createTrip(request: CreateTripRequest): ResponseEntity<ApiResponse<TripResponse>>
        +getTripDetail(tripId: String): ResponseEntity<ApiResponse<TripDetailResponse>>
        +updateTrip(tripId: String, request: UpdateTripRequest): ResponseEntity<ApiResponse<TripResponse>>
        +deleteTrip(tripId: String): ResponseEntity<ApiResponse<Void>>
        +updateTripBasicInfo(tripId: String, request: UpdateTripBasicInfoRequest): ResponseEntity<ApiResponse<TripBasicInfoResponse>>
        -getCurrentUserId(): String
        -buildTripListQuery(status: String, search: String, sort: String, page: Integer, size: Integer): TripListQuery
    }
    
    class MemberController {
        -memberUseCase: MemberUseCase
        +MemberController(memberUseCase: MemberUseCase)
        +getTripMembers(tripId: String): ResponseEntity<ApiResponse<List<MemberResponse>>>
        +addTripMember(tripId: String, request: CreateMemberRequest): ResponseEntity<ApiResponse<MemberResponse>>
        +updateTripMember(tripId: String, memberId: String, request: UpdateMemberRequest): ResponseEntity<ApiResponse<MemberResponse>>
        +deleteTripMember(tripId: String, memberId: String): ResponseEntity<ApiResponse<Void>>
    }
    
    class DestinationController {
        -destinationUseCase: DestinationUseCase
        +DestinationController(destinationUseCase: DestinationUseCase)
        +getTripDestinations(tripId: String): ResponseEntity<ApiResponse<List<DestinationResponse>>>
        +addTripDestination(tripId: String, request: CreateDestinationRequest): ResponseEntity<ApiResponse<DestinationResponse>>
        +updateTripDestination(tripId: String, destinationId: String, request: UpdateDestinationRequest): ResponseEntity<ApiResponse<DestinationResponse>>
        +deleteTripDestination(tripId: String, destinationId: String): ResponseEntity<ApiResponse<Void>>
        +updateTripDestinationsBatch(tripId: String, request: UpdateDestinationsBatchRequest): ResponseEntity<ApiResponse<DestinationsBatchResponse>>
    }
    
    class ScheduleController {
        -scheduleUseCase: ScheduleUseCase
        +ScheduleController(scheduleUseCase: ScheduleUseCase)
        +generateSchedule(tripId: String, request: GenerateScheduleRequest): ResponseEntity<ApiResponse<GenerateScheduleResponse>>
        +getGenerationStatus(tripId: String, requestId: String): ResponseEntity<ApiResponse<GenerationStatusResponse>>
        +getSchedules(tripId: String, day: Integer): ResponseEntity<ApiResponse<ScheduleListResponse>>
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleRequest): ResponseEntity<ApiResponse<ScheduleResponse>>
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleRequest): ResponseEntity<ApiResponse<GenerateScheduleResponse>>
        +exportSchedule(tripId: String, request: ExportScheduleRequest): ResponseEntity<byte[]>
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, day: Integer): ResponseEntity<ApiResponse<PlaceRecommendationResponse>>
    }
}

' ===== GATEWAY LAYER =====
package "gateway" {
    class TripJpaAdapter implements TripPort {
        -tripRepository: TripRepository
        +TripJpaAdapter(tripRepository: TripRepository)
        +save(trip: Trip): Trip
        +findById(tripId: String): Optional<Trip>
        +findByUserIdAndStatus(userId: String, status: TripStatus, pageable: Pageable): Page<Trip>
        +findByUserId(userId: String, pageable: Pageable): Page<Trip>
        +searchTrips(userId: String, search: String, pageable: Pageable): Page<Trip>
        +delete(tripId: String): void
        +existsByUserIdAndTripName(userId: String, tripName: String): boolean
    }
    
    class MemberJpaAdapter implements MemberPort {
        -memberRepository: MemberRepository
        +MemberJpaAdapter(memberRepository: MemberRepository)
        +save(member: Member): Member
        +findByTripId(tripId: String): List<Member>
        +findById(memberId: String): Optional<Member>
        +deleteByTripId(tripId: String): void
        +delete(memberId: String): void
    }
    
    class DestinationJpaAdapter implements DestinationPort {
        -destinationRepository: DestinationRepository
        +DestinationJpaAdapter(destinationRepository: DestinationRepository)
        +save(destination: Destination): Destination
        +findByTripId(tripId: String): List<Destination>
        +findById(destinationId: String): Optional<Destination>
        +deleteByTripId(tripId: String): void
        +delete(destinationId: String): void
        +saveAll(destinations: List<Destination>): List<Destination>
    }
    
    class ScheduleJpaAdapter implements SchedulePort {
        -scheduleRepository: ScheduleRepository
        -generationRequestRepository: GenerationRequestRepository
        +ScheduleJpaAdapter(scheduleRepository: ScheduleRepository, generationRequestRepository: GenerationRequestRepository)
        +save(schedule: Schedule): Schedule
        +findByTripId(tripId: String): List<Schedule>
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<Schedule>
        +deleteByTripId(tripId: String): void
        +saveGenerationRequest(request: ScheduleGenerationRequest): ScheduleGenerationRequest
        +findGenerationRequest(requestId: String): Optional<ScheduleGenerationRequest>
        +updateGenerationStatus(requestId: String, status: GenerationStatus): void
    }
    
    class AIServiceAdapter implements AIServicePort {
        -aiServiceClient: AIServiceClient
        -cachePort: CachePort
        +AIServiceAdapter(aiServiceClient: AIServiceClient, cachePort: CachePort)
        +generateSchedule(request: AIScheduleRequest): CompletableFuture<AIScheduleResponse>
        +getRecommendations(request: PlaceRecommendationRequest): CompletableFuture<PlaceRecommendationResponse>
        -getCachedRecommendation(placeId: String): Optional<PlaceRecommendation>
        -cacheRecommendation(placeId: String, recommendation: PlaceRecommendation): void
    }
    
    class LocationServiceAdapter implements LocationServicePort {
        -locationServiceClient: LocationServiceClient
        -cachePort: CachePort
        +LocationServiceAdapter(locationServiceClient: LocationServiceClient, cachePort: CachePort)
        +getLocationInfo(locationName: String): Optional<LocationInfo>
        +searchLocations(query: String): List<LocationInfo>
        +validateDestination(destinationName: String): boolean
        -getCachedLocationInfo(locationName: String): Optional<LocationInfo>
        -cacheLocationInfo(locationName: String, locationInfo: LocationInfo): void
    }
    
    class ExportServiceAdapter implements ExportServicePort {
        -pdfGenerator: PdfGenerator
        -imageGenerator: ImageGenerator
        +ExportServiceAdapter(pdfGenerator: PdfGenerator, imageGenerator: ImageGenerator)
        +exportToPdf(schedules: List<Schedule>, options: ExportOptions): byte[]
        +exportToImage(schedules: List<Schedule>, options: ExportOptions): byte[]
    }
    
    class RedisCacheAdapter implements CachePort {
        -cacheService: CacheService
        +RedisCacheAdapter(cacheService: CacheService)
        +put(key: String, value: Object, ttl: Duration): void
        +get(key: String, type: Class<T>): Optional<T>
        +delete(key: String): void
        +exists(key: String): boolean
    }
    
    class EventPublisherAdapter implements EventPort {
        -eventPublisher: EventPublisher
        +EventPublisherAdapter(eventPublisher: EventPublisher)
        +publishTripCreated(event: TripCreatedEvent): void
        +publishTripDeleted(event: TripDeletedEvent): void
        +publishScheduleGenerated(event: ScheduleGeneratedEvent): void
    }
}

' ===== DTO LAYER =====
package "dto" {
    ' Command Objects (Input)
    class CreateTripCommand {
        -tripName: String
        -transportMode: TransportMode
        +CreateTripCommand()
        +CreateTripCommand(tripName: String, transportMode: TransportMode)
        +validate(): void
    }
    
    class UpdateTripCommand {
        -tripName: String
        -transportMode: TransportMode
        +UpdateTripCommand()
        +validate(): void
    }
    
    class UpdateBasicInfoCommand {
        -tripName: String
        -transportMode: TransportMode
        -members: List<CreateMemberCommand>
        +UpdateBasicInfoCommand()
        +validate(): void
    }
    
    class TripListQuery {
        -userId: String
        -status: TripStatus
        -search: String
        -sort: String
        -pageable: Pageable
        +TripListQuery()
        +TripListQuery(userId: String, status: TripStatus, search: String, sort: String, pageable: Pageable)
    }
    
    class CreateMemberCommand {
        -name: String
        -age: Integer
        -gender: Gender
        -healthStatus: HealthStatus
        -preferences: List<ActivityPreference>
        +CreateMemberCommand()
        +validate(): void
    }
    
    class UpdateMemberCommand {
        -name: String
        -age: Integer
        -gender: Gender
        -healthStatus: HealthStatus
        -preferences: List<ActivityPreference>
        +UpdateMemberCommand()
        +validate(): void
    }
    
    class CreateDestinationCommand {
        -destinationName: String
        -nights: Integer
        -accommodation: String
        -checkInTime: LocalTime
        -checkOutTime: LocalTime
        +CreateDestinationCommand()
        +validate(): void
    }
    
    class UpdateDestinationCommand {
        -destinationName: String
        -nights: Integer
        -accommodation: String
        -checkInTime: LocalTime
        -checkOutTime: LocalTime
        +UpdateDestinationCommand()
        +validate(): void
    }
    
    class UpdateDestinationsBatchCommand {
        -destinations: List<CreateDestinationCommand>
        +UpdateDestinationsBatchCommand()
        +validate(): void
    }
    
    class GenerateScheduleCommand {
        -startTime: LocalTime
        -specialRequests: String
        +GenerateScheduleCommand()
        +GenerateScheduleCommand(startTime: LocalTime, specialRequests: String)
        +validate(): void
    }
    
    class UpdateScheduleCommand {
        -places: List<PlaceOrder>
        +UpdateScheduleCommand()
        +validate(): void
    }
    
    class RegenerateScheduleCommand {
        -specialRequests: String
        +RegenerateScheduleCommand()
        +RegenerateScheduleCommand(specialRequests: String)
    }
    
    class ExportScheduleCommand {
        -format: String
        -includeMap: Boolean
        -days: List<Integer>
        +ExportScheduleCommand()
        +validate(): void
    }
    
    class PlaceOrder {
        -placeId: String
        -order: Integer
        +PlaceOrder()
        +PlaceOrder(placeId: String, order: Integer)
    }
    
    ' Response Objects (Output)
    class TripSummary {
        -tripId: String
        -tripName: String
        -status: TripStatus
        -currentStep: String
        -startDate: LocalDate
        -endDate: LocalDate
        -memberCount: Integer
        -destinationCount: Integer
        -progress: Integer
        -createdAt: LocalDateTime
        -updatedAt: LocalDateTime
        +TripSummary()
        +fromTrip(trip: Trip): TripSummary
    }
    
    class TripDetail {
        -tripId: String
        -tripName: String
        -transportMode: TransportMode
        -status: TripStatus
        -currentStep: String
        -startDate: LocalDate
        -endDate: LocalDate
        -members: List<Member>
        -destinations: List<Destination>
        -hasSchedule: Boolean
        -createdAt: LocalDateTime
        -updatedAt: LocalDateTime
        +TripDetail()
        +fromTrip(trip: Trip, members: List<Member>, destinations: List<Destination>, hasSchedule: Boolean): TripDetail
    }
    
    class TripDestinationResult {
        -tripId: String
        -destinations: List<Destination>
        -totalDays: Integer
        -startDate: LocalDate
        -endDate: LocalDate
        -updatedAt: LocalDateTime
        +TripDestinationResult()
        +create(tripId: String, destinations: List<Destination>): TripDestinationResult
    }
    
    class ScheduleGenerationResult {
        -requestId: String
        -status: GenerationRequestStatus
        -message: String
        +ScheduleGenerationResult()
        +ScheduleGenerationResult(requestId: String, status: GenerationRequestStatus, message: String)
    }
    
    class GenerationStatus {
        -requestId: String
        -status: GenerationRequestStatus
        -progress: Integer
        -message: String
        -estimatedTime: Integer
        -error: String
        +GenerationStatus()
        +fromRequest(request: ScheduleGenerationRequest): GenerationStatus
    }
    
    class ExportResult {
        -data: byte[]
        -contentType: String
        -filename: String
        +ExportResult()
        +ExportResult(data: byte[], contentType: String, filename: String)
    }
    
    class PlaceRecommendation {
        -placeId: String
        -placeName: String
        -reasons: List<String>
        -tips: RecommendationTips
        -context: RecommendationContext
        -fromCache: Boolean
        +PlaceRecommendation()
    }
    
    class RecommendationTips {
        -description: String
        -events: List<String>
        -bestVisitTime: String
        -estimatedDuration: String
        -photoSpots: List<String>
        -practicalTips: List<String>
        +RecommendationTips()
    }
    
    class RecommendationContext {
        -day: Integer
        -previousPlace: String
        -nextPlace: String
        +RecommendationContext()
    }
    
    ' External Service DTOs
    class AIScheduleRequest {
        -tripId: String
        -members: List<Member>
        -destinations: List<Destination>
        -startTime: LocalTime
        -specialRequests: String
        -transportMode: TransportMode
        +AIScheduleRequest()
    }
    
    class AIScheduleResponse {
        -schedules: List<AIScheduleDay>
        -metadata: AIResponseMetadata
        +AIScheduleResponse()
    }
    
    class AIScheduleDay {
        -day: Integer
        -date: LocalDate
        -city: String
        -weather: Weather
        -places: List<AIPlace>
        +AIScheduleDay()
    }
    
    class AIPlace {
        -placeId: String
        -placeName: String
        -category: String
        -startTime: LocalTime
        -duration: Integer
        -transportation: Transportation
        -healthConsideration: HealthConsideration
        +AIPlace()
    }
    
    class AIResponseMetadata {
        -generatedAt: LocalDateTime
        -confidence: Double
        -version: String
        +AIResponseMetadata()
    }
    
    class PlaceRecommendationRequest {
        -placeId: String
        -placeName: String
        -tripContext: TripContext
        -memberProfiles: List<MemberProfile>
        +PlaceRecommendationRequest()
    }
    
    class PlaceRecommendationResponse {
        -placeId: String
        -recommendations: PlaceRecommendation
        +PlaceRecommendationResponse()
    }
    
    class TripContext {
        -tripId: String
        -day: Integer
        -previousPlace: String
        -nextPlace: String
        -transportMode: TransportMode
        +TripContext()
    }
    
    class MemberProfile {
        -age: Integer
        -gender: Gender
        -healthStatus: HealthStatus
        -preferences: List<ActivityPreference>
        +MemberProfile()
        +fromMember(member: Member): MemberProfile
    }
    
    class LocationInfo {
        -locationId: String
        -locationName: String
        -coordinates: Coordinates
        -category: String
        -description: String
        +LocationInfo()
    }
    
    class Coordinates {
        -latitude: Double
        -longitude: Double
        +Coordinates()
        +Coordinates(latitude: Double, longitude: Double)
    }
    
    class ExportOptions {
        -includeMap: Boolean
        -days: List<Integer>
        -format: String
        +ExportOptions()
    }
}

' ===== RELATIONSHIPS =====
' Use Case Dependencies
TripService --> TripPort : uses
TripService --> MemberPort : uses
TripService --> DestinationPort : uses
TripService --> CachePort : uses
TripService --> EventPort : uses

MemberService --> MemberPort : uses
MemberService --> TripPort : uses
MemberService --> CachePort : uses

DestinationService --> DestinationPort : uses
DestinationService --> TripPort : uses
DestinationService --> LocationServicePort : uses
DestinationService --> CachePort : uses

ScheduleService --> SchedulePort : uses
ScheduleService --> TripPort : uses
ScheduleService --> AIServicePort : uses
ScheduleService --> ExportServicePort : uses
ScheduleService --> CachePort : uses
ScheduleService --> EventPort : uses

' Controller Dependencies
TripController --> TripUseCase : uses
MemberController --> MemberUseCase : uses
DestinationController --> DestinationUseCase : uses
ScheduleController --> ScheduleUseCase : uses

' Gateway Implementations
TripJpaAdapter --|> TripPort : implements
MemberJpaAdapter --|> MemberPort : implements
DestinationJpaAdapter --|> DestinationPort : implements
ScheduleJpaAdapter --|> SchedulePort : implements
AIServiceAdapter --|> AIServicePort : implements
LocationServiceAdapter --|> LocationServicePort : implements
ExportServiceAdapter --|> ExportServicePort : implements
RedisCacheAdapter --|> CachePort : implements
EventPublisherAdapter --|> EventPort : implements

' Domain Relationships
Trip ||--o{ Member : contains
Trip ||--o{ Destination : contains
Trip ||--o{ Schedule : contains
Schedule ||--o{ Place : contains
Place ||--o{ Transportation : has
Place ||--o{ HealthConsideration : has
Schedule ||--o{ Weather : has

' Inheritance
Trip --|> BaseTimeEntity : extends
Member --|> BaseTimeEntity : extends
Destination --|> BaseTimeEntity : extends
Schedule --|> BaseTimeEntity : extends
ScheduleGenerationRequest --|> BaseTimeEntity : extends

@enduml