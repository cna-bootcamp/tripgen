@startuml
!theme mono

title Trip 서비스 클래스 설계 (Clean Architecture)

package "com.unicorn.tripgen.biz.usecase.in" {
    interface TripUseCase {
        +getTripList(request: GetTripListQuery): GetTripListResult
        +getTripDetail(tripId: String): GetTripDetailResult
        +createTrip(request: CreateTripCommand): CreateTripResult
        +updateTrip(tripId: String, request: UpdateTripCommand): UpdateTripResult
        +deleteTrip(tripId: String): void
        +updateTripBasicInfo(tripId: String, request: UpdateTripBasicInfoCommand): UpdateTripBasicInfoResult
    }

    interface MemberUseCase {
        +getTripMembers(tripId: String): List<GetMemberResult>
        +addTripMember(tripId: String, request: CreateMemberCommand): CreateMemberResult
        +updateTripMember(tripId: String, memberId: String, request: UpdateMemberCommand): UpdateMemberResult
        +deleteTripMember(tripId: String, memberId: String): void
    }

    interface DestinationUseCase {
        +getTripDestinations(tripId: String): List<GetDestinationResult>
        +addTripDestination(tripId: String, request: CreateDestinationCommand): CreateDestinationResult
        +updateTripDestination(tripId: String, destinationId: String, request: UpdateDestinationCommand): UpdateDestinationResult
        +deleteTripDestination(tripId: String, destinationId: String): void
        +updateDestinationsBatch(tripId: String, request: UpdateDestinationsBatchCommand): UpdateDestinationsBatchResult
    }

    interface ScheduleUseCase {
        +generateSchedule(tripId: String, request: GenerateScheduleCommand): GenerateScheduleResult
        +getGenerationStatus(tripId: String, requestId: String): GetGenerationStatusResult
        +getSchedules(tripId: String, day: Integer): GetSchedulesResult
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleCommand): UpdateScheduleResult
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleCommand): GenerateScheduleResult
        +exportSchedule(tripId: String, request: ExportScheduleCommand): ExportScheduleResult
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, day: Integer): GetPlaceRecommendationsResult
    }
}

package "com.unicorn.tripgen.biz.usecase.out" {
    interface TripRepository {
        +findById(tripId: String): Optional<Trip>
        +findByUserId(userId: String, filter: TripFilter): Page<Trip>
        +save(trip: Trip): Trip
        +delete(tripId: String): void
        +existsById(tripId: String): boolean
    }

    interface MemberRepository {
        +findByTripId(tripId: String): List<Member>
        +findByTripIdAndMemberId(tripId: String, memberId: String): Optional<Member>
        +save(member: Member): Member
        +saveAll(members: List<Member>): List<Member>
        +delete(tripId: String, memberId: String): void
        +deleteByTripId(tripId: String): void
    }

    interface DestinationRepository {
        +findByTripId(tripId: String): List<Destination>
        +findByTripIdAndDestinationId(tripId: String, destinationId: String): Optional<Destination>
        +save(destination: Destination): Destination
        +saveAll(destinations: List<Destination>): List<Destination>
        +delete(tripId: String, destinationId: String): void
        +deleteByTripId(tripId: String): void
    }

    interface ScheduleRepository {
        +findByTripId(tripId: String): List<Schedule>
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<Schedule>
        +save(schedule: Schedule): Schedule
        +saveAll(schedules: List<Schedule>): List<Schedule>
        +delete(tripId: String): void
        +existsByTripId(tripId: String): boolean
    }

    interface AIService {
        +generateSchedule(request: AIScheduleGenerationRequest): AIScheduleGenerationResponse
        +getGenerationStatus(requestId: String): AIGenerationStatusResponse
        +regenerateSchedule(request: AIScheduleRegenerationRequest): AIScheduleGenerationResponse
        +getPlaceRecommendations(request: AIPlaceRecommendationRequest): AIPlaceRecommendationResponse
    }

    interface ExportService {
        +exportToPdf(request: ExportRequest): byte[]
        +exportToImage(request: ExportRequest): byte[]
    }

    interface UserContextService {
        +getCurrentUserId(): String
        +validateTripAccess(tripId: String, userId: String): boolean
    }

    interface CacheService {
        +get(key: String): Optional<Object>
        +put(key: String, value: Object, ttl: Duration): void
        +evict(key: String): void
        +evictByPattern(pattern: String): void
    }

    interface EventPublisher {
        +publishTripCreated(event: TripCreatedEvent): void
        +publishTripUpdated(event: TripUpdatedEvent): void
        +publishTripDeleted(event: TripDeletedEvent): void
        +publishScheduleGenerated(event: ScheduleGeneratedEvent): void
    }
}

package "com.unicorn.tripgen.biz.service" {
    class TripService {
        -tripRepository: TripRepository
        -memberRepository: MemberRepository
        -destinationRepository: DestinationRepository
        -scheduleRepository: ScheduleRepository
        -userContextService: UserContextService
        -cacheService: CacheService
        -eventPublisher: EventPublisher
        +getTripList(request: GetTripListQuery): GetTripListResult
        +getTripDetail(tripId: String): GetTripDetailResult 
        +createTrip(request: CreateTripCommand): CreateTripResult
        +updateTrip(tripId: String, request: UpdateTripCommand): UpdateTripResult
        +deleteTrip(tripId: String): void
        +updateTripBasicInfo(tripId: String, request: UpdateTripBasicInfoCommand): UpdateTripBasicInfoResult
        -validateTripAccess(tripId: String): void
        -calculateTripProgress(trip: Trip): Integer
        -buildTripSummary(trip: Trip): TripSummary
    }

    class MemberService {
        -memberRepository: MemberRepository
        -tripRepository: TripRepository
        -userContextService: UserContextService
        -eventPublisher: EventPublisher
        +getTripMembers(tripId: String): List<GetMemberResult>
        +addTripMember(tripId: String, request: CreateMemberCommand): CreateMemberResult
        +updateTripMember(tripId: String, memberId: String, request: UpdateMemberCommand): UpdateMemberResult
        +deleteTripMember(tripId: String, memberId: String): void
        -validateTripExists(tripId: String): void
        -validateMemberLimit(tripId: String): void
        -generateMemberId(): String
    }

    class DestinationService {
        -destinationRepository: DestinationRepository
        -tripRepository: TripRepository
        -scheduleRepository: ScheduleRepository
        -userContextService: UserContextService
        -eventPublisher: EventPublisher
        +getTripDestinations(tripId: String): List<GetDestinationResult>
        +addTripDestination(tripId: String, request: CreateDestinationCommand): CreateDestinationResult
        +updateTripDestination(tripId: String, destinationId: String, request: UpdateDestinationCommand): UpdateDestinationResult
        +deleteTripDestination(tripId: String, destinationId: String): void
        +updateDestinationsBatch(tripId: String, request: UpdateDestinationsBatchCommand): UpdateDestinationsBatchResult
        -validateTripExists(tripId: String): void
        -calculateTripDates(destinations: List<Destination>): TripDateRange
        -updateTripDates(tripId: String, dateRange: TripDateRange): void
        -generateDestinationId(): String
        -invalidateScheduleCache(tripId: String): void
    }

    class ScheduleService {
        -scheduleRepository: ScheduleRepository
        -tripRepository: TripRepository
        -destinationRepository: DestinationRepository
        -memberRepository: MemberRepository  
        -aiService: AIService
        -exportService: ExportService
        -userContextService: UserContextService
        -cacheService: CacheService
        -eventPublisher: EventPublisher
        +generateSchedule(tripId: String, request: GenerateScheduleCommand): GenerateScheduleResult
        +getGenerationStatus(tripId: String, requestId: String): GetGenerationStatusResult
        +getSchedules(tripId: String, day: Integer): GetSchedulesResult
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleCommand): UpdateScheduleResult
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleCommand): GenerateScheduleResult
        +exportSchedule(tripId: String, request: ExportScheduleCommand): ExportScheduleResult
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, day: Integer): GetPlaceRecommendationsResult
        -validateTripReadyForSchedule(tripId: String): void
        -buildAIGenerationContext(trip: Trip, members: List<Member>, destinations: List<Destination>): AIGenerationContext
        -validateScheduleExists(tripId: String): void
        -getCachedPlaceRecommendations(tripId: String, placeId: String): Optional<PlaceRecommendations>
        -cacheSchedules(tripId: String, schedules: List<Schedule>): void
    }
}

package "com.unicorn.tripgen.biz.domain" {
    class Trip {
        +tripId: String
        +userId: String
        +tripName: String
        +transportMode: TransportMode
        +status: TripStatus
        +currentStep: String
        +startDate: LocalDate
        +endDate: LocalDate
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        +Trip(tripId: String, userId: String, tripName: String, transportMode: TransportMode)
        +updateBasicInfo(tripName: String, transportMode: TransportMode): void
        +updateDates(startDate: LocalDate, endDate: LocalDate): void
        +updateStatus(status: TripStatus): void
        +updateCurrentStep(step: String): void
        +getTotalDays(): Integer
        +isOwner(userId: String): boolean
        +isEditable(): boolean
    }

    class Member {
        +memberId: String
        +tripId: String
        +name: String
        +age: Integer
        +gender: Gender
        +healthStatus: HealthStatus
        +preferences: List<ActivityPreference>
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        +Member(memberId: String, tripId: String, name: String, age: Integer, gender: Gender, healthStatus: HealthStatus)
        +updateProfile(name: String, age: Integer, gender: Gender, healthStatus: HealthStatus): void
        +updatePreferences(preferences: List<ActivityPreference>): void
        +hasPreference(preference: ActivityPreference): boolean
        +isHealthSuitable(activityLevel: ActivityLevel): boolean
    }

    class Destination {
        +destinationId: String
        +tripId: String
        +destinationName: String
        +nights: Integer
        +accommodation: String
        +checkInTime: LocalTime
        +checkOutTime: LocalTime
        +startDate: LocalDate
        +endDate: LocalDate
        +order: Integer
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        +Destination(destinationId: String, tripId: String, destinationName: String, nights: Integer)
        +updateBasicInfo(destinationName: String, nights: Integer): void
        +updateAccommodation(accommodation: String, checkInTime: LocalTime, checkOutTime: LocalTime): void
        +updateDates(startDate: LocalDate, endDate: LocalDate): void
        +updateOrder(order: Integer): void
        +getTotalDays(): Integer
    }

    class Schedule {
        +scheduleId: String
        +tripId: String
        +day: Integer
        +date: LocalDate
        +city: String
        +weather: Weather
        +places: List<Place>
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        +Schedule(scheduleId: String, tripId: String, day: Integer, date: LocalDate, city: String)
        +updateWeather(weather: Weather): void
        +updatePlaces(places: List<Place>): void
        +addPlace(place: Place): void
        +removePlace(placeId: String): void
        +reorderPlaces(placeOrders: Map<String, Integer>): void
        +getTotalDuration(): Integer
        +getEstimatedEndTime(): LocalTime
    }

    class Place {
        +placeId: String
        +placeName: String
        +category: String
        +startTime: LocalTime
        +duration: Integer
        +transportation: Transportation
        +healthConsideration: HealthConsideration
        +order: Integer
        +Place(placeId: String, placeName: String, category: String, startTime: LocalTime, duration: Integer)
        +updateTiming(startTime: LocalTime, duration: Integer): void
        +updateTransportation(transportation: Transportation): void
        +updateOrder(order: Integer): void
        +getEndTime(): LocalTime
    }

    class Weather {
        +condition: String
        +temperature: Temperature
        +icon: String
        +Weather(condition: String, temperature: Temperature, icon: String)
    }

    class Temperature {
        +min: Double
        +max: Double
        +Temperature(min: Double, max: Double)
        +getAverage(): Double
    }

    class Transportation {
        +type: TransportationType
        +duration: Integer
        +distance: Double
        +route: String
        +Transportation(type: TransportationType, duration: Integer, distance: Double)
        +updateRoute(route: String): void
    }

    class HealthConsideration {
        +restPoints: List<String>
        +accessibility: List<AccessibilityFeature>
        +walkingDistance: Double
        +HealthConsideration(walkingDistance: Double)
        +addRestPoint(restPoint: String): void
        +addAccessibilityFeature(feature: AccessibilityFeature): void
    }

    enum TripStatus {
        PLANNING
        IN_PROGRESS
        COMPLETED
    }

    enum TransportMode {
        PUBLIC
        CAR
    }

    enum Gender {
        MALE
        FEMALE
    }

    enum HealthStatus {
        EXCELLENT
        GOOD
        CAUTION
        LIMITED
    }

    enum ActivityPreference {
        SIGHTSEEING
        SHOPPING
        CULTURE
        NATURE
        SPORTS
        REST
    }

    enum TransportationType {
        WALK
        CAR
        PUBLIC
    }

    enum AccessibilityFeature {
        ELEVATOR
        RAMP
        WHEELCHAIR
    }
}

package "com.unicorn.tripgen.biz.dto" {
    ' Command DTOs
    class CreateTripCommand {
        +tripName: String
        +transportMode: TransportMode
        +CreateTripCommand(tripName: String, transportMode: TransportMode)
        +validate(): void
    }

    class UpdateTripCommand {
        +tripName: String
        +transportMode: TransportMode
    }

    class UpdateTripBasicInfoCommand {
        +tripName: String
        +transportMode: TransportMode
        +members: List<CreateMemberCommand>
    }

    class CreateMemberCommand {
        +name: String
        +age: Integer
        +gender: Gender
        +healthStatus: HealthStatus
        +preferences: List<ActivityPreference>
    }

    class UpdateMemberCommand {
        +name: String
        +age: Integer
        +gender: Gender
        +healthStatus: HealthStatus
        +preferences: List<ActivityPreference>
    }

    class CreateDestinationCommand {
        +destinationName: String
        +nights: Integer
        +accommodation: String
        +checkInTime: LocalTime
        +checkOutTime: LocalTime
    }

    class UpdateDestinationCommand {
        +destinationName: String
        +nights: Integer
        +accommodation: String
        +checkInTime: LocalTime
        +checkOutTime: LocalTime
    }

    class UpdateDestinationsBatchCommand {
        +destinations: List<CreateDestinationCommand>
    }

    class GenerateScheduleCommand {
        +startTime: LocalTime
        +specialRequests: String
    }

    class UpdateScheduleCommand {
        +places: List<PlaceOrderCommand>
    }

    class PlaceOrderCommand {
        +placeId: String
        +order: Integer
    }

    class RegenerateScheduleCommand {
        +specialRequests: String
    }

    class ExportScheduleCommand {
        +format: ExportFormat
        +includeMap: Boolean
        +days: List<Integer>
    }

    ' Query DTOs
    class GetTripListQuery {
        +status: TripStatus
        +search: String
        +sort: String
        +page: Integer
        +size: Integer
    }

    ' Result DTOs
    class GetTripListResult {
        +trips: List<TripSummary>
        +totalCount: Integer
        +currentPage: Integer
        +totalPages: Integer
    }

    class TripSummary {
        +tripId: String
        +tripName: String
        +status: TripStatus
        +currentStep: String
        +startDate: LocalDate
        +endDate: LocalDate
        +memberCount: Integer
        +destinationCount: Integer
        +progress: Integer
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }

    class GetTripDetailResult {
        +tripId: String
        +tripName: String
        +transportMode: TransportMode
        +status: TripStatus
        +currentStep: String
        +startDate: LocalDate
        +endDate: LocalDate
        +members: List<MemberDetail>
        +destinations: List<DestinationDetail>
        +hasSchedule: Boolean
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }

    class CreateTripResult {
        +tripId: String
        +tripName: String
        +transportMode: TransportMode
        +status: TripStatus
        +currentStep: String
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }

    class MemberDetail {
        +memberId: String
        +name: String
        +age: Integer
        +gender: Gender
        +healthStatus: HealthStatus
        +preferences: List<ActivityPreference>
    }

    class DestinationDetail {
        +destinationId: String
        +destinationName: String
        +nights: Integer
        +startDate: LocalDate
        +endDate: LocalDate
        +accommodation: String
        +checkInTime: LocalTime
        +checkOutTime: LocalTime
        +order: Integer
    }

    enum ExportFormat {
        PDF
        IMAGE
    }
}

package "com.unicorn.tripgen.infra.controller" {
    class TripController {
        -tripUseCase: TripUseCase
        +getTripList(status: String, search: String, sort: String, page: Integer, size: Integer): ResponseEntity<ApiResponse<GetTripListResult>>
        +getTripDetail(tripId: String): ResponseEntity<ApiResponse<GetTripDetailResult>>
        +createTrip(request: CreateTripRequest): ResponseEntity<ApiResponse<CreateTripResult>>
        +updateTrip(tripId: String, request: UpdateTripRequest): ResponseEntity<ApiResponse<UpdateTripResult>>
        +deleteTrip(tripId: String): ResponseEntity<ApiResponse<Void>>
        +updateTripBasicInfo(tripId: String, request: UpdateTripBasicInfoRequest): ResponseEntity<ApiResponse<UpdateTripBasicInfoResult>>
    }

    class MemberController {
        -memberUseCase: MemberUseCase
        +getTripMembers(tripId: String): ResponseEntity<ApiResponse<List<GetMemberResult>>>
        +addTripMember(tripId: String, request: CreateMemberRequest): ResponseEntity<ApiResponse<CreateMemberResult>>
        +updateTripMember(tripId: String, memberId: String, request: UpdateMemberRequest): ResponseEntity<ApiResponse<UpdateMemberResult>>
        +deleteTripMember(tripId: String, memberId: String): ResponseEntity<ApiResponse<Void>>
    }

    class DestinationController {
        -destinationUseCase: DestinationUseCase
        +getTripDestinations(tripId: String): ResponseEntity<ApiResponse<List<GetDestinationResult>>>
        +addTripDestination(tripId: String, request: CreateDestinationRequest): ResponseEntity<ApiResponse<CreateDestinationResult>>
        +updateTripDestination(tripId: String, destinationId: String, request: UpdateDestinationRequest): ResponseEntity<ApiResponse<UpdateDestinationResult>>
        +deleteTripDestination(tripId: String, destinationId: String): ResponseEntity<ApiResponse<Void>>
        +updateDestinationsBatch(tripId: String, request: UpdateDestinationsBatchRequest): ResponseEntity<ApiResponse<UpdateDestinationsBatchResult>>
    }

    class ScheduleController {
        -scheduleUseCase: ScheduleUseCase
        +generateSchedule(tripId: String, request: GenerateScheduleRequest): ResponseEntity<ApiResponse<GenerateScheduleResult>>
        +getGenerationStatus(tripId: String, requestId: String): ResponseEntity<ApiResponse<GetGenerationStatusResult>>
        +getSchedules(tripId: String, day: Integer): ResponseEntity<ApiResponse<GetSchedulesResult>>
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleRequest): ResponseEntity<ApiResponse<UpdateScheduleResult>>
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleRequest): ResponseEntity<ApiResponse<GenerateScheduleResult>>
        +exportSchedule(tripId: String, request: ExportScheduleRequest): ResponseEntity<byte[]>
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, day: Integer): ResponseEntity<ApiResponse<GetPlaceRecommendationsResult>>
    }
}

package "com.unicorn.tripgen.infra.dto" {
    class CreateTripRequest {
        +tripName: String
        +transportMode: String
        +toCommand(): CreateTripCommand
    }

    class UpdateTripRequest {
        +tripName: String
        +transportMode: String
        +toCommand(): UpdateTripCommand
    }

    class UpdateTripBasicInfoRequest {
        +tripName: String
        +transportMode: String
        +members: List<CreateMemberRequest>
        +toCommand(): UpdateTripBasicInfoCommand
    }

    class CreateMemberRequest {
        +name: String
        +age: Integer
        +gender: String
        +healthStatus: String
        +preferences: List<String>
        +toCommand(): CreateMemberCommand
    }

    class UpdateMemberRequest {
        +name: String
        +age: Integer
        +gender: String  
        +healthStatus: String
        +preferences: List<String>
        +toCommand(): UpdateMemberCommand
    }

    class CreateDestinationRequest {
        +destinationName: String
        +nights: Integer
        +accommodation: String
        +checkInTime: String
        +checkOutTime: String
        +toCommand(): CreateDestinationCommand
    }

    class UpdateDestinationRequest {
        +destinationName: String
        +nights: Integer
        +accommodation: String
        +checkInTime: String
        +checkOutTime: String
        +toCommand(): UpdateDestinationCommand
    }

    class UpdateDestinationsBatchRequest {
        +destinations: List<CreateDestinationRequest>
        +toCommand(): UpdateDestinationsBatchCommand
    }

    class GenerateScheduleRequest {
        +startTime: String
        +specialRequests: String
        +toCommand(): GenerateScheduleCommand
    }

    class UpdateScheduleRequest {
        +places: List<PlaceOrderRequest>
        +toCommand(): UpdateScheduleCommand
    }

    class PlaceOrderRequest {
        +placeId: String
        +order: Integer
    }

    class RegenerateScheduleRequest {
        +specialRequests: String
        +toCommand(): RegenerateScheduleCommand
    }

    class ExportScheduleRequest {
        +format: String
        +includeMap: Boolean
        +days: List<Integer>
        +toCommand(): ExportScheduleCommand
    }
}

package "com.unicorn.tripgen.infra.gateway.repository" {
    class JpaTripRepository {
        -tripJpaRepository: TripJpaRepository
        -memberJpaRepository: MemberJpaRepository
        -destinationJpaRepository: DestinationJpaRepository
        +findById(tripId: String): Optional<Trip>
        +findByUserId(userId: String, filter: TripFilter): Page<Trip>
        +save(trip: Trip): Trip
        +delete(tripId: String): void
        +existsById(tripId: String): boolean
        -toEntity(trip: Trip): TripEntity
        -toDomain(entity: TripEntity): Trip
    }

    class JpaMemberRepository {
        -memberJpaRepository: MemberJpaRepository
        +findByTripId(tripId: String): List<Member>
        +findByTripIdAndMemberId(tripId: String, memberId: String): Optional<Member>
        +save(member: Member): Member
        +saveAll(members: List<Member>): List<Member>
        +delete(tripId: String, memberId: String): void
        +deleteByTripId(tripId: String): void
        -toEntity(member: Member): MemberEntity
        -toDomain(entity: MemberEntity): Member
    }

    class JpaDestinationRepository {
        -destinationJpaRepository: DestinationJpaRepository
        +findByTripId(tripId: String): List<Destination>
        +findByTripIdAndDestinationId(tripId: String, destinationId: String): Optional<Destination>
        +save(destination: Destination): Destination
        +saveAll(destinations: List<Destination>): List<Destination>
        +delete(tripId: String, destinationId: String): void
        +deleteByTripId(tripId: String): void
        -toEntity(destination: Destination): DestinationEntity
        -toDomain(entity: DestinationEntity): Destination
    }

    class JpaScheduleRepository {
        -scheduleJpaRepository: ScheduleJpaRepository
        +findByTripId(tripId: String): List<Schedule>
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<Schedule>
        +save(schedule: Schedule): Schedule
        +saveAll(schedules: List<Schedule>): List<Schedule>
        +delete(tripId: String): void
        +existsByTripId(tripId: String): boolean
        -toEntity(schedule: Schedule): ScheduleEntity
        -toDomain(entity: ScheduleEntity): Schedule
    }
}

package "com.unicorn.tripgen.infra.gateway.entity" {
    class TripEntity {
        +id: Long
        +tripId: String
        +userId: String
        +tripName: String
        +transportMode: String
        +status: String
        +currentStep: String
        +startDate: LocalDate
        +endDate: LocalDate
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }

    class MemberEntity {
        +id: Long
        +memberId: String
        +tripId: String
        +name: String
        +age: Integer
        +gender: String
        +healthStatus: String
        +preferences: String
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }

    class DestinationEntity {
        +id: Long
        +destinationId: String
        +tripId: String
        +destinationName: String
        +nights: Integer
        +accommodation: String
        +checkInTime: LocalTime
        +checkOutTime: LocalTime
        +startDate: LocalDate
        +endDate: LocalDate
        +order: Integer
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }

    class ScheduleEntity {
        +id: Long
        +scheduleId: String
        +tripId: String
        +day: Integer
        +date: LocalDate
        +city: String
        +weatherData: String
        +placesData: String
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
    }
}

package "com.unicorn.tripgen.infra.gateway" {
    class RestAIService {
        -restTemplate: RestTemplate
        -aiServiceUrl: String
        -cacheService: CacheService
        +generateSchedule(request: AIScheduleGenerationRequest): AIScheduleGenerationResponse
        +getGenerationStatus(requestId: String): AIGenerationStatusResponse
        +regenerateSchedule(request: AIScheduleRegenerationRequest): AIScheduleGenerationResponse
        +getPlaceRecommendations(request: AIPlaceRecommendationRequest): AIPlaceRecommendationResponse
        -buildHttpHeaders(): HttpHeaders
        -handleApiException(ex: Exception): void
    }

    class PdfExportService {
        -pdfGenerator: PdfGenerator
        +exportToPdf(request: ExportRequest): byte[]
        -generateTripPdf(schedules: List<Schedule>, includeMap: Boolean): byte[]
    }

    class ImageExportService {
        -imageGenerator: ImageGenerator
        +exportToImage(request: ExportRequest): byte[]
        -generateTripImage(schedules: List<Schedule>, includeMap: Boolean): byte[]
    }

    class SecurityContextUserService {
        -jwtTokenProvider: JwtTokenProvider
        +getCurrentUserId(): String
        +validateTripAccess(tripId: String, userId: String): boolean
        -extractUserFromToken(): User
    }

    class RedisCacheService {
        -redisTemplate: RedisTemplate
        +get(key: String): Optional<Object>
        +put(key: String, value: Object, ttl: Duration): void
        +evict(key: String): void
        +evictByPattern(pattern: String): void
        -buildCacheKey(prefix: String, key: String): String
    }

    class ApplicationEventPublisher {
        -eventPublisher: org.springframework.context.ApplicationEventPublisher
        +publishTripCreated(event: TripCreatedEvent): void
        +publishTripUpdated(event: TripUpdatedEvent): void
        +publishTripDeleted(event: TripDeletedEvent): void
        +publishScheduleGenerated(event: ScheduleGeneratedEvent): void
    }
}

package "com.unicorn.tripgen.infra.config" {
    class TripServiceConfig {
        +tripUseCase(): TripUseCase
        +memberUseCase(): MemberUseCase
        +destinationUseCase(): DestinationUseCase
        +scheduleUseCase(): ScheduleUseCase
        +restTemplate(): RestTemplate
        +pdfGenerator(): PdfGenerator
        +imageGenerator(): ImageGenerator
    }
}

' Use Case Implementations
TripUseCase <|.. TripService
MemberUseCase <|.. MemberService
DestinationUseCase <|.. DestinationService
ScheduleUseCase <|.. ScheduleService

' Repository Implementations
TripRepository <|.. JpaTripRepository
MemberRepository <|.. JpaMemberRepository
DestinationRepository <|.. JpaDestinationRepository
ScheduleRepository <|.. JpaScheduleRepository

' Service Implementations
AIService <|.. RestAIService
ExportService <|.. PdfExportService
ExportService <|.. ImageExportService
UserContextService <|.. SecurityContextUserService
CacheService <|.. RedisCacheService
EventPublisher <|.. ApplicationEventPublisher

' Domain Relationships
Trip ||--o{ Member : "contains"
Trip ||--o{ Destination : "contains"
Trip ||--o{ Schedule : "has"
Schedule ||--o{ Place : "contains"
Place ||--|| Transportation : "has"
Place ||--|| HealthConsideration : "has"
Schedule ||--|| Weather : "has"
Weather ||--|| Temperature : "has"

' Service Dependencies
TripService --> TripRepository
TripService --> MemberRepository
TripService --> DestinationRepository
TripService --> ScheduleRepository
TripService --> UserContextService
TripService --> CacheService
TripService --> EventPublisher

MemberService --> MemberRepository
MemberService --> TripRepository
MemberService --> UserContextService
MemberService --> EventPublisher

DestinationService --> DestinationRepository
DestinationService --> TripRepository
DestinationService --> ScheduleRepository
DestinationService --> UserContextService
DestinationService --> EventPublisher

ScheduleService --> ScheduleRepository
ScheduleService --> TripRepository
ScheduleService --> DestinationRepository
ScheduleService --> MemberRepository
ScheduleService --> AIService
ScheduleService --> ExportService
ScheduleService --> UserContextService
ScheduleService --> CacheService
ScheduleService --> EventPublisher

' Controller Dependencies
TripController --> TripUseCase
MemberController --> MemberUseCase
DestinationController --> DestinationUseCase
ScheduleController --> ScheduleUseCase

' Entity Relationships
TripEntity ||--o{ MemberEntity : "trip_id"
TripEntity ||--o{ DestinationEntity : "trip_id"
TripEntity ||--o{ ScheduleEntity : "trip_id"

@enduml