@startuml
!theme mono

title Trip 서비스 클래스 설계서 (Clean Architecture)

' ======================================
' 1. Entity Layer (Domain Layer)
' ======================================
package "Entity Layer (Domain)" {
    class Trip {
        -String tripId
        -String userId
        -String tripName
        -TransportMode transportMode
        -TripStatus status
        -String currentStep
        -LocalDate startDate
        -LocalDate endDate
        -Integer progress
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        
        +Trip()
        +Trip(userId: String, tripName: String, transportMode: TransportMode)
        
        ' Getters and Setters
        +getTripId(): String
        +setTripId(tripId: String): void
        +getUserId(): String
        +setUserId(userId: String): void
        +getTripName(): String
        +setTripName(tripName: String): void
        +getTransportMode(): TransportMode
        +setTransportMode(transportMode: TransportMode): void
        +getStatus(): TripStatus
        +setStatus(status: TripStatus): void
        +getCurrentStep(): String
        +setCurrentStep(currentStep: String): void
        +getStartDate(): LocalDate
        +setStartDate(startDate: LocalDate): void
        +getEndDate(): LocalDate
        +setEndDate(endDate: LocalDate): void
        +getProgress(): Integer
        +setProgress(progress: Integer): void
        +getCreatedAt(): LocalDateTime
        +setCreatedAt(createdAt: LocalDateTime): void
        +getUpdatedAt(): LocalDateTime
        +setUpdatedAt(updatedAt: LocalDateTime): void
        
        ' Business Methods
        +calculateTotalDays(): int
        +updateProgress(progress: Integer): void
        +canStartTrip(): boolean
        +completeTrip(): void
        +validateTripData(): boolean
    }

    class Member {
        -String memberId
        -String tripId
        -String name
        -Integer age
        -Gender gender
        -HealthStatus healthStatus
        -List<Preference> preferences
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        
        +Member()
        +Member(tripId: String, name: String, age: Integer, gender: Gender, healthStatus: HealthStatus)
        
        ' Getters and Setters
        +getMemberId(): String
        +setMemberId(memberId: String): void
        +getTripId(): String
        +setTripId(tripId: String): void
        +getName(): String
        +setName(name: String): void
        +getAge(): Integer
        +setAge(age: Integer): void
        +getGender(): Gender
        +setGender(gender: Gender): void
        +getHealthStatus(): HealthStatus
        +setHealthStatus(healthStatus: HealthStatus): void
        +getPreferences(): List<Preference>
        +setPreferences(preferences: List<Preference>): void
        +getCreatedAt(): LocalDateTime
        +setCreatedAt(createdAt: LocalDateTime): void
        +getUpdatedAt(): LocalDateTime
        +setUpdatedAt(updatedAt: LocalDateTime): void
        
        ' Business Methods
        +addPreference(preference: Preference): void
        +removePreference(preference: Preference): void
        +hasPreference(preference: Preference): boolean
        +validateMemberData(): boolean
        +isEligibleForActivity(activityType: String): boolean
    }

    class Destination {
        -String destinationId
        -String tripId
        -String destinationName
        -Integer nights
        -LocalDate startDate
        -LocalDate endDate
        -String accommodation
        -String checkInTime
        -String checkOutTime
        -Integer order
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        
        +Destination()
        +Destination(tripId: String, destinationName: String, nights: Integer)
        
        ' Getters and Setters
        +getDestinationId(): String
        +setDestinationId(destinationId: String): void
        +getTripId(): String
        +setTripId(tripId: String): void
        +getDestinationName(): String
        +setDestinationName(destinationName: String): void
        +getNights(): Integer
        +setNights(nights: Integer): void
        +getStartDate(): LocalDate
        +setStartDate(startDate: LocalDate): void
        +getEndDate(): LocalDate
        +setEndDate(endDate: LocalDate): void
        +getAccommodation(): String
        +setAccommodation(accommodation: String): void
        +getCheckInTime(): String
        +setCheckInTime(checkInTime: String): void
        +getCheckOutTime(): String
        +setCheckOutTime(checkOutTime: String): void
        +getOrder(): Integer
        +setOrder(order: Integer): void
        +getCreatedAt(): LocalDateTime
        +setCreatedAt(createdAt: LocalDateTime): void
        +getUpdatedAt(): LocalDateTime
        +setUpdatedAt(updatedAt: LocalDateTime): void
        
        ' Business Methods
        +calculateEndDate(startDate: LocalDate): LocalDate
        +hasAccommodation(): boolean
        +validateDestinationData(): boolean
        +isValidTimeFormat(time: String): boolean
    }

    class Schedule {
        -String scheduleId
        -String tripId
        -Integer day
        -LocalDate date
        -String city
        -WeatherInfo weather
        -List<SchedulePlace> places
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        
        +Schedule()
        +Schedule(tripId: String, day: Integer, date: LocalDate, city: String)
        
        ' Getters and Setters
        +getScheduleId(): String
        +setScheduleId(scheduleId: String): void
        +getTripId(): String
        +setTripId(tripId: String): void
        +getDay(): Integer
        +setDay(day: Integer): void
        +getDate(): LocalDate
        +setDate(date: LocalDate): void
        +getCity(): String
        +setCity(city: String): void
        +getWeather(): WeatherInfo
        +setWeather(weather: WeatherInfo): void
        +getPlaces(): List<SchedulePlace>
        +setPlaces(places: List<SchedulePlace>): void
        +getCreatedAt(): LocalDateTime
        +setCreatedAt(createdAt: LocalDateTime): void
        +getUpdatedAt(): LocalDateTime
        +setUpdatedAt(updatedAt: LocalDateTime): void
        
        ' Business Methods
        +addPlace(place: SchedulePlace): void
        +removePlace(placeId: String): void
        +updatePlaceOrder(placeId: String, newOrder: Integer): void
        +getTotalDuration(): Integer
        +validateScheduleData(): boolean
    }

    class SchedulePlace {
        -String placeId
        -String placeName
        -String category
        -String startTime
        -Integer duration
        -Transportation transportation
        -HealthConsideration healthConsideration
        -Integer order
        
        +SchedulePlace()
        +SchedulePlace(placeId: String, placeName: String, category: String)
        
        ' Getters and Setters
        +getPlaceId(): String
        +setPlaceId(placeId: String): void
        +getPlaceName(): String
        +setPlaceName(placeName: String): void
        +getCategory(): String
        +setCategory(category: String): void
        +getStartTime(): String
        +setStartTime(startTime: String): void
        +getDuration(): Integer
        +setDuration(duration: Integer): void
        +getTransportation(): Transportation
        +setTransportation(transportation: Transportation): void
        +getHealthConsideration(): HealthConsideration
        +setHealthConsideration(healthConsideration: HealthConsideration): void
        +getOrder(): Integer
        +setOrder(order: Integer): void
        
        ' Business Methods
        +calculateEndTime(): String
        +isAccessible(healthStatus: HealthStatus): boolean
        +validatePlaceData(): boolean
    }

    ' Value Objects
    class WeatherInfo {
        -String condition
        -Double minTemperature
        -Double maxTemperature
        -String icon
        
        +WeatherInfo()
        +WeatherInfo(condition: String, minTemperature: Double, maxTemperature: Double, icon: String)
        +getCondition(): String
        +getMinTemperature(): Double
        +getMaxTemperature(): Double
        +getIcon(): String
    }

    class Transportation {
        -TransportationType type
        -Integer duration
        -Double distance
        -String route
        
        +Transportation()
        +Transportation(type: TransportationType, duration: Integer, distance: Double)
        +getType(): TransportationType
        +getDuration(): Integer
        +getDistance(): Double
        +getRoute(): String
        +setRoute(route: String): void
    }

    class HealthConsideration {
        -List<String> restPoints
        -List<AccessibilityType> accessibility
        -Double walkingDistance
        
        +HealthConsideration()
        +getRestPoints(): List<String>
        +setRestPoints(restPoints: List<String>): void
        +getAccessibility(): List<AccessibilityType>
        +setAccessibility(accessibility: List<AccessibilityType>): void
        +getWalkingDistance(): Double
        +setWalkingDistance(walkingDistance: Double): void
        +addRestPoint(restPoint: String): void
        +hasAccessibility(type: AccessibilityType): boolean
    }

    ' Enums
    enum TransportMode {
        PUBLIC
        CAR
        +toString(): String
        +fromString(value: String): TransportMode
    }

    enum TripStatus {
        PLANNING
        ONGOING
        COMPLETED
        +toString(): String
        +fromString(value: String): TripStatus
    }

    enum Gender {
        MALE
        FEMALE
        +toString(): String
        +fromString(value: String): Gender
    }

    enum HealthStatus {
        EXCELLENT
        GOOD
        CAUTION
        LIMITED
        +toString(): String
        +fromString(value: String): HealthStatus
        +getActivityLevel(): Integer
    }

    enum Preference {
        SIGHTSEEING
        SHOPPING
        CULTURE
        NATURE
        SPORTS
        REST
        +toString(): String
        +fromString(value: String): Preference
    }

    enum TransportationType {
        WALK
        CAR
        PUBLIC
        +toString(): String
        +fromString(value: String): TransportationType
    }

    enum AccessibilityType {
        ELEVATOR
        RAMP
        WHEELCHAIR
        +toString(): String
        +fromString(value: String): AccessibilityType
    }
}

' ======================================
' 2. Use Case Layer (Application Layer)
' ======================================
package "Use Case Layer (Application)" {
    interface TripUseCase {
        +createTrip(request: CreateTripRequest): TripResponse
        +getTripList(userId: String, filter: TripFilterRequest): TripListResponse
        +getTripDetail(tripId: String, userId: String): TripDetailResponse
        +updateTrip(tripId: String, userId: String, request: UpdateTripRequest): TripResponse
        +deleteTrip(tripId: String, userId: String): void
        +updateTripBasicInfo(tripId: String, userId: String, request: UpdateTripBasicInfoRequest): TripBasicInfoResponse
    }

    interface MemberUseCase {
        +getTripMembers(tripId: String, userId: String): List<MemberResponse>
        +addTripMember(tripId: String, userId: String, request: CreateMemberRequest): MemberResponse
        +updateTripMember(tripId: String, memberId: String, userId: String, request: UpdateMemberRequest): MemberResponse
        +deleteTripMember(tripId: String, memberId: String, userId: String): void
    }

    interface DestinationUseCase {
        +getTripDestinations(tripId: String, userId: String): List<DestinationResponse>
        +addTripDestination(tripId: String, userId: String, request: CreateDestinationRequest): DestinationResponse
        +updateTripDestination(tripId: String, destinationId: String, userId: String, request: UpdateDestinationRequest): DestinationResponse
        +deleteTripDestination(tripId: String, destinationId: String, userId: String): void
        +updateTripDestinationsBatch(tripId: String, userId: String, request: UpdateDestinationsBatchRequest): DestinationsBatchResponse
    }

    interface ScheduleUseCase {
        +generateSchedule(tripId: String, userId: String, request: GenerateScheduleRequest): GenerateScheduleResponse
        +getGenerationStatus(tripId: String, requestId: String, userId: String): GenerationStatusResponse
        +getSchedules(tripId: String, userId: String, day: Integer): ScheduleListResponse
        +updateDaySchedule(tripId: String, day: Integer, userId: String, request: UpdateScheduleRequest): ScheduleResponse
        +regenerateDaySchedule(tripId: String, day: Integer, userId: String, request: RegenerateScheduleRequest): GenerateScheduleResponse
        +exportSchedule(tripId: String, userId: String, request: ExportScheduleRequest): byte[]
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, userId: String, day: Integer): PlaceRecommendationResponse
    }

    class TripUseCaseImpl {
        -TripRepository tripRepository
        -MemberRepository memberRepository
        -DestinationRepository destinationRepository
        -UserServiceClient userServiceClient
        -TripValidator tripValidator
        
        +TripUseCaseImpl(tripRepository: TripRepository, memberRepository: MemberRepository, destinationRepository: DestinationRepository, userServiceClient: UserServiceClient, tripValidator: TripValidator)
        
        +createTrip(request: CreateTripRequest): TripResponse
        +getTripList(userId: String, filter: TripFilterRequest): TripListResponse
        +getTripDetail(tripId: String, userId: String): TripDetailResponse
        +updateTrip(tripId: String, userId: String, request: UpdateTripRequest): TripResponse
        +deleteTrip(tripId: String, userId: String): void
        +updateTripBasicInfo(tripId: String, userId: String, request: UpdateTripBasicInfoRequest): TripBasicInfoResponse
        
        -validateUserExists(userId: String): void
        -validateTripOwnership(tripId: String, userId: String): Trip
        -calculateTripDates(destinations: List<Destination>): Pair<LocalDate, LocalDate>
        -updateTripProgress(tripId: String): void
    }

    class MemberUseCaseImpl {
        -MemberRepository memberRepository
        -TripRepository tripRepository
        -MemberValidator memberValidator
        
        +MemberUseCaseImpl(memberRepository: MemberRepository, tripRepository: TripRepository, memberValidator: MemberValidator)
        
        +getTripMembers(tripId: String, userId: String): List<MemberResponse>
        +addTripMember(tripId: String, userId: String, request: CreateMemberRequest): MemberResponse
        +updateTripMember(tripId: String, memberId: String, userId: String, request: UpdateMemberRequest): MemberResponse
        +deleteTripMember(tripId: String, memberId: String, userId: String): void
        
        -validateTripExists(tripId: String, userId: String): Trip
        -validateMemberExists(memberId: String, tripId: String): Member
        -checkMemberLimit(tripId: String): void
    }

    class DestinationUseCaseImpl {
        -DestinationRepository destinationRepository
        -TripRepository tripRepository
        -LocationServiceClient locationServiceClient
        -DestinationValidator destinationValidator
        
        +DestinationUseCaseImpl(destinationRepository: DestinationRepository, tripRepository: TripRepository, locationServiceClient: LocationServiceClient, destinationValidator: DestinationValidator)
        
        +getTripDestinations(tripId: String, userId: String): List<DestinationResponse>
        +addTripDestination(tripId: String, userId: String, request: CreateDestinationRequest): DestinationResponse
        +updateTripDestination(tripId: String, destinationId: String, userId: String, request: UpdateDestinationRequest): DestinationResponse
        +deleteTripDestination(tripId: String, destinationId: String, userId: String): void
        +updateTripDestinationsBatch(tripId: String, userId: String, request: UpdateDestinationsBatchRequest): DestinationsBatchResponse
        
        -validateTripExists(tripId: String, userId: String): Trip
        -validateDestinationExists(destinationId: String, tripId: String): Destination
        -validateLocationExists(destinationName: String): void
        -calculateDestinationDates(destinations: List<Destination>): void
        -updateDestinationOrder(destinations: List<Destination>): void
    }

    class ScheduleUseCaseImpl {
        -ScheduleRepository scheduleRepository
        -TripRepository tripRepository
        -DestinationRepository destinationRepository
        -MemberRepository memberRepository
        -AiServiceClient aiServiceClient
        -LocationServiceClient locationServiceClient
        -ScheduleValidator scheduleValidator
        -ScheduleGenerationService scheduleGenerationService
        -ScheduleExportService scheduleExportService
        
        +ScheduleUseCaseImpl(scheduleRepository: ScheduleRepository, tripRepository: TripRepository, destinationRepository: DestinationRepository, memberRepository: MemberRepository, aiServiceClient: AiServiceClient, locationServiceClient: LocationServiceClient, scheduleValidator: ScheduleValidator, scheduleGenerationService: ScheduleGenerationService, scheduleExportService: ScheduleExportService)
        
        +generateSchedule(tripId: String, userId: String, request: GenerateScheduleRequest): GenerateScheduleResponse
        +getGenerationStatus(tripId: String, requestId: String, userId: String): GenerationStatusResponse
        +getSchedules(tripId: String, userId: String, day: Integer): ScheduleListResponse
        +updateDaySchedule(tripId: String, day: Integer, userId: String, request: UpdateScheduleRequest): ScheduleResponse
        +regenerateDaySchedule(tripId: String, day: Integer, userId: String, request: RegenerateScheduleRequest): GenerateScheduleResponse
        +exportSchedule(tripId: String, userId: String, request: ExportScheduleRequest): byte[]
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, userId: String, day: Integer): PlaceRecommendationResponse
        
        -validateTripReadyForSchedule(tripId: String, userId: String): Trip
        -validateScheduleExists(tripId: String, day: Integer): Schedule
        -buildScheduleGenerationRequest(trip: Trip, destinations: List<Destination>, members: List<Member>, request: GenerateScheduleRequest): ScheduleGenerationRequest
        -processScheduleGeneration(tripId: String, generationRequest: ScheduleGenerationRequest): String
        -validateRegenerationLimit(tripId: String, day: Integer): void
    }

    ' Domain Services
    class ScheduleGenerationService {
        -AiServiceClient aiServiceClient
        -LocationServiceClient locationServiceClient
        -ScheduleRepository scheduleRepository
        
        +ScheduleGenerationService(aiServiceClient: AiServiceClient, locationServiceClient: LocationServiceClient, scheduleRepository: ScheduleRepository)
        
        +generateTripSchedule(request: ScheduleGenerationRequest): String
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleRequest): String
        +getGenerationStatus(requestId: String): GenerationStatusResponse
        
        -buildGenerationContext(trip: Trip, destinations: List<Destination>, members: List<Member>): GenerationContext
        -processScheduleResponse(tripId: String, aiResponse: ScheduleAiResponse): void
        -validateGeneratedSchedule(schedule: Schedule): boolean
    }

    class ScheduleExportService {
        -ScheduleRepository scheduleRepository
        -LocationServiceClient locationServiceClient
        
        +ScheduleExportService(scheduleRepository: ScheduleRepository, locationServiceClient: LocationServiceClient)
        
        +exportToPdf(tripId: String, request: ExportScheduleRequest): byte[]
        +exportToImage(tripId: String, request: ExportScheduleRequest): byte[]
        
        -generateScheduleDocument(schedules: List<Schedule>, includeMap: boolean): Document
        -generateMapImage(schedules: List<Schedule>): byte[]
        -formatScheduleForExport(schedule: Schedule): ExportScheduleData
    }

    ' Validators
    class TripValidator {
        +validateCreateTripRequest(request: CreateTripRequest): void
        +validateUpdateTripRequest(request: UpdateTripRequest): void
        +validateUpdateTripBasicInfoRequest(request: UpdateTripBasicInfoRequest): void
        +validateTripName(tripName: String): void
        +validateTransportMode(transportMode: TransportMode): void
        
        -isValidTripName(tripName: String): boolean
        -isValidTransportMode(transportMode: TransportMode): boolean
    }

    class MemberValidator {
        +validateCreateMemberRequest(request: CreateMemberRequest): void
        +validateUpdateMemberRequest(request: UpdateMemberRequest): void
        +validateMemberName(name: String): void
        +validateAge(age: Integer): void
        +validateHealthStatus(healthStatus: HealthStatus): void
        +validatePreferences(preferences: List<Preference>): void
        
        -isValidName(name: String): boolean
        -isValidAge(age: Integer): boolean
        -isValidHealthStatus(healthStatus: HealthStatus): boolean
    }

    class DestinationValidator {
        +validateCreateDestinationRequest(request: CreateDestinationRequest): void
        +validateUpdateDestinationRequest(request: UpdateDestinationRequest): void
        +validateUpdateDestinationsBatchRequest(request: UpdateDestinationsBatchRequest): void
        +validateDestinationName(destinationName: String): void
        +validateNights(nights: Integer): void
        +validateAccommodation(accommodation: String): void
        +validateTimeFormat(time: String): void
        
        -isValidDestinationName(destinationName: String): boolean
        -isValidNights(nights: Integer): boolean
        -isValidTimeFormat(time: String): boolean
    }

    class ScheduleValidator {
        +validateGenerateScheduleRequest(request: GenerateScheduleRequest): void
        +validateUpdateScheduleRequest(request: UpdateScheduleRequest): void
        +validateRegenerateScheduleRequest(request: RegenerateScheduleRequest): void
        +validateExportScheduleRequest(request: ExportScheduleRequest): void
        +validateStartTime(startTime: String): void
        +validateSpecialRequests(specialRequests: String): void
        
        -isValidStartTime(startTime: String): boolean
        -isValidSpecialRequests(specialRequests: String): boolean
    }
}

' ======================================
' 3. Interface Adapter Layer (Infrastructure)
' ======================================
package "Interface Adapter Layer (Infrastructure)" {
    ' Repository Interfaces
    interface TripRepository {
        +save(trip: Trip): Trip
        +findById(tripId: String): Optional<Trip>
        +findByUserId(userId: String): List<Trip>
        +findByUserIdAndStatus(userId: String, status: TripStatus): List<Trip>
        +findByUserIdWithFilter(userId: String, filter: TripFilterRequest): PageResponse<Trip>
        +deleteById(tripId: String): void
        +existsByIdAndUserId(tripId: String, userId: String): boolean
    }

    interface MemberRepository {
        +save(member: Member): Member
        +findById(memberId: String): Optional<Member>
        +findByTripId(tripId: String): List<Member>
        +deleteById(memberId: String): void
        +deleteByTripId(tripId: String): void
        +countByTripId(tripId: String): long
        +existsByIdAndTripId(memberId: String, tripId: String): boolean
    }

    interface DestinationRepository {
        +save(destination: Destination): Destination
        +saveAll(destinations: List<Destination>): List<Destination>
        +findById(destinationId: String): Optional<Destination>
        +findByTripId(tripId: String): List<Destination>
        +findByTripIdOrderByOrder(tripId: String): List<Destination>
        +deleteById(destinationId: String): void
        +deleteByTripId(tripId: String): void
        +existsByIdAndTripId(destinationId: String, tripId: String): boolean
    }

    interface ScheduleRepository {
        +save(schedule: Schedule): Schedule
        +saveAll(schedules: List<Schedule>): List<Schedule>
        +findById(scheduleId: String): Optional<Schedule>
        +findByTripId(tripId: String): List<Schedule>
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<Schedule>
        +findByTripIdOrderByDay(tripId: String): List<Schedule>
        +deleteById(scheduleId: String): void
        +deleteByTripId(tripId: String): void
        +deleteByTripIdAndDay(tripId: String, day: Integer): void
        +existsByTripId(tripId: String): boolean
    }

    ' Repository Implementations
    class TripRepositoryImpl {
        -JdbcTemplate jdbcTemplate
        -TripRowMapper tripRowMapper
        
        +TripRepositoryImpl(jdbcTemplate: JdbcTemplate, tripRowMapper: TripRowMapper)
        
        +save(trip: Trip): Trip
        +findById(tripId: String): Optional<Trip>
        +findByUserId(userId: String): List<Trip>
        +findByUserIdAndStatus(userId: String, status: TripStatus): List<Trip>
        +findByUserIdWithFilter(userId: String, filter: TripFilterRequest): PageResponse<Trip>
        +deleteById(tripId: String): void
        +existsByIdAndUserId(tripId: String, userId: String): boolean
        
        -buildFilterQuery(filter: TripFilterRequest): String
        -buildOrderByClause(sort: String): String
    }

    class MemberRepositoryImpl {
        -JdbcTemplate jdbcTemplate
        -MemberRowMapper memberRowMapper
        
        +MemberRepositoryImpl(jdbcTemplate: JdbcTemplate, memberRowMapper: MemberRowMapper)
        
        +save(member: Member): Member
        +findById(memberId: String): Optional<Member>
        +findByTripId(tripId: String): List<Member>
        +deleteById(memberId: String): void
        +deleteByTripId(tripId: String): void
        +countByTripId(tripId: String): long
        +existsByIdAndTripId(memberId: String, tripId: String): boolean
    }

    class DestinationRepositoryImpl {
        -JdbcTemplate jdbcTemplate
        -DestinationRowMapper destinationRowMapper
        
        +DestinationRepositoryImpl(jdbcTemplate: JdbcTemplate, destinationRowMapper: DestinationRowMapper)
        
        +save(destination: Destination): Destination
        +saveAll(destinations: List<Destination>): List<Destination>
        +findById(destinationId: String): Optional<Destination>
        +findByTripId(tripId: String): List<Destination>
        +findByTripIdOrderByOrder(tripId: String): List<Destination>
        +deleteById(destinationId: String): void
        +deleteByTripId(tripId: String): void
        +existsByIdAndTripId(destinationId: String, tripId: String): boolean
    }

    class ScheduleRepositoryImpl {
        -JdbcTemplate jdbcTemplate
        -ScheduleRowMapper scheduleRowMapper
        -SchedulePlaceRowMapper schedulePlaceRowMapper
        
        +ScheduleRepositoryImpl(jdbcTemplate: JdbcTemplate, scheduleRowMapper: ScheduleRowMapper, schedulePlaceRowMapper: SchedulePlaceRowMapper)
        
        +save(schedule: Schedule): Schedule
        +saveAll(schedules: List<Schedule>): List<Schedule>
        +findById(scheduleId: String): Optional<Schedule>
        +findByTripId(tripId: String): List<Schedule>
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<Schedule>
        +findByTripIdOrderByDay(tripId: String): List<Schedule>
        +deleteById(scheduleId: String): void
        +deleteByTripId(tripId: String): void
        +deleteByTripIdAndDay(tripId: String, day: Integer): void
        +existsByTripId(tripId: String): boolean
        
        -saveSchedulePlaces(scheduleId: String, places: List<SchedulePlace>): void
        -findSchedulePlacesByScheduleId(scheduleId: String): List<SchedulePlace>
    }

    ' External Service Clients
    interface UserServiceClient {
        +getUserById(userId: String): UserResponse
        +validateUser(userId: String): boolean
    }

    interface LocationServiceClient {
        +getLocationInfo(locationName: String): LocationResponse
        +validateLocation(locationName: String): boolean
        +getWeatherInfo(locationName: String, date: LocalDate): WeatherResponse
        +getRouteInfo(from: String, to: String, transportMode: TransportMode): RouteResponse
    }

    interface AiServiceClient {
        +generateSchedule(request: ScheduleGenerationRequest): ScheduleGenerationResponse
        +getGenerationStatus(requestId: String): GenerationStatusResponse
        +getPlaceRecommendations(request: PlaceRecommendationRequest): PlaceRecommendationResponse
    }

    class UserServiceClientImpl {
        -RestTemplate restTemplate
        -String userServiceUrl
        
        +UserServiceClientImpl(restTemplate: RestTemplate, userServiceUrl: String)
        
        +getUserById(userId: String): UserResponse
        +validateUser(userId: String): boolean
        
        -buildUserServiceUrl(path: String): String
        -handleClientException(ex: Exception): void
    }

    class LocationServiceClientImpl {
        -RestTemplate restTemplate
        -String locationServiceUrl
        
        +LocationServiceClientImpl(restTemplate: RestTemplate, locationServiceUrl: String)
        
        +getLocationInfo(locationName: String): LocationResponse
        +validateLocation(locationName: String): boolean
        +getWeatherInfo(locationName: String, date: LocalDate): WeatherResponse
        +getRouteInfo(from: String, to: String, transportMode: TransportMode): RouteResponse
        
        -buildLocationServiceUrl(path: String): String
        -handleClientException(ex: Exception): void
    }

    class AiServiceClientImpl {
        -RestTemplate restTemplate
        -String aiServiceUrl
        
        +AiServiceClientImpl(restTemplate: RestTemplate, aiServiceUrl: String)
        
        +generateSchedule(request: ScheduleGenerationRequest): ScheduleGenerationResponse
        +getGenerationStatus(requestId: String): GenerationStatusResponse
        +getPlaceRecommendations(request: PlaceRecommendationRequest): PlaceRecommendationResponse
        
        -buildAiServiceUrl(path: String): String
        -handleClientException(ex: Exception): void
    }

    ' Row Mappers
    class TripRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): Trip
        -mapTripStatus(status: String): TripStatus
        -mapTransportMode(mode: String): TransportMode
    }

    class MemberRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): Member
        -mapGender(gender: String): Gender
        -mapHealthStatus(status: String): HealthStatus
        -mapPreferences(preferences: String): List<Preference>
    }

    class DestinationRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): Destination
    }

    class ScheduleRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): Schedule
        -mapWeatherInfo(condition: String, minTemp: Double, maxTemp: Double, icon: String): WeatherInfo
    }

    class SchedulePlaceRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): SchedulePlace
        -mapTransportation(type: String, duration: Integer, distance: Double, route: String): Transportation
        -mapHealthConsideration(restPoints: String, accessibility: String, walkingDistance: Double): HealthConsideration
    }
}

' ======================================
' 4. Framework & Driver Layer (Controller)
' ======================================
package "Framework & Driver Layer (Controller)" {
    class TripController {
        -TripUseCase tripUseCase
        
        +TripController(tripUseCase: TripUseCase)
        
        +getTripList(status: String, search: String, sort: String, page: Integer, size: Integer, authentication: Authentication): ResponseEntity<TripListResponse>
        +createTrip(request: CreateTripRequest, authentication: Authentication): ResponseEntity<TripResponse>
        +getTripDetail(tripId: String, authentication: Authentication): ResponseEntity<TripDetailResponse>
        +updateTrip(tripId: String, request: UpdateTripRequest, authentication: Authentication): ResponseEntity<TripResponse>
        +deleteTrip(tripId: String, authentication: Authentication): ResponseEntity<Void>
        +updateTripBasicInfo(tripId: String, request: UpdateTripBasicInfoRequest, authentication: Authentication): ResponseEntity<TripBasicInfoResponse>
        
        -getUserId(authentication: Authentication): String
        -buildTripFilterRequest(status: String, search: String, sort: String, page: Integer, size: Integer): TripFilterRequest
    }

    class MemberController {
        -MemberUseCase memberUseCase
        
        +MemberController(memberUseCase: MemberUseCase)
        
        +getTripMembers(tripId: String, authentication: Authentication): ResponseEntity<List<MemberResponse>>
        +addTripMember(tripId: String, request: CreateMemberRequest, authentication: Authentication): ResponseEntity<MemberResponse>
        +updateTripMember(tripId: String, memberId: String, request: UpdateMemberRequest, authentication: Authentication): ResponseEntity<MemberResponse>
        +deleteTripMember(tripId: String, memberId: String, authentication: Authentication): ResponseEntity<Void>
        
        -getUserId(authentication: Authentication): String
    }

    class DestinationController {
        -DestinationUseCase destinationUseCase
        
        +DestinationController(destinationUseCase: DestinationUseCase)
        
        +getTripDestinations(tripId: String, authentication: Authentication): ResponseEntity<List<DestinationResponse>>
        +addTripDestination(tripId: String, request: CreateDestinationRequest, authentication: Authentication): ResponseEntity<DestinationResponse>
        +updateTripDestination(tripId: String, destinationId: String, request: UpdateDestinationRequest, authentication: Authentication): ResponseEntity<DestinationResponse>
        +deleteTripDestination(tripId: String, destinationId: String, authentication: Authentication): ResponseEntity<Void>
        +updateTripDestinationsBatch(tripId: String, request: UpdateDestinationsBatchRequest, authentication: Authentication): ResponseEntity<DestinationsBatchResponse>
        
        -getUserId(authentication: Authentication): String
    }

    class ScheduleController {
        -ScheduleUseCase scheduleUseCase
        
        +ScheduleController(scheduleUseCase: ScheduleUseCase)
        
        +generateSchedule(tripId: String, request: GenerateScheduleRequest, authentication: Authentication): ResponseEntity<GenerateScheduleResponse>
        +getGenerationStatus(tripId: String, requestId: String, authentication: Authentication): ResponseEntity<GenerationStatusResponse>
        +getSchedules(tripId: String, day: Integer, authentication: Authentication): ResponseEntity<ScheduleListResponse>
        +updateDaySchedule(tripId: String, day: Integer, request: UpdateScheduleRequest, authentication: Authentication): ResponseEntity<ScheduleResponse>
        +regenerateDaySchedule(tripId: String, day: Integer, request: RegenerateScheduleRequest, authentication: Authentication): ResponseEntity<GenerateScheduleResponse>
        +exportSchedule(tripId: String, request: ExportScheduleRequest, authentication: Authentication): ResponseEntity<byte[]>
        +getSchedulePlaceRecommendations(tripId: String, placeId: String, day: Integer, authentication: Authentication): ResponseEntity<PlaceRecommendationResponse>
        
        -getUserId(authentication: Authentication): String
        -determineContentType(format: String): String
    }

    ' Exception Handler
    class TripExceptionHandler {
        +handleValidationException(ex: ValidationException): ResponseEntity<ErrorResponse>
        +handleBusinessException(ex: BusinessException): ResponseEntity<ErrorResponse>
        +handleNotFoundException(ex: NotFoundException): ResponseEntity<ErrorResponse>
        +handleUnauthorizedException(ex: UnauthorizedException): ResponseEntity<ErrorResponse>
        +handleForbiddenException(ex: ForbiddenException): ResponseEntity<ErrorResponse>
        +handleInternalServerException(ex: InternalServerException): ResponseEntity<ErrorResponse>
        +handleGenericException(ex: Exception): ResponseEntity<ErrorResponse>
        
        -buildErrorResponse(errorCode: String, message: String): ErrorResponse
        -getRequestPath(): String
    }

    ' Configuration
    class TripConfiguration {
        +tripUseCase(tripRepository: TripRepository, memberRepository: MemberRepository, destinationRepository: DestinationRepository, userServiceClient: UserServiceClient, tripValidator: TripValidator): TripUseCase
        +memberUseCase(memberRepository: MemberRepository, tripRepository: TripRepository, memberValidator: MemberValidator): MemberUseCase
        +destinationUseCase(destinationRepository: DestinationRepository, tripRepository: TripRepository, locationServiceClient: LocationServiceClient, destinationValidator: DestinationValidator): DestinationUseCase
        +scheduleUseCase(scheduleRepository: ScheduleRepository, tripRepository: TripRepository, destinationRepository: DestinationRepository, memberRepository: MemberRepository, aiServiceClient: AiServiceClient, locationServiceClient: LocationServiceClient, scheduleValidator: ScheduleValidator, scheduleGenerationService: ScheduleGenerationService, scheduleExportService: ScheduleExportService): ScheduleUseCase
        +scheduleGenerationService(aiServiceClient: AiServiceClient, locationServiceClient: LocationServiceClient, scheduleRepository: ScheduleRepository): ScheduleGenerationService
        +scheduleExportService(scheduleRepository: ScheduleRepository, locationServiceClient: LocationServiceClient): ScheduleExportService
        +tripValidator(): TripValidator
        +memberValidator(): MemberValidator
        +destinationValidator(): DestinationValidator
        +scheduleValidator(): ScheduleValidator
    }
}

' ======================================
' DTOs (Data Transfer Objects)
' ======================================
package "DTOs (Data Transfer Objects)" {
    ' Request DTOs
    class CreateTripRequest {
        -String tripName
        -TransportMode transportMode
        +getTripName(): String
        +getTransportMode(): TransportMode
    }

    class UpdateTripRequest {
        -String tripName
        -TransportMode transportMode
        +getTripName(): String
        +getTransportMode(): TransportMode
    }

    class UpdateTripBasicInfoRequest {
        -String tripName
        -TransportMode transportMode
        -List<CreateMemberRequest> members
        +getTripName(): String
        +getTransportMode(): TransportMode
        +getMembers(): List<CreateMemberRequest>
    }

    class TripFilterRequest {
        -TripStatus status
        -String search
        -String sort
        -Integer page
        -Integer size
        +getStatus(): TripStatus
        +getSearch(): String
        +getSort(): String
        +getPage(): Integer
        +getSize(): Integer
    }

    class CreateMemberRequest {
        -String name
        -Integer age
        -Gender gender
        -HealthStatus healthStatus
        -List<Preference> preferences
        +getName(): String
        +getAge(): Integer
        +getGender(): Gender
        +getHealthStatus(): HealthStatus
        +getPreferences(): List<Preference>
    }

    class UpdateMemberRequest {
        -String name
        -Integer age
        -Gender gender
        -HealthStatus healthStatus
        -List<Preference> preferences
        +getName(): String
        +getAge(): Integer
        +getGender(): Gender
        +getHealthStatus(): HealthStatus
        +getPreferences(): List<Preference>
    }

    class CreateDestinationRequest {
        -String destinationName
        -Integer nights
        -String accommodation
        -String checkInTime
        -String checkOutTime
        +getDestinationName(): String
        +getNights(): Integer
        +getAccommodation(): String
        +getCheckInTime(): String
        +getCheckOutTime(): String
    }

    class UpdateDestinationRequest {
        -String destinationName
        -Integer nights
        -String accommodation
        -String checkInTime
        -String checkOutTime
        +getDestinationName(): String
        +getNights(): Integer
        +getAccommodation(): String
        +getCheckInTime(): String
        +getCheckOutTime(): String
    }

    class UpdateDestinationsBatchRequest {
        -List<CreateDestinationRequest> destinations
        +getDestinations(): List<CreateDestinationRequest>
    }

    class GenerateScheduleRequest {
        -String startTime
        -String specialRequests
        +getStartTime(): String
        +getSpecialRequests(): String
    }

    class UpdateScheduleRequest {
        -List<SchedulePlaceUpdateRequest> places
        +getPlaces(): List<SchedulePlaceUpdateRequest>
    }

    class SchedulePlaceUpdateRequest {
        -String placeId
        -Integer order
        +getPlaceId(): String
        +getOrder(): Integer
    }

    class RegenerateScheduleRequest {
        -String specialRequests
        +getSpecialRequests(): String
    }

    class ExportScheduleRequest {
        -String format
        -Boolean includeMap
        -List<Integer> days
        +getFormat(): String
        +getIncludeMap(): Boolean
        +getDays(): List<Integer>
    }

    ' Response DTOs
    class TripResponse {
        -String tripId
        -String tripName
        -TransportMode transportMode
        -TripStatus status
        -String currentStep
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +getTripId(): String
        +getTripName(): String
        +getTransportMode(): TransportMode
        +getStatus(): TripStatus
        +getCurrentStep(): String
        +getCreatedAt(): LocalDateTime
        +getUpdatedAt(): LocalDateTime
    }

    class TripListResponse {
        -List<TripSummaryResponse> trips
        -Long totalCount
        -Integer currentPage
        -Integer totalPages
        +getTrips(): List<TripSummaryResponse>
        +getTotalCount(): Long
        +getCurrentPage(): Integer
        +getTotalPages(): Integer
    }

    class TripSummaryResponse {
        -String tripId
        -String tripName
        -TripStatus status
        -String currentStep
        -LocalDate startDate
        -LocalDate endDate
        -Integer memberCount
        -Integer destinationCount
        -Integer progress
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +getTripId(): String
        +getTripName(): String
        +getStatus(): TripStatus
        +getCurrentStep(): String
        +getStartDate(): LocalDate
        +getEndDate(): LocalDate
        +getMemberCount(): Integer
        +getDestinationCount(): Integer
        +getProgress(): Integer
        +getCreatedAt(): LocalDateTime
        +getUpdatedAt(): LocalDateTime
    }

    class TripDetailResponse {
        -String tripId
        -String tripName
        -TransportMode transportMode
        -TripStatus status
        -String currentStep
        -LocalDate startDate
        -LocalDate endDate
        -List<MemberResponse> members
        -List<DestinationResponse> destinations
        -Boolean hasSchedule
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +getTripId(): String
        +getTripName(): String
        +getTransportMode(): TransportMode
        +getStatus(): TripStatus
        +getCurrentStep(): String
        +getStartDate(): LocalDate
        +getEndDate(): LocalDate
        +getMembers(): List<MemberResponse>
        +getDestinations(): List<DestinationResponse>
        +getHasSchedule(): Boolean
        +getCreatedAt(): LocalDateTime
        +getUpdatedAt(): LocalDateTime
    }

    class TripBasicInfoResponse {
        -String tripId
        -String tripName
        -TransportMode transportMode
        -List<MemberResponse> members
        -LocalDateTime updatedAt
        +getTripId(): String
        +getTripName(): String
        +getTransportMode(): TransportMode
        +getMembers(): List<MemberResponse>
        +getUpdatedAt(): LocalDateTime
    }

    class MemberResponse {
        -String memberId
        -String name
        -Integer age
        -Gender gender
        -HealthStatus healthStatus
        -List<Preference> preferences
        +getMemberId(): String
        +getName(): String
        +getAge(): Integer
        +getGender(): Gender
        +getHealthStatus(): HealthStatus
        +getPreferences(): List<Preference>
    }

    class DestinationResponse {
        -String destinationId
        -String destinationName
        -Integer nights
        -LocalDate startDate
        -LocalDate endDate
        -String accommodation
        -String checkInTime
        -String checkOutTime
        -Integer order
        +getDestinationId(): String
        +getDestinationName(): String
        +getNights(): Integer
        +getStartDate(): LocalDate
        +getEndDate(): LocalDate
        +getAccommodation(): String
        +getCheckInTime(): String
        +getCheckOutTime(): String
        +getOrder(): Integer
    }

    class DestinationsBatchResponse {
        -String tripId
        -List<DestinationResponse> destinations
        -Integer totalDays
        -LocalDate startDate
        -LocalDate endDate
        -LocalDateTime updatedAt
        +getTripId(): String
        +getDestinations(): List<DestinationResponse>
        +getTotalDays(): Integer
        +getStartDate(): LocalDate
        +getEndDate(): LocalDate
        +getUpdatedAt(): LocalDateTime
    }

    class GenerateScheduleResponse {
        -String requestId
        -String status
        -String message
        +getRequestId(): String
        +getStatus(): String
        +getMessage(): String
    }

    class GenerationStatusResponse {
        -String requestId
        -String status
        -Integer progress
        -String message
        -Integer estimatedTime
        -String error
        +getRequestId(): String
        +getStatus(): String
        +getProgress(): Integer
        +getMessage(): String
        +getEstimatedTime(): Integer
        +getError(): String
    }

    class ScheduleListResponse {
        -String tripId
        -List<ScheduleResponse> schedules
        +getTripId(): String
        +getSchedules(): List<ScheduleResponse>
    }

    class ScheduleResponse {
        -Integer day
        -LocalDate date
        -String city
        -WeatherInfo weather
        -List<SchedulePlaceResponse> places
        +getDay(): Integer
        +getDate(): LocalDate
        +getCity(): String
        +getWeather(): WeatherInfo
        +getPlaces(): List<SchedulePlaceResponse>
    }

    class SchedulePlaceResponse {
        -String placeId
        -String placeName
        -String category
        -String startTime
        -Integer duration
        -Transportation transportation
        -HealthConsideration healthConsideration
        -Integer order
        +getPlaceId(): String
        +getPlaceName(): String
        +getCategory(): String
        +getStartTime(): String
        +getDuration(): Integer
        +getTransportation(): Transportation
        +getHealthConsideration(): HealthConsideration
        +getOrder(): Integer
    }

    class PlaceRecommendationResponse {
        -String placeId
        -String placeName
        -PlaceRecommendations recommendations
        -PlaceContext context
        -Boolean fromCache
        +getPlaceId(): String
        +getPlaceName(): String
        +getRecommendations(): PlaceRecommendations
        +getContext(): PlaceContext
        +getFromCache(): Boolean
    }

    class PlaceRecommendations {
        -List<String> reasons
        -PlaceTips tips
        +getReasons(): List<String>
        +getTips(): PlaceTips
    }

    class PlaceTips {
        -String description
        -List<String> events
        -String bestVisitTime
        -String estimatedDuration
        -List<String> photoSpots
        -List<String> practicalTips
        +getDescription(): String
        +getEvents(): List<String>
        +getBestVisitTime(): String
        +getEstimatedDuration(): String
        +getPhotoSpots(): List<String>
        +getPracticalTips(): List<String>
    }

    class PlaceContext {
        -Integer day
        -String previousPlace
        -String nextPlace
        +getDay(): Integer
        +getPreviousPlace(): String
        +getNextPlace(): String
    }

    ' External Service DTOs
    class UserResponse {
        -String userId
        -String username
        -String email
        +getUserId(): String
        +getUsername(): String
        +getEmail(): String
    }

    class LocationResponse {
        -String locationName
        -String country
        -String region
        -Double latitude
        -Double longitude
        +getLocationName(): String
        +getCountry(): String
        +getRegion(): String
        +getLatitude(): Double
        +getLongitude(): Double
    }

    class WeatherResponse {
        -String condition
        -Double minTemperature
        -Double maxTemperature
        -String icon
        +getCondition(): String
        +getMinTemperature(): Double
        +getMaxTemperature(): Double
        +getIcon(): String
    }

    class RouteResponse {
        -Integer duration
        -Double distance
        -String route
        -TransportationType transportType
        +getDuration(): Integer
        +getDistance(): Double
        +getRoute(): String
        +getTransportType(): TransportationType
    }

    class ScheduleGenerationRequest {
        -String tripId
        -String userId
        -String startTime
        -String specialRequests
        -Trip trip
        -List<Destination> destinations
        -List<Member> members
        +getTripId(): String
        +getUserId(): String
        +getStartTime(): String
        +getSpecialRequests(): String
        +getTrip(): Trip
        +getDestinations(): List<Destination>
        +getMembers(): List<Member>
    }

    class ScheduleGenerationResponse {
        -String requestId
        -String status
        -String message
        +getRequestId(): String
        +getStatus(): String
        +getMessage(): String
    }

    class ScheduleAiResponse {
        -String requestId
        -List<Schedule> schedules
        -String status
        +getRequestId(): String
        +getSchedules(): List<Schedule>
        +getStatus(): String
    }

    class PlaceRecommendationRequest {
        -String tripId
        -String placeId
        -String placeName
        -Integer day
        -String previousPlace
        -String nextPlace
        -List<Member> members
        +getTripId(): String
        +getPlaceId(): String
        +getPlaceName(): String
        +getDay(): Integer
        +getPreviousPlace(): String
        +getNextPlace(): String
        +getMembers(): List<Member>
    }

    class GenerationContext {
        -Trip trip
        -List<Destination> destinations
        -List<Member> members
        -String startTime
        -String specialRequests
        +getTrip(): Trip
        +getDestinations(): List<Destination>
        +getMembers(): List<Member>
        +getStartTime(): String
        +getSpecialRequests(): String
    }

    class ExportScheduleData {
        -Schedule schedule
        -byte[] mapImage
        -String formattedContent
        +getSchedule(): Schedule
        +getMapImage(): byte[]
        +getFormattedContent(): String
    }
}

' ======================================
' Relationships - Clean Architecture Dependencies
' ======================================
' Entity Layer - No dependencies

' Use Case Layer depends on Entity Layer (Dependency - 메서드에서 사용)
TripUseCase ..> Trip : uses
TripUseCase ..> Member : uses
TripUseCase ..> Destination : uses
MemberUseCase ..> Member : uses
MemberUseCase ..> Trip : uses
DestinationUseCase ..> Destination : uses
DestinationUseCase ..> Trip : uses
ScheduleUseCase ..> Schedule : uses
ScheduleUseCase ..> Trip : uses
ScheduleUseCase ..> Destination : uses
ScheduleUseCase ..> Member : uses

' Use Case implementations - Realization (인터페이스 구현)
TripUseCaseImpl <|.. TripUseCase : implements
MemberUseCaseImpl <|.. MemberUseCase : implements
DestinationUseCaseImpl <|.. DestinationUseCase : implements
ScheduleUseCaseImpl <|.. ScheduleUseCase : implements

' Use Case implementations - Association (의존성 주입으로 보유)
TripUseCaseImpl --> TripRepository : injected
TripUseCaseImpl --> MemberRepository : injected
TripUseCaseImpl --> DestinationRepository : injected
TripUseCaseImpl --> UserServiceClient : injected
TripUseCaseImpl --> TripValidator : injected

MemberUseCaseImpl --> MemberRepository : injected
MemberUseCaseImpl --> TripRepository : injected
MemberUseCaseImpl --> MemberValidator : injected

DestinationUseCaseImpl --> DestinationRepository : injected
DestinationUseCaseImpl --> TripRepository : injected
DestinationUseCaseImpl --> LocationServiceClient : injected
DestinationUseCaseImpl --> DestinationValidator : injected

ScheduleUseCaseImpl --> ScheduleRepository : injected
ScheduleUseCaseImpl --> TripRepository : injected
ScheduleUseCaseImpl --> DestinationRepository : injected
ScheduleUseCaseImpl --> MemberRepository : injected
ScheduleUseCaseImpl --> AiServiceClient : injected
ScheduleUseCaseImpl --> LocationServiceClient : injected
ScheduleUseCaseImpl --> ScheduleValidator : injected
ScheduleUseCaseImpl --> ScheduleGenerationService : injected
ScheduleUseCaseImpl --> ScheduleExportService : injected

' Domain Services - Association (의존성 주입으로 보유)
ScheduleGenerationService --> AiServiceClient : injected
ScheduleGenerationService --> LocationServiceClient : injected
ScheduleGenerationService --> ScheduleRepository : injected

ScheduleExportService --> ScheduleRepository : injected
ScheduleExportService --> LocationServiceClient : injected

' Repository implementations - Realization (인터페이스 구현)
TripRepositoryImpl <|.. TripRepository : implements
MemberRepositoryImpl <|.. MemberRepository : implements
DestinationRepositoryImpl <|.. DestinationRepository : implements
ScheduleRepositoryImpl <|.. ScheduleRepository : implements

' Repository implementations - Dependency (메서드에서 Entity 관리)
TripRepositoryImpl ..> Trip : manages
MemberRepositoryImpl ..> Member : manages
DestinationRepositoryImpl ..> Destination : manages
ScheduleRepositoryImpl ..> Schedule : manages
ScheduleRepositoryImpl ..> SchedulePlace : manages

' External service client implementations - Realization (인터페이스 구현)
UserServiceClientImpl <|.. UserServiceClient : implements
LocationServiceClientImpl <|.. LocationServiceClient : implements
AiServiceClientImpl <|.. AiServiceClient : implements

' Controllers - Association (의존성 주입으로 보유)
TripController --> TripUseCase : injected
MemberController --> MemberUseCase : injected
DestinationController --> DestinationUseCase : injected
ScheduleController --> ScheduleUseCase : injected

' Controllers - Dependency (메서드 파라미터/반환값으로 DTO 사용)
TripController ..> CreateTripRequest : uses
TripController ..> UpdateTripRequest : uses
TripController ..> UpdateTripBasicInfoRequest : uses
TripController ..> TripResponse : uses
TripController ..> TripListResponse : uses
TripController ..> TripDetailResponse : uses
TripController ..> TripBasicInfoResponse : uses

MemberController ..> CreateMemberRequest : uses
MemberController ..> UpdateMemberRequest : uses
MemberController ..> MemberResponse : uses

DestinationController ..> CreateDestinationRequest : uses
DestinationController ..> UpdateDestinationRequest : uses
DestinationController ..> UpdateDestinationsBatchRequest : uses
DestinationController ..> DestinationResponse : uses
DestinationController ..> DestinationsBatchResponse : uses

ScheduleController ..> GenerateScheduleRequest : uses
ScheduleController ..> UpdateScheduleRequest : uses
ScheduleController ..> RegenerateScheduleRequest : uses
ScheduleController ..> ExportScheduleRequest : uses
ScheduleController ..> GenerateScheduleResponse : uses
ScheduleController ..> GenerationStatusResponse : uses
ScheduleController ..> ScheduleListResponse : uses
ScheduleController ..> ScheduleResponse : uses
ScheduleController ..> PlaceRecommendationResponse : uses

' Use Case implementations - Dependency (메서드 파라미터/반환값으로 DTO 사용)
TripUseCaseImpl ..> CreateTripRequest : uses
TripUseCaseImpl ..> UpdateTripRequest : uses
TripUseCaseImpl ..> UpdateTripBasicInfoRequest : uses
TripUseCaseImpl ..> TripFilterRequest : uses
TripUseCaseImpl ..> TripResponse : uses
TripUseCaseImpl ..> TripListResponse : uses
TripUseCaseImpl ..> TripDetailResponse : uses
TripUseCaseImpl ..> TripBasicInfoResponse : uses

MemberUseCaseImpl ..> CreateMemberRequest : uses
MemberUseCaseImpl ..> UpdateMemberRequest : uses
MemberUseCaseImpl ..> MemberResponse : uses

DestinationUseCaseImpl ..> CreateDestinationRequest : uses
DestinationUseCaseImpl ..> UpdateDestinationRequest : uses
DestinationUseCaseImpl ..> UpdateDestinationsBatchRequest : uses
DestinationUseCaseImpl ..> DestinationResponse : uses
DestinationUseCaseImpl ..> DestinationsBatchResponse : uses

ScheduleUseCaseImpl ..> GenerateScheduleRequest : uses
ScheduleUseCaseImpl ..> UpdateScheduleRequest : uses
ScheduleUseCaseImpl ..> RegenerateScheduleRequest : uses
ScheduleUseCaseImpl ..> ExportScheduleRequest : uses
ScheduleUseCaseImpl ..> GenerateScheduleResponse : uses
ScheduleUseCaseImpl ..> GenerationStatusResponse : uses
ScheduleUseCaseImpl ..> ScheduleListResponse : uses
ScheduleUseCaseImpl ..> ScheduleResponse : uses
ScheduleUseCaseImpl ..> PlaceRecommendationResponse : uses

' External Service Clients - Dependency (메서드 파라미터/반환값으로 DTO 사용)
UserServiceClientImpl ..> UserResponse : uses
LocationServiceClientImpl ..> LocationResponse : uses
LocationServiceClientImpl ..> WeatherResponse : uses
LocationServiceClientImpl ..> RouteResponse : uses
AiServiceClientImpl ..> ScheduleGenerationRequest : uses
AiServiceClientImpl ..> ScheduleGenerationResponse : uses
AiServiceClientImpl ..> GenerationStatusResponse : uses
AiServiceClientImpl ..> PlaceRecommendationRequest : uses
AiServiceClientImpl ..> PlaceRecommendationResponse : uses

' Entity relationships
Trip ||--o{ Member : has
Trip ||--o{ Destination : has
Trip ||--o{ Schedule : has
Schedule ||--o{ SchedulePlace : contains
SchedulePlace ||--|| Transportation : has
SchedulePlace ||--|| HealthConsideration : has
Schedule ||--|| WeatherInfo : has

' Enum usage
Trip ||--|| TransportMode : uses
Trip ||--|| TripStatus : uses
Member ||--|| Gender : uses
Member ||--|| HealthStatus : uses
Member ||--o{ Preference : has
Transportation ||--|| TransportationType : uses
HealthConsideration ||--o{ AccessibilityType : has

@enduml