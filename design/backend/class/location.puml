@startuml
!theme mono

title Location 서비스 클래스 설계서 (Layered Architecture)

' ======================================
' Package Structure
' ======================================
package "com.unicorn.tripgen.location" {

    ' ======================================
    ' Controller Layer
    ' ======================================
    package "controller" {
        class LocationController {
            -LocationService locationService
            -LocationSearchService locationSearchService
            +LocationController(locationService: LocationService, locationSearchService: LocationSearchService)
            +searchNearbyPlaces(request: NearbySearchRequest): ResponseEntity<ApiResponse<NearbySearchResponse>>
            +searchByKeyword(keyword: String, latitude: Double, longitude: Double, radius: Integer, category: String, sort: String, page: Integer, size: Integer): ResponseEntity<ApiResponse<KeywordSearchResponse>>
            +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): ResponseEntity<ApiResponse<PlaceDetails>>
            +getPlaceRecommendations(placeId: String, tripId: String): ResponseEntity<ApiResponse<PlaceRecommendationResponse>>
            +getBusinessHours(placeId: String): ResponseEntity<ApiResponse<BusinessHours>>
        }
    }

    ' ======================================
    ' Service Layer
    ' ======================================
    package "service" {
        interface LocationService {
            +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
            +getPlaceRecommendations(placeId: String, tripId: String): PlaceRecommendationResponse
            +getBusinessHours(placeId: String): BusinessHours
        }

        interface LocationSearchService {
            +searchNearbyPlaces(request: NearbySearchRequest): NearbySearchResponse
            +searchByKeyword(keyword: String, location: Location, searchCriteria: SearchCriteria): KeywordSearchResponse
        }

        class LocationServiceImpl {
            -PlaceRepository placeRepository
            -PlaceDetailRepository placeDetailRepository
            -PlaceRecommendationRepository placeRecommendationRepository
            -ExternalApiService externalApiService
            -CacheService cacheService
            -AiServiceClient aiServiceClient
            +LocationServiceImpl(placeRepository: PlaceRepository, placeDetailRepository: PlaceDetailRepository, placeRecommendationRepository: PlaceRecommendationRepository, externalApiService: ExternalApiService, cacheService: CacheService, aiServiceClient: AiServiceClient)
            +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
            +getPlaceRecommendations(placeId: String, tripId: String): PlaceRecommendationResponse
            +getBusinessHours(placeId: String): BusinessHours
            -enrichPlaceWithDetails(place: Place, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
            -getOrGenerateRecommendations(placeId: String, tripId: String): PlaceRecommendationResponse
        }

        class LocationSearchServiceImpl {
            -PlaceRepository placeRepository
            -ExternalSearchService externalSearchService
            -CacheService cacheService
            +LocationSearchServiceImpl(placeRepository: PlaceRepository, externalSearchService: ExternalSearchService, cacheService: CacheService)
            +searchNearbyPlaces(request: NearbySearchRequest): NearbySearchResponse  
            +searchByKeyword(keyword: String, location: Location, searchCriteria: SearchCriteria): KeywordSearchResponse
            -searchAndCacheResults(searchQuery: SearchQuery): List<Place>
            -buildSearchCriteria(parameters: SearchParameters): SearchCriteria
        }

        class ExternalApiService {
            -GooglePlacesApiClient googlePlacesApiClient
            -KakaoMapApiClient kakaoMapApiClient
            -PlaceRepository placeRepository
            +ExternalApiService(googlePlacesApiClient: GooglePlacesApiClient, kakaoMapApiClient: KakaoMapApiClient, placeRepository: PlaceRepository)
            +getPlaceDetailsFromExternal(placeId: String): ExternalPlaceDetails
            +getBusinessHoursFromExternal(placeId: String): ExternalBusinessHours
            +validateAndEnrichPlace(place: Place): Place
            -selectOptimalApiProvider(location: Location): ApiProvider
        }

        class ExternalSearchService {
            -GooglePlacesApiClient googlePlacesApiClient  
            -KakaoMapApiClient kakaoMapApiClient
            +ExternalSearchService(googlePlacesApiClient: GooglePlacesApiClient, kakaoMapApiClient: KakaoMapApiClient)
            +searchNearbyPlaces(location: Location, criteria: SearchCriteria): List<ExternalPlace>
            +searchByKeyword(keyword: String, location: Location, criteria: SearchCriteria): List<ExternalPlace>
            -convertToInternalPlace(externalPlace: ExternalPlace): Place
            -selectSearchProvider(location: Location): ApiProvider
        }

        class CacheService {
            -RedisTemplate<String, Object> redisTemplate
            +CacheService(redisTemplate: RedisTemplate<String, Object>)
            +getPlaceDetails(placeId: String): Optional<PlaceDetails>
            +cachePlace(placeId: String, placeDetails: PlaceDetails, ttl: Duration): void
            +getRecommendations(placeId: String): Optional<PlaceRecommendation>
            +cacheRecommendations(placeId: String, recommendations: PlaceRecommendation, ttl: Duration): void
            +getSearchResults(cacheKey: String): Optional<List<Place>>
            +cacheSearchResults(cacheKey: String, results: List<Place>, ttl: Duration): void
            -generateCacheKey(prefix: String, params: Object...): String
        }
    }

    ' ======================================
    ' External API Clients
    ' ======================================
    package "client" {
        interface AiServiceClient {
            +generatePlaceRecommendations(request: RecommendationRequest): CompletableFuture<PlaceRecommendation>
            +isRecommendationReady(placeId: String): boolean
            +getGeneratedRecommendation(placeId: String): PlaceRecommendation
        }

        class AiServiceClientImpl {
            -WebClient webClient
            -String aiServiceBaseUrl
            +AiServiceClientImpl(webClient: WebClient, aiServiceBaseUrl: String)
            +generatePlaceRecommendations(request: RecommendationRequest): CompletableFuture<PlaceRecommendation>
            +isRecommendationReady(placeId: String): boolean
            +getGeneratedRecommendation(placeId: String): PlaceRecommendation
            -buildRecommendationRequest(placeId: String, tripId: String): RecommendationRequest
        }

        interface GooglePlacesApiClient {
            +getPlaceDetails(placeId: String): GooglePlaceDetails
            +searchNearbyPlaces(request: GoogleNearbySearchRequest): GoogleSearchResponse
            +searchTextQuery(query: String, location: GoogleLocation): GoogleSearchResponse
            +getPlaceBusinessHours(placeId: String): GoogleBusinessHours
        }

        class GooglePlacesApiClientImpl {
            -WebClient webClient
            -String apiKey
            -String baseUrl
            +GooglePlacesApiClientImpl(webClient: WebClient, apiKey: String, baseUrl: String)
            +getPlaceDetails(placeId: String): GooglePlaceDetails
            +searchNearbyPlaces(request: GoogleNearbySearchRequest): GoogleSearchResponse
            +searchTextQuery(query: String, location: GoogleLocation): GoogleSearchResponse
            +getPlaceBusinessHours(placeId: String): GoogleBusinessHours
            -handleApiResponse(response: GoogleApiResponse): GoogleApiData
            -buildRequestHeaders(): HttpHeaders
        }

        interface KakaoMapApiClient {
            +searchPlaces(keyword: String, location: KakaoLocation): KakaoSearchResponse
            +getPlaceCategory(placeId: String): KakaoCategory
            +getDirections(origin: KakaoLocation, destination: KakaoLocation, transportMode: String): KakaoDirectionsResponse
        }

        class KakaoMapApiClientImpl {
            -WebClient webClient
            -String apiKey
            -String baseUrl
            +KakaoMapApiClientImpl(webClient: WebClient, apiKey: String, baseUrl: String)
            +searchPlaces(keyword: String, location: KakaoLocation): KakaoSearchResponse
            +getPlaceCategory(placeId: String): KakaoCategory
            +getDirections(origin: KakaoLocation, destination: KakaoLocation, transportMode: String): KakaoDirectionsResponse
            -convertCoordinates(latitude: Double, longitude: Double): KakaoLocation
        }
    }

    ' ======================================
    ' Repository Layer
    ' ======================================
    package "repository" {
        interface PlaceRepository {
            +findByPlaceId(placeId: String): Optional<Place>
            +findNearbyPlaces(location: Location, radius: Double, category: PlaceCategory): List<Place>
            +searchByKeyword(keyword: String, location: Location, searchCriteria: SearchCriteria): List<Place>
            +save(place: Place): Place
            +saveAll(places: List<Place>): List<Place>
            +existsByPlaceId(placeId: String): boolean
            +updateLastAccessTime(placeId: String): void
        }

        interface PlaceDetailRepository {
            +findByPlaceId(placeId: String): Optional<PlaceDetail>
            +save(placeDetail: PlaceDetail): PlaceDetail
            +findRecentDetails(placeId: String, since: LocalDateTime): List<PlaceDetail>
        }

        interface PlaceRecommendationRepository {
            +findByPlaceId(placeId: String): Optional<PlaceRecommendation>
            +save(recommendation: PlaceRecommendation): PlaceRecommendation
            +findExpiredRecommendations(before: LocalDateTime): List<PlaceRecommendation>
            +deleteExpiredRecommendations(before: LocalDateTime): void
        }

        class PlaceRepositoryImpl {
            -JdbcTemplate jdbcTemplate
            -NamedParameterJdbcTemplate namedParameterJdbcTemplate
            +PlaceRepositoryImpl(jdbcTemplate: JdbcTemplate, namedParameterJdbcTemplate: NamedParameterJdbcTemplate)
            +findByPlaceId(placeId: String): Optional<Place>
            +findNearbyPlaces(location: Location, radius: Double, category: PlaceCategory): List<Place>
            +searchByKeyword(keyword: String, location: Location, searchCriteria: SearchCriteria): List<Place>
            +save(place: Place): Place
            +saveAll(places: List<Place>): List<Place>
            +existsByPlaceId(placeId: String): boolean
            +updateLastAccessTime(placeId: String): void
            -mapRowToPlace(rs: ResultSet, rowNum: int): Place
            -buildSearchQuery(searchCriteria: SearchCriteria): String
        }
    }

    ' ======================================
    ' Domain Model Layer
    ' ======================================
    package "model" {
        class Place {
            -String placeId
            -String name
            -PlaceCategory category
            -String description
            -Double rating
            -Integer reviewCount
            -Integer priceLevel
            -Location location
            -LocalDateTime createdAt
            -LocalDateTime updatedAt
            -LocalDateTime lastAccessedAt
            +Place()
            +Place(placeId: String, name: String, category: PlaceCategory, location: Location)
            +getPlaceId(): String
            +getName(): String
            +getCategory(): PlaceCategory
            +getLocation(): Location
            +updateAccessTime(): void
            +enrichWithExternalData(externalData: ExternalPlaceData): void
        }

        class PlaceDetail {
            -Long id
            -String placeId
            -List<String> images
            -ContactInfo contact
            -BusinessHours businessHours
            -List<Review> reviews
            -LocalDateTime createdAt
            -LocalDateTime updatedAt
            +PlaceDetail()
            +PlaceDetail(placeId: String)
            +getPlaceId(): String
            +getImages(): List<String>
            +getContact(): ContactInfo
            +getBusinessHours(): BusinessHours
            +addReview(review: Review): void
            +updateBusinessHours(hours: BusinessHours): void
        }

        class PlaceRecommendation {
            -Long id
            -String placeId
            -String tripId
            -String recommendReason
            -AITips tips
            -boolean fromCache
            -LocalDateTime generatedAt
            -LocalDateTime expiresAt
            +PlaceRecommendation()
            +PlaceRecommendation(placeId: String, tripId: String)
            +getPlaceId(): String
            +isExpired(): boolean
            +updateExpiration(duration: Duration): void
            +isValid(): boolean
        }

        class Location {
            -Double latitude
            -Double longitude
            -String address
            -String searchKeyword
            -String parkingKeyword
            -RegionType region
            +Location()
            +Location(latitude: Double, longitude: Double)
            +getLatitude(): Double
            +getLongitude(): Double
            +calculateDistance(other: Location): Double
            +isInRadius(center: Location, radius: Double): boolean
        }

        class ContactInfo {
            -String phone
            -String website
            +ContactInfo()
            +ContactInfo(phone: String, website: String)
            +getPhone(): String
            +getWebsite(): String
            +hasContact(): boolean
        }

        class BusinessHours {
            -boolean isOpen
            -String currentStatus
            -String todayHours
            -List<DailyHours> weeklyHours
            +BusinessHours()
            +isOpenNow(): boolean
            +getTodayHours(): String
            +getStatusDisplay(): String
            +updateCurrentStatus(): void
        }

        class DailyHours {
            -String day
            -String hours
            -boolean isToday
            +DailyHours()
            +DailyHours(day: String, hours: String, isToday: boolean)
            +getDay(): String
            +getHours(): String
            +isToday(): boolean
        }

        class AITips {
            -String description
            -String specialEvents
            -String bestVisitTime
            -String estimatedDuration
            -List<String> photoSpots
            -List<String> practicalTips
            -String weatherTips
            -List<AlternativePlace> alternativePlaces
            +AITips()
            +getDescription(): String
            +getPhotoSpots(): List<String>
            +getPracticalTips(): List<String>
            +addPhotoSpot(spot: String): void
            +addPracticalTip(tip: String): void
        }

        class AlternativePlace {
            -String name
            -String reason
            -String distance
            +AlternativePlace()
            +AlternativePlace(name: String, reason: String)
            +getName(): String
            +getReason(): String
        }

        class Review {
            -String reviewId
            -String authorName
            -Integer rating
            -String text
            -Long time
            -String relativeTimeDescription
            -String language
            +Review()
            +Review(reviewId: String, authorName: String, rating: Integer)
            +getReviewId(): String
            +getRating(): Integer
            +getText(): String
            +isRecentReview(): boolean
        }

        enum PlaceCategory {
            ALL("all", "전체")
            TOURIST("tourist", "관광지")
            RESTAURANT("restaurant", "음식점")
            LAUNDRY("laundry", "세탁소")
            
            -String code
            -String displayName
            +PlaceCategory(code: String, displayName: String)
            +getCode(): String
            +getDisplayName(): String
            +fromCode(code: String): PlaceCategory
        }

        enum RegionType {
            DOMESTIC("domestic", "국내")
            INTERNATIONAL("international", "해외")
            
            -String code
            -String displayName
            +RegionType(code: String, displayName: String)
            +getCode(): String
            +getDisplayName(): String
        }

        enum ApiProvider {
            GOOGLE_PLACES("google", "Google Places API")
            KAKAO_MAP("kakao", "Kakao Map API")
            
            -String code
            -String displayName
            +ApiProvider(code: String, displayName: String)
            +getCode(): String
            +getDisplayName(): String
        }
    }

    ' ======================================
    ' DTO Layer
    ' ======================================
    package "dto" {
        package "request" {
            class NearbySearchRequest {
                -Location origin
                -String transportMode
                -Integer timeRange
                -String category
                -String sort
                -Integer page
                -Integer size
                +NearbySearchRequest()
                +getOrigin(): Location
                +getTransportMode(): String
                +getTimeRange(): Integer
                +toSearchCriteria(): SearchCriteria
                +validate(): void
            }

            class RecommendationRequest {
                -String placeId
                -String tripId
                -String userId
                -Map<String, Object> userPreferences
                +RecommendationRequest()
                +RecommendationRequest(placeId: String, tripId: String)
                +getPlaceId(): String
                +getTripId(): String
                +getUserPreferences(): Map<String, Object>
            }

            class SearchCriteria {
                -String keyword
                -Location center
                -Double radius
                -PlaceCategory category
                -String sortBy
                -Integer page
                -Integer size
                +SearchCriteria()
                +getKeyword(): String
                +getCenter(): Location
                +getRadius(): Double
                +buildCacheKey(): String
                +validate(): void
            }
        }

        package "response" {
            class NearbySearchResponse {
                -Integer totalCount
                -Integer page
                -Integer size
                -Boolean hasNext
                -List<PlaceCard> places
                +NearbySearchResponse()
                +NearbySearchResponse(places: List<PlaceCard>, page: Integer, size: Integer, totalCount: Integer)
                +getTotalCount(): Integer
                +getPlaces(): List<PlaceCard>
                +isHasNext(): Boolean
            }

            class KeywordSearchResponse {
                -String keyword
                -Integer totalCount
                -Integer page
                -Integer size
                -Boolean hasNext
                -List<PlaceCard> places
                +KeywordSearchResponse()
                +getKeyword(): String
                +getPlaces(): List<PlaceCard>
                +isHasNext(): Boolean
            }

            class PlaceDetails {
                -String placeId
                -String name
                -String category
                -String description
                -Double rating
                -Integer reviewCount
                -Integer priceLevel
                -List<String> images
                -LocationInfo location
                -BusinessHours businessHours
                -ContactInfo contact
                -AIRecommendation aiRecommendation
                -List<Review> reviews
                +PlaceDetails()
                +getPlaceId(): String
                +getName(): String
                +getAiRecommendation(): AIRecommendation
                +hasAiRecommendation(): boolean
            }

            class PlaceCard {
                -String placeId
                -String name
                -String category
                -Double rating
                -Integer reviewCount
                -String address
                -Integer distance
                -Integer travelTime
                -String imageUrl
                +PlaceCard()
                +PlaceCard(place: Place, distance: Integer, travelTime: Integer)
                +getPlaceId(): String
                +getName(): String
                +getDistance(): Integer
                +getTravelTime(): Integer
            }

            class PlaceRecommendationResponse {
                -String locationId
                -PlaceRecommendation recommendations
                -Boolean fromCache
                -LocalDateTime generatedAt
                +PlaceRecommendationResponse()
                +getLocationId(): String
                +getRecommendations(): PlaceRecommendation
                +isFromCache(): Boolean
            }

            class LocationInfo {
                -Double latitude
                -Double longitude
                -String address
                -String searchKeyword
                -String parkingKeyword
                -String region
                +LocationInfo()
                +LocationInfo(location: Location)
                +getLatitude(): Double
                +getLongitude(): Double
                +getSearchKeyword(): String
            }

            class AIRecommendation {
                -String recommendReason
                -AITips tips
                +AIRecommendation()
                +AIRecommendation(recommendation: PlaceRecommendation)
                +getRecommendReason(): String
                +getTips(): AITips
                +hasRecommendation(): boolean
            }
        }

        package "external" {
            class ExternalPlaceDetails {
                -String placeId
                -String name
                -Double rating
                -String address
                -List<String> photos
                -ExternalBusinessHours businessHours
                +ExternalPlaceDetails()
                +toPlace(): Place
                +toPlaceDetail(): PlaceDetail
            }

            class GooglePlaceDetails {
                -String place_id
                -String name
                -Double rating
                -String formatted_address
                -List<GooglePhoto> photos
                -GoogleOpeningHours opening_hours
                +GooglePlaceDetails()
                +toExternalPlaceDetails(): ExternalPlaceDetails
            }

            class KakaoSearchResponse {
                -List<KakaoPlace> documents
                -KakaoMeta meta
                +KakaoSearchResponse()
                +getDocuments(): List<KakaoPlace>
                +toExternalPlaces(): List<ExternalPlace>
            }
        }
    }

    ' ======================================
    ' Configuration
    ' ======================================
    package "config" {
        class LocationConfig {
            +googlePlacesApiClient(): GooglePlacesApiClient
            +kakaoMapApiClient(): KakaoMapApiClient
            +webClient(): WebClient
            +redisTemplate(): RedisTemplate<String, Object>
            +cacheManager(): CacheManager
        }

        class ExternalApiConfig {
            -String googleApiKey
            -String kakaoApiKey
            -String googleBaseUrl
            -String kakaoBaseUrl
            +ExternalApiConfig()
            +getGoogleApiKey(): String
            +getKakaoApiKey(): String
        }
    }
}

' ======================================
' External Dependencies
' ======================================
package "com.unicorn.tripgen.common" {
    class BaseException
    class ApiResponse
    class PageResponse
    class BaseAuditEntity
    class ValidationUtils
    class DateUtils
}

' ======================================
' Relationships - Controller Layer
' ======================================
' Controller → Service: Association (의존성 주입으로 보유)
LocationController --> LocationService : 1..*
LocationController --> LocationSearchService : 1..*

' Controller → DTO: Dependency (메서드 파라미터/반환값)
LocationController ..> NearbySearchRequest
LocationController ..> KeywordSearchResponse
LocationController ..> PlaceDetails
LocationController ..> PlaceRecommendationResponse
LocationController ..> BusinessHours
LocationController ..> ApiResponse

' ======================================
' Relationships - Service Layer
' ======================================
' Service Interface → Implementation: Realization (인터페이스 구현)
LocationServiceImpl ..|> LocationService
LocationSearchServiceImpl ..|> LocationSearchService

' Service Impl → Repository: Association (의존성 주입으로 보유)
LocationServiceImpl --> PlaceRepository : 1
LocationServiceImpl --> PlaceDetailRepository : 1
LocationServiceImpl --> PlaceRecommendationRepository : 1
LocationServiceImpl --> ExternalApiService : 1
LocationServiceImpl --> CacheService : 1
LocationServiceImpl --> AiServiceClient : 1

LocationSearchServiceImpl --> PlaceRepository : 1
LocationSearchServiceImpl --> ExternalSearchService : 1
LocationSearchServiceImpl --> CacheService : 1

' Service Impl → External Client: Association (의존성 주입으로 보유)
ExternalApiService --> GooglePlacesApiClient : 1
ExternalApiService --> KakaoMapApiClient : 1
ExternalApiService --> PlaceRepository : 1

ExternalSearchService --> GooglePlacesApiClient : 1
ExternalSearchService --> KakaoMapApiClient : 1

' Service → DTO: Dependency (메서드 파라미터/반환값)
LocationServiceImpl ..> PlaceDetails
LocationServiceImpl ..> PlaceRecommendationResponse
LocationServiceImpl ..> BusinessHours
LocationSearchServiceImpl ..> NearbySearchResponse
LocationSearchServiceImpl ..> KeywordSearchResponse
LocationSearchServiceImpl ..> NearbySearchRequest
LocationSearchServiceImpl ..> SearchCriteria

' ======================================
' Relationships - Client Layer
' ======================================
' Client Interface → Implementation: Realization (인터페이스 구현)
AiServiceClientImpl ..|> AiServiceClient
GooglePlacesApiClientImpl ..|> GooglePlacesApiClient
KakaoMapApiClientImpl ..|> KakaoMapApiClient

' Client → DTO: Dependency (메서드 파라미터/반환값)
AiServiceClientImpl ..> RecommendationRequest
AiServiceClientImpl ..> PlaceRecommendation

' ======================================
' Relationships - Repository Layer
' ======================================
' Repository Interface → Implementation: Realization (인터페이스 구현)
PlaceRepositoryImpl ..|> PlaceRepository

' Repository Impl → Entity: Dependency (메서드에서 관리)
PlaceRepositoryImpl ..> Place
PlaceRepositoryImpl ..> Location
PlaceRepositoryImpl ..> PlaceCategory
PlaceRepositoryImpl ..> SearchCriteria

' ======================================
' Relationships - Domain Model
' ======================================
' Entity → Value Object: Association (프로퍼티로 보유)
Place --> Location : 1
Place --> PlaceCategory : 1
PlaceDetail --> ContactInfo : 1
PlaceDetail --> BusinessHours : 1
PlaceDetail --> Review : *
PlaceRecommendation --> AITips : 1
BusinessHours --> DailyHours : *
AITips --> AlternativePlace : *
Location --> RegionType : 1

' ======================================
' Relationships - DTOs
' ======================================
' DTO → Value Object: Association (프로퍼티로 보유)
NearbySearchRequest --> Location : 1
PlaceDetails --> LocationInfo : 1
PlaceDetails --> BusinessHours : 1
PlaceDetails --> ContactInfo : 1
PlaceDetails --> AIRecommendation : 1
PlaceDetails --> Review : *

' DTO → DTO: Dependency (변환 메서드)
NearbySearchRequest ..> SearchCriteria
PlaceCard ..> Place
LocationInfo ..> Location
AIRecommendation ..> PlaceRecommendation

' ======================================
' Relationships - Common Dependencies
' ======================================
LocationController ..> BaseException
LocationServiceImpl ..> ValidationUtils
Place --|> BaseAuditEntity
PlaceDetail --|> BaseAuditEntity
PlaceRecommendation --|> BaseAuditEntity

@enduml