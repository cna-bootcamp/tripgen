@startuml
!theme mono

title Location Service - 상세 클래스 설계서

' ================================
' Controller Layer
' ================================
package "com.unicorn.tripgen.location.controller" {
    class LocationController {
        -locationService: LocationService
        +LocationController(locationService: LocationService)
        +searchNearbyPlaces(request: NearbySearchRequest): ResponseEntity<ApiResponse<NearbySearchResponse>>
        +searchByKeyword(keyword: String, latitude: Double, longitude: Double, radius: Integer, category: String, sort: String, page: Integer, size: Integer): ResponseEntity<ApiResponse<KeywordSearchResponse>>
        +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): ResponseEntity<ApiResponse<PlaceDetails>>
        +getPlaceRecommendations(placeId: String, tripId: String): ResponseEntity<ApiResponse<AIRecommendationResponse>>
        +getBusinessHours(placeId: String): ResponseEntity<ApiResponse<BusinessHours>>
    }
}

' ================================
' Service Layer
' ================================
package "com.unicorn.tripgen.location.service" {
    interface LocationService {
        +searchNearbyPlaces(request: NearbySearchRequest): NearbySearchResponse
        +searchByKeyword(criteria: KeywordSearchCriteria): KeywordSearchResponse
        +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
        +getPlaceRecommendations(placeId: String, tripId: String): AIRecommendationResponse
        +getBusinessHours(placeId: String): BusinessHours
    }

    class LocationServiceImpl {
        -placeSearchService: PlaceSearchService
        -placeDetailsService: PlaceDetailsService
        -aiRecommendationService: AIRecommendationService
        -businessHoursService: BusinessHoursService
        -cacheService: CacheService
        +LocationServiceImpl(placeSearchService: PlaceSearchService, placeDetailsService: PlaceDetailsService, aiRecommendationService: AIRecommendationService, businessHoursService: BusinessHoursService, cacheService: CacheService)
        +searchNearbyPlaces(request: NearbySearchRequest): NearbySearchResponse
        +searchByKeyword(criteria: KeywordSearchCriteria): KeywordSearchResponse
        +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
        +getPlaceRecommendations(placeId: String, tripId: String): AIRecommendationResponse
        +getBusinessHours(placeId: String): BusinessHours
        -validateSearchRequest(request: NearbySearchRequest): void
        -validateKeywordCriteria(criteria: KeywordSearchCriteria): void
        -buildCacheKey(prefix: String, params: Object...): String
    }

    class PlaceSearchService {
        -externalPlaceRepository: ExternalPlaceRepository
        -cacheService: CacheService
        +PlaceSearchService(externalPlaceRepository: ExternalPlaceRepository, cacheService: CacheService)
        +searchNearbyPlaces(origin: Location, transportMode: TransportMode, timeRange: Integer, category: PlaceCategory, sort: SortType, page: Integer, size: Integer): List<PlaceCard>
        +searchByKeyword(keyword: String, location: Location, radius: Integer, category: PlaceCategory, sort: SortType, page: Integer, size: Integer): List<PlaceCard>
        +getTotalCount(searchCriteria: Object): Integer
        -convertToPlaceCards(externalPlaces: List<ExternalPlace>): List<PlaceCard>
        -applyFiltering(places: List<PlaceCard>, category: PlaceCategory): List<PlaceCard>
        -applySorting(places: List<PlaceCard>, sort: SortType): List<PlaceCard>
    }

    class PlaceDetailsService {
        -externalPlaceRepository: ExternalPlaceRepository
        -reviewService: ReviewService
        -cacheService: CacheService
        +PlaceDetailsService(externalPlaceRepository: ExternalPlaceRepository, reviewService: ReviewService, cacheService: CacheService)
        +getPlaceDetails(placeId: String): PlaceDetails
        +enrichWithReviews(placeDetails: PlaceDetails): PlaceDetails
        -convertToPlaceDetails(externalPlace: ExternalPlace): PlaceDetails
    }

    class AIRecommendationService {
        -aiServiceClient: AIServiceClient
        -cacheService: CacheService
        -tripServiceClient: TripServiceClient
        +AIRecommendationService(aiServiceClient: AIServiceClient, cacheService: CacheService, tripServiceClient: TripServiceClient)
        +getRecommendations(placeId: String, tripId: String): AIRecommendationResponse
        +generateRecommendations(placeId: String, userProfile: UserProfile): CompletableFuture<AIRecommendation>
        -getUserProfile(tripId: String): UserProfile
        -buildRecommendationRequest(placeId: String, userProfile: UserProfile): AIRecommendationRequest
    }

    class BusinessHoursService {
        -externalPlaceRepository: ExternalPlaceRepository
        -cacheService: CacheService
        +BusinessHoursService(externalPlaceRepository: ExternalPlaceRepository, cacheService: CacheService)
        +getBusinessHours(placeId: String): BusinessHours
        +getCurrentStatus(businessHours: BusinessHours): String
        -isCurrentlyOpen(businessHours: BusinessHours): Boolean
        -formatBusinessHours(externalHours: ExternalBusinessHours): BusinessHours
    }

    class ReviewService {
        -externalPlaceRepository: ExternalPlaceRepository
        -cacheService: CacheService
        +ReviewService(externalPlaceRepository: ExternalPlaceRepository, cacheService: CacheService)
        +getLatestReviews(placeId: String, limit: Integer): List<Review>
        -convertToReview(externalReview: ExternalReview): Review
    }

    class CacheService {
        -redisTemplate: RedisTemplate<String, Object>
        +CacheService(redisTemplate: RedisTemplate<String, Object>)
        +get(key: String, clazz: Class<T>): T
        +put(key: String, value: Object, ttl: Duration): void
        +evict(key: String): void
        +exists(key: String): Boolean
        +generateKey(prefix: String, params: Object...): String
    }
}

' ================================
' Domain Layer
' ================================
package "com.unicorn.tripgen.location.domain" {
    class Location {
        +latitude: Double
        +longitude: Double
        +address: String
        +Location(latitude: Double, longitude: Double, address: String)
        +distanceTo(other: Location): Double
        +isValid(): Boolean
        +toString(): String
    }

    class PlaceCard {
        +placeId: String
        +name: String
        +category: PlaceCategory
        +rating: Float
        +reviewCount: Integer
        +address: String
        +distance: Integer
        +travelTime: Integer
        +imageUrl: String
        +location: Location
        +PlaceCard(placeId: String, name: String, category: PlaceCategory)
        +hasValidLocation(): Boolean
        +isNearby(referenceLocation: Location, maxDistance: Integer): Boolean
    }

    class PlaceDetails {
        +placeId: String
        +name: String
        +category: PlaceCategory
        +description: String
        +rating: Float
        +reviewCount: Integer
        +priceLevel: Integer
        +images: List<String>
        +location: LocationInfo
        +businessHours: BusinessHours
        +contact: ContactInfo
        +aiRecommendation: AIRecommendation
        +reviews: List<Review>
        +PlaceDetails(placeId: String, name: String, category: PlaceCategory)
        +hasAIRecommendation(): Boolean
        +isOpen(): Boolean
        +addReview(review: Review): void
    }

    class LocationInfo {
        +latitude: Double
        +longitude: Double
        +address: String
        +searchKeyword: String
        +parkingKeyword: String
        +region: Region
        +LocationInfo(latitude: Double, longitude: Double, address: String)
        +getMapUrl(): String
        +isInternational(): Boolean
    }

    class BusinessHours {
        +isOpen: Boolean
        +currentStatus: String
        +todayHours: String
        +weeklyHours: List<DayHours>
        +BusinessHours(isOpen: Boolean, currentStatus: String, todayHours: String)
        +getTodayHours(): DayHours
        +isOpenAt(dateTime: LocalDateTime): Boolean
        +getNextOpenTime(): LocalDateTime
    }

    class DayHours {
        +day: String
        +hours: String
        +isToday: Boolean
        +DayHours(day: String, hours: String, isToday: Boolean)
        +is24Hours(): Boolean
        +isClosed(): Boolean
    }

    class ContactInfo {
        +phone: String
        +website: String
        +ContactInfo(phone: String, website: String)
        +hasPhone(): Boolean
        +hasWebsite(): Boolean
        +getFormattedPhone(): String
    }

    class AIRecommendation {
        +recommendReason: String
        +tips: AITips
        +AIRecommendation(recommendReason: String, tips: AITips)
        +hasValidTips(): Boolean
        +getEstimatedDurationInMinutes(): Integer
    }

    class AITips {
        +description: String
        +specialEvents: String
        +bestVisitTime: String
        +estimatedDuration: String
        +photoSpots: List<String>
        +practicalTips: List<String>
        +weatherTips: String
        +alternativePlaces: List<AlternativePlace>
        +AITips(description: String)
        +hasPhotoSpots(): Boolean
        +hasAlternatives(): Boolean
    }

    class AlternativePlace {
        +name: String
        +reason: String
        +distance: String
        +AlternativePlace(name: String, reason: String)
        +isNearby(): Boolean
    }

    class Review {
        +reviewId: String
        +authorName: String
        +rating: Integer
        +text: String
        +time: Long
        +relativeTimeDescription: String
        +language: String
        +Review(reviewId: String, authorName: String, rating: Integer, text: String)
        +isRecent(): Boolean
        +isPositive(): Boolean
        +getFormattedTime(): String
    }

    enum TransportMode {
        PUBLIC_TRANSPORT
        CAR
        WALKING
        +getDisplayName(): String
        +getApiValue(): String
    }

    enum PlaceCategory {
        ALL
        TOURIST
        RESTAURANT
        LAUNDRY
        +getDisplayName(): String
        +getApiValue(): String
    }

    enum SortType {
        DISTANCE
        RATING
        NAME
        REVIEWS
        +getDisplayName(): String
        +getApiValue(): String
    }

    enum Region {
        DOMESTIC
        INTERNATIONAL
        +isInternational(): Boolean
    }
}

' ================================
' DTO Layer
' ================================
package "com.unicorn.tripgen.location.dto" {
    class NearbySearchRequest {
        +origin: Location
        +transportMode: TransportMode
        +timeRange: Integer
        +category: PlaceCategory
        +sort: SortType
        +page: Integer
        +size: Integer
        +NearbySearchRequest()
        +isValid(): Boolean
        +hasValidPagination(): Boolean
    }

    class NearbySearchResponse {
        +totalCount: Integer
        +page: Integer
        +size: Integer
        +hasNext: Boolean
        +places: List<PlaceCard>
        +NearbySearchResponse(totalCount: Integer, page: Integer, size: Integer)
        +isEmpty(): Boolean
        +calculateTotalPages(): Integer
    }

    class KeywordSearchCriteria {
        +keyword: String
        +latitude: Double
        +longitude: Double
        +radius: Integer
        +category: PlaceCategory
        +sort: SortType
        +page: Integer
        +size: Integer
        +KeywordSearchCriteria(keyword: String, latitude: Double, longitude: Double)
        +isValid(): Boolean
        +getLocation(): Location
    }

    class KeywordSearchResponse {
        +keyword: String
        +totalCount: Integer
        +page: Integer
        +size: Integer
        +hasNext: Boolean
        +places: List<PlaceCard>
        +KeywordSearchResponse(keyword: String, totalCount: Integer, page: Integer, size: Integer)
        +isEmpty(): Boolean
        +getSearchSummary(): String
    }

    class AIRecommendationResponse {
        +locationId: String
        +recommendations: AIRecommendation
        +fromCache: Boolean
        +generatedAt: LocalDateTime
        +AIRecommendationResponse(locationId: String, recommendations: AIRecommendation)
        +isCached(): Boolean
        +isExpired(ttl: Duration): Boolean
    }

    class AIRecommendationRequest {
        +placeId: String
        +userProfile: UserProfile
        +AIRecommendationRequest(placeId: String, userProfile: UserProfile)
        +hasUserProfile(): Boolean
    }

    class UserProfile {
        +userId: String
        +age: Integer
        +travelStyle: String
        +interests: List<String>
        +UserProfile(userId: String)
        +isValid(): Boolean
        +getAgeGroup(): String
    }
}

' ================================
' Repository Layer
' ================================
package "com.unicorn.tripgen.location.repository" {
    interface ExternalPlaceRepository {
        +searchNearbyPlaces(location: Location, transportMode: TransportMode, timeRange: Integer, category: PlaceCategory): List<ExternalPlace>
        +searchByKeyword(keyword: String, location: Location, radius: Integer, category: PlaceCategory): List<ExternalPlace>
        +getPlaceDetails(placeId: String): ExternalPlace
        +getBusinessHours(placeId: String): ExternalBusinessHours
        +getReviews(placeId: String, limit: Integer): List<ExternalReview>
    }

    class GooglePlacesRepository {
        -apiKey: String
        -restTemplate: RestTemplate
        -rateLimiter: RateLimiter
        +GooglePlacesRepository(apiKey: String, restTemplate: RestTemplate)
        +searchNearbyPlaces(location: Location, transportMode: TransportMode, timeRange: Integer, category: PlaceCategory): List<ExternalPlace>
        +searchByKeyword(keyword: String, location: Location, radius: Integer, category: PlaceCategory): List<ExternalPlace>
        +getPlaceDetails(placeId: String): ExternalPlace
        +getBusinessHours(placeId: String): ExternalBusinessHours
        +getReviews(placeId: String, limit: Integer): List<ExternalReview>
        -buildNearbySearchUrl(location: Location, category: PlaceCategory): String
        -buildKeywordSearchUrl(keyword: String, location: Location, radius: Integer): String
        -buildPlaceDetailsUrl(placeId: String): String
        -executeRequest(url: String, responseType: Class<T>): T
        -handleRateLimit(): void
    }

    class ExternalPlace {
        +placeId: String
        +name: String
        +types: List<String>
        +rating: Float
        +userRatingsTotal: Integer
        +vicinity: String
        +geometry: ExternalGeometry
        +photos: List<ExternalPhoto>
        +priceLevel: Integer
        +openingHours: ExternalOpeningHours
        +ExternalPlace()
        +getMainType(): String
        +hasPhotos(): Boolean
    }

    class ExternalGeometry {
        +location: ExternalLocation
        +viewport: ExternalViewport
        +ExternalGeometry()
    }

    class ExternalLocation {
        +lat: Double
        +lng: Double
        +ExternalLocation()
        +toDomainLocation(): Location
    }

    class ExternalViewport {
        +northeast: ExternalLocation
        +southwest: ExternalLocation
        +ExternalViewport()
    }

    class ExternalPhoto {
        +height: Integer
        +width: Integer
        +photoReference: String
        +ExternalPhoto()
        +getPhotoUrl(apiKey: String, maxWidth: Integer): String
    }

    class ExternalOpeningHours {
        +openNow: Boolean
        +periods: List<ExternalPeriod>
        +weekdayDescriptions: List<String>
        +ExternalOpeningHours()
        +isOpen(): Boolean
    }

    class ExternalPeriod {
        +open: ExternalTime
        +close: ExternalTime
        +ExternalPeriod()
    }

    class ExternalTime {
        +day: Integer
        +time: String
        +ExternalTime()
        +toLocalTime(): LocalTime
    }

    class ExternalBusinessHours {
        +isOpen: Boolean
        +currentStatus: String
        +todayHours: String
        +weeklyHours: List<ExternalDayHours>
        +ExternalBusinessHours()
        +toDomainBusinessHours(): BusinessHours
    }

    class ExternalDayHours {
        +day: String
        +hours: String
        +isToday: Boolean
        +ExternalDayHours()
        +toDomainDayHours(): DayHours
    }

    class ExternalReview {
        +authorName: String
        +rating: Integer
        +relativeTimeDescription: String
        +text: String
        +time: Long
        +language: String
        +ExternalReview()
        +toDomainReview(): Review
    }
}

' ================================
' Client Layer
' ================================
package "com.unicorn.tripgen.location.client" {
    interface AIServiceClient {
        +generateRecommendations(request: AIRecommendationRequest): CompletableFuture<AIRecommendation>
        +isServiceAvailable(): Boolean
    }

    class AIServiceClientImpl {
        -aiServiceUrl: String
        -webClient: WebClient
        -circuitBreaker: CircuitBreaker
        +AIServiceClientImpl(aiServiceUrl: String, webClient: WebClient)
        +generateRecommendations(request: AIRecommendationRequest): CompletableFuture<AIRecommendation>
        +isServiceAvailable(): Boolean
        -buildRecommendationRequest(request: AIRecommendationRequest): String
        -handleTimeout(): AIRecommendation
        -handleCircuitBreakerOpen(): AIRecommendation
    }

    interface TripServiceClient {
        +getUserProfile(tripId: String): UserProfile
        +isServiceAvailable(): Boolean
    }

    class TripServiceClientImpl {
        -tripServiceUrl: String
        -webClient: WebClient
        -circuitBreaker: CircuitBreaker
        +TripServiceClientImpl(tripServiceUrl: String, webClient: WebClient)
        +getUserProfile(tripId: String): UserProfile
        +isServiceAvailable(): Boolean
        -handleTimeout(): UserProfile
        -getDefaultUserProfile(): UserProfile
    }
}

' ================================
' Configuration Layer
' ================================
package "com.unicorn.tripgen.location.config" {
    class LocationConfig {
        +googlePlacesApiKey: String
        +aiServiceUrl: String
        +tripServiceUrl: String
        +cacheConfig: CacheConfiguration
        +LocationConfig()
        +googlePlacesRepository(): GooglePlacesRepository
        +aiServiceClient(): AIServiceClient
        +tripServiceClient(): TripServiceClient
        +restTemplate(): RestTemplate
        +webClient(): WebClient
    }

    class CacheConfiguration {
        +defaultTtl: Duration
        +placeDetailsTtl: Duration
        +businessHoursTtl: Duration
        +aiRecommendationTtl: Duration
        +CacheConfiguration()
        +getCacheTtl(cacheType: String): Duration
    }

    class RateLimitConfig {
        +googlePlacesRateLimit: Integer
        +aiServiceRateLimit: Integer
        +RateLimitConfig()
        +googlePlacesRateLimiter(): RateLimiter
        +aiServiceRateLimiter(): RateLimiter
    }

    class CircuitBreakerConfig {
        +failureRateThreshold: Float
        +waitDurationInOpenState: Duration
        +CircuitBreakerConfig()
        +aiServiceCircuitBreaker(): CircuitBreaker
        +tripServiceCircuitBreaker(): CircuitBreaker
    }
}

' ================================
' Common Components (참조만)
' ================================
package "Common Components" {
    class ApiResponse<T>
    abstract class BaseException
    class BusinessException
    class ValidationException
    class ResourceNotFoundException
    abstract class BaseTimeEntity
    abstract class BaseEntity
    class DateTimeUtil
    class ValidationUtil
    class SecurityUtil
    interface CacheConfig
    class RedisCacheConfig
}

' ================================
' Relationships
' ================================

' Controller Dependencies
LocationController --> LocationService

' Service Dependencies  
LocationService <|.. LocationServiceImpl
LocationServiceImpl --> PlaceSearchService
LocationServiceImpl --> PlaceDetailsService
LocationServiceImpl --> AIRecommendationService
LocationServiceImpl --> BusinessHoursService
LocationServiceImpl --> CacheService

PlaceSearchService --> ExternalPlaceRepository
PlaceSearchService --> CacheService

PlaceDetailsService --> ExternalPlaceRepository
PlaceDetailsService --> ReviewService
PlaceDetailsService --> CacheService

AIRecommendationService --> AIServiceClient
AIRecommendationService --> CacheService
AIRecommendationService --> TripServiceClient

BusinessHoursService --> ExternalPlaceRepository
BusinessHoursService --> CacheService

ReviewService --> ExternalPlaceRepository
ReviewService --> CacheService

' Repository Dependencies
ExternalPlaceRepository <|.. GooglePlacesRepository

' Client Dependencies
AIServiceClient <|.. AIServiceClientImpl
TripServiceClient <|.. TripServiceClientImpl

' Domain Relationships
PlaceCard --> Location
PlaceCard --> PlaceCategory
PlaceDetails --> LocationInfo
PlaceDetails --> BusinessHours
PlaceDetails --> ContactInfo
PlaceDetails --> AIRecommendation
PlaceDetails --> Review
PlaceDetails --> PlaceCategory
BusinessHours --> DayHours
AIRecommendation --> AITips
AITips --> AlternativePlace
LocationInfo --> Region

' DTO Relationships
NearbySearchRequest --> Location
NearbySearchRequest --> TransportMode
NearbySearchRequest --> PlaceCategory
NearbySearchRequest --> SortType
NearbySearchResponse --> PlaceCard
KeywordSearchCriteria --> PlaceCategory
KeywordSearchCriteria --> SortType
KeywordSearchResponse --> PlaceCard
AIRecommendationResponse --> AIRecommendation
AIRecommendationRequest --> UserProfile

' External Entity Relationships
ExternalPlace --> ExternalGeometry
ExternalPlace --> ExternalPhoto
ExternalPlace --> ExternalOpeningHours
ExternalGeometry --> ExternalLocation
ExternalGeometry --> ExternalViewport
ExternalViewport --> ExternalLocation
ExternalOpeningHours --> ExternalPeriod
ExternalPeriod --> ExternalTime
ExternalBusinessHours --> ExternalDayHours

' Configuration Dependencies
LocationConfig --> CacheConfiguration
LocationConfig --> GooglePlacesRepository
LocationConfig --> AIServiceClient
LocationConfig --> TripServiceClient

' Common Component Dependencies
LocationServiceImpl --> ApiResponse
LocationController --> ApiResponse
LocationServiceImpl --> BusinessException
LocationServiceImpl --> ValidationException
ExternalPlace --> BaseEntity
Review --> BaseTimeEntity
LocationConfig --> CacheConfig
CacheConfiguration --> RedisCacheConfig

@enduml