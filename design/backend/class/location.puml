@startuml
!theme mono

title 장소 서비스(Location Service) 클래스 다이어그램 - Clean Architecture

' 공통 인터페이스 정의 (common-base.txt에서 필요한 부분만)
interface Identifiable<ID> {
    + getId(): ID
}

interface Auditable {
    + getCreatedAt(): LocalDateTime
    + getUpdatedAt(): LocalDateTime
    + getCreatedBy(): String
    + getUpdatedBy(): String
}

interface Cacheable {
    + getCacheKey(): String
    + getCacheTtl(): Duration
}

abstract class BaseConfig {
    # environment: String
    # applicationName: String
    + getEnvironment(): String
    + isProduction(): Boolean
    + isDevelopment(): Boolean
}

package "com.unicorn.tripgen.location" {
    
    ' ===== location-biz 모듈 =====
    package "location-biz" {
        
        ' ----- Domain 레이어 -----
        package "domain" {
            class Place {
                - id: String
                - name: String
                - description: String
                - category: PlaceCategory
                - subCategories: List<String>
                - location: Location
                - rating: Double
                - reviewCount: Integer
                - priceLevel: PriceLevel
                - tags: Set<String>
                - thumbnailUrl: String
                - lastUpdated: LocalDateTime
                + Place()
                + isOpenNow(): Boolean
                + calculateDistance(from: Location): Double
                + hasCategory(category: PlaceCategory): Boolean
            }
            
            class Location {
                - latitude: Double
                - longitude: Double
                - address: String
                - streetAddress: String
                - postalCode: String
                - country: String
                - region: String
                - district: String
                - neighborhood: String
                + Location()
                + distanceTo(other: Location): Double
                + isValid(): Boolean
                + toCoordinateString(): String
            }
            
            class PlaceDetails extends Place {
                - contact: Contact
                - businessHours: BusinessHours
                - amenities: List<String>
                - photos: List<Photo>
                - reviews: List<Review>
                - popularTimes: List<PopularTime>
                - website: String
                - reservationUrl: String
                + PlaceDetails()
                + getCurrentPopularity(): Integer
                + getAverageWaitTime(): Integer
            }
            
            class Contact {
                - phone: String
                - email: String
                - socialMedia: Map<String, String>
                + Contact()
                + hasContactInfo(): Boolean
            }
            
            class BusinessHours {
                - regularHours: Map<DayOfWeek, TimeSlot>
                - specialHours: List<SpecialHour>
                - timezone: String
                - is24Hours: Boolean
                + BusinessHours()
                + isOpenAt(dateTime: LocalDateTime): Boolean
                + getHoursForDay(day: DayOfWeek): TimeSlot
                + getTodayHours(): TimeSlot
            }
            
            class TimeSlot {
                - open: LocalTime
                - close: LocalTime
                - breakStart: LocalTime
                - breakEnd: LocalTime
                + TimeSlot()
                + isWithinOperatingHours(time: LocalTime): Boolean
                + getDuration(): Duration
            }
            
            class Review {
                - id: String
                - author: String
                - rating: Double
                - text: String
                - language: String
                - helpfulCount: Integer
                - photos: List<String>
                - createdAt: LocalDateTime
                + Review()
                + isRecent(days: Integer): Boolean
            }
            
            class Photo {
                - url: String
                - thumbnailUrl: String
                - caption: String
                - width: Integer
                - height: Integer
                - uploadedAt: LocalDateTime
                + Photo()
                + getAspectRatio(): Double
            }
            
            class PopularTime {
                - dayOfWeek: DayOfWeek
                - hour: Integer
                - popularity: Integer
                - waitTime: Integer
                + PopularTime()
                + isBusy(): Boolean
            }
            
            class RegionInfo {
                - regionCode: String
                - regionName: String
                - characteristics: List<String>
                - popularCategories: List<String>
                - seasonalHighlights: Map<Season, List<String>>
                + RegionInfo()
                + getSeasonalRecommendations(season: Season): List<String>
            }
            
            enum PlaceCategory {
                RESTAURANT
                CAFE
                TOURIST_ATTRACTION
                ACCOMMODATION
                SHOPPING
                ENTERTAINMENT
                TRANSPORTATION
                HOSPITAL
                PHARMACY
                BANK
                CONVENIENCE_STORE
            }
            
            enum PriceLevel {
                BUDGET(1)
                MODERATE(2)
                EXPENSIVE(3)
                LUXURY(4)
                - level: Integer
                + getLevel(): Integer
            }
            
            enum TransportMode {
                WALKING
                DRIVING
                TRANSIT
                CYCLING
                + getDefaultRadius(): Integer
                + getMaxTravelTime(): Integer
            }
            
            enum Season {
                SPRING
                SUMMER
                AUTUMN
                WINTER
            }
        }
        
        ' ----- UseCase 레이어 (Application) -----
        package "usecase" {
            ' Input Ports
            interface SearchNearbyPlacesUseCase {
                + execute(request: NearbySearchRequest): PageResponse<PlaceSummaryDto>
            }
            
            interface GetPlaceDetailsUseCase {
                + execute(placeId: String, options: PlaceDetailOptions): PlaceDetailsDto
            }
            
            interface ValidatePlaceInfoUseCase {
                + execute(placeId: String, request: ValidationRequest): ValidationResponse
            }
            
            interface GetRegionalRecommendationsUseCase {
                + execute(request: RegionalRecommendationRequest): RecommendationResponse
            }
            
            interface SearchMultilingualPlacesUseCase {
                + execute(request: MultilingualSearchRequest): MultilingualSearchResponse
            }
            
            ' Output Ports
            interface PlaceRepository {
                + findNearby(criteria: SearchCriteria): List<Place>
                + findById(placeId: String): Optional<Place>
                + findByIds(placeIds: List<String>): List<Place>
                + save(place: Place): Place
                + saveAll(places: List<Place>): List<Place>
            }
            
            interface PlaceSearchPort {
                + searchNearby(location: Location, radius: Integer, categories: List<PlaceCategory>): List<Place>
                + searchByText(query: String, location: Location, language: String): List<Place>
                + getPlaceDetails(placeId: String, language: String): PlaceDetails
            }
            
            interface PlaceValidationPort {
                + validateBusinessHours(placeId: String): BusinessHoursValidation
                + validateContactInfo(placeId: String): ContactValidation
                + checkOperationalStatus(placeId: String): OperationalStatus
            }
            
            interface TranslationPort {
                + detectLanguage(text: String): String
                + translate(text: String, targetLanguage: String): TranslatedText
                + translateBatch(texts: List<String>, targetLanguage: String): List<TranslatedText>
            }
            
            interface RegionDataPort {
                + getRegionInfo(regionCode: String): RegionInfo
                + getPopularPlaces(regionCode: String, season: Season): List<Place>
            }
        }
        
        ' ----- Service 레이어 -----
        package "service" {
            class PlaceSearchService implements SearchNearbyPlacesUseCase, SearchMultilingualPlacesUseCase {
                - placeSearchPort: PlaceSearchPort
                - placeRepository: PlaceRepository
                - translationPort: TranslationPort
                - cacheService: PlaceCacheService
                + execute(request: NearbySearchRequest): PageResponse<PlaceSummaryDto>
                + execute(request: MultilingualSearchRequest): MultilingualSearchResponse
                - applyFilters(places: List<Place>, filters: SearchFilters): List<Place>
                - calculateTravelTimes(places: List<Place>, origin: Location, mode: TransportMode): void
                - sortPlaces(places: List<Place>, sortBy: SortCriteria): List<Place>
            }
            
            class PlaceDetailService implements GetPlaceDetailsUseCase {
                - placeSearchPort: PlaceSearchPort
                - placeRepository: PlaceRepository
                - cacheService: PlaceCacheService
                - reviewAnalyzer: ReviewAnalyzer
                + execute(placeId: String, options: PlaceDetailOptions): PlaceDetailsDto
                - enrichWithReviews(placeDetails: PlaceDetails): void
                - generateReviewSummary(reviews: List<Review>): ReviewSummary
            }
            
            class PlaceValidationService implements ValidatePlaceInfoUseCase {
                - placeValidationPort: PlaceValidationPort
                - placeRepository: PlaceRepository
                - validationRules: List<ValidationRule>
                + execute(placeId: String, request: ValidationRequest): ValidationResponse
                - calculateFreshnessScore(place: Place, validations: ValidationResults): Integer
                - generateWarnings(validations: ValidationResults): List<String>
            }
            
            class RegionalRecommendationService implements GetRegionalRecommendationsUseCase {
                - regionDataPort: RegionDataPort
                - placeRepository: PlaceRepository
                - recommendationEngine: RecommendationEngine
                - cacheService: PlaceCacheService
                + execute(request: RegionalRecommendationRequest): RecommendationResponse
                - scorePlace(place: Place, criteria: RecommendationCriteria): Double
                - generateReasons(place: Place, regionInfo: RegionInfo): List<String>
            }
            
            class PlaceCacheService {
                - cacheManager: CacheManager
                - cacheTtl: Map<CacheType, Duration>
                + getPlace(placeId: String): Optional<Place>
                + putPlace(place: Place): void
                + getNearbyPlaces(cacheKey: String): Optional<List<Place>>
                + putNearbyPlaces(cacheKey: String, places: List<Place>): void
                + evictPlace(placeId: String): void
                + buildNearbySearchKey(criteria: SearchCriteria): String
            }
            
            class ReviewAnalyzer {
                - sentimentAnalyzer: SentimentAnalyzer
                - keywordExtractor: KeywordExtractor
                + analyzeReviews(reviews: List<Review>): ReviewAnalysis
                + extractHighlights(reviews: List<Review>): List<String>
                + calculateRatingDistribution(reviews: List<Review>): Map<Integer, Integer>
            }
            
            class RecommendationEngine {
                - scoringWeights: Map<ScoringFactor, Double>
                + recommend(places: List<Place>, criteria: RecommendationCriteria): List<RecommendedPlace>
                - calculateRecommendationScore(place: Place, criteria: RecommendationCriteria): Double
                - applyUserPreferences(score: Double, place: Place, preferences: List<String>): Double
            }
        }
        
        ' ----- DTO 레이어 -----
        package "dto" {
            class NearbySearchRequest {
                - latitude: Double
                - longitude: Double
                - radius: Integer
                - categories: List<PlaceCategory>
                - transportMode: TransportMode
                - maxTravelTime: Integer
                - sortBy: SortCriteria
                - page: Integer
                - size: Integer
                - language: String
                + NearbySearchRequest()
                + toSearchCriteria(): SearchCriteria
                + validate(): void
            }
            
            class PlaceSummaryDto {
                - id: String
                - name: String
                - description: String
                - category: String
                - subCategories: List<String>
                - location: LocationDto
                - distance: Double
                - travelTime: TravelTimeDto
                - rating: Double
                - reviewCount: Integer
                - priceLevel: Integer
                - isOpenNow: Boolean
                - thumbnailUrl: String
                - tags: List<String>
                + PlaceSummaryDto()
                + static fromDomain(place: Place): PlaceSummaryDto
            }
            
            class PlaceDetailsDto extends PlaceSummaryDto {
                - contact: ContactDto
                - businessHours: BusinessHoursDto
                - reviewSummary: ReviewSummaryDto
                - priceInfo: PriceInfoDto
                - amenities: List<String>
                - photos: List<PhotoDto>
                - reviews: List<ReviewDto>
                - popularTimes: List<PopularTimeDto>
                - website: String
                - reservationUrl: String
                - lastUpdated: LocalDateTime
                + PlaceDetailsDto()
                + static fromDomain(placeDetails: PlaceDetails): PlaceDetailsDto
            }
            
            class LocationDto {
                - latitude: Double
                - longitude: Double
                - address: String
                - streetAddress: String
                - postalCode: String
                - country: String
                - region: String
                - district: String
                - neighborhood: String
                + LocationDto()
                + toDomain(): Location
            }
            
            class ValidationRequest {
                - validateBusinessHours: Boolean
                - validateContactInfo: Boolean
                - validateReviews: Boolean
                - validatePhotos: Boolean
                - timestamp: LocalDateTime
                + ValidationRequest()
            }
            
            class ValidationResponse {
                - placeId: String
                - validationTimestamp: LocalDateTime
                - results: ValidationResults
                - warnings: List<String>
                - dataSource: DataSource
                + ValidationResponse()
            }
            
            class RegionalRecommendationRequest {
                - regionCode: String
                - userPreferences: List<String>
                - timeOfDay: TimeOfDay
                - season: Season
                - weather: Weather
                - limit: Integer
                - language: String
                + RegionalRecommendationRequest()
                + toRecommendationCriteria(): RecommendationCriteria
            }
            
            class RecommendationResponse {
                - recommendations: List<RecommendedPlaceDto>
                - regionInfo: RegionInfoDto
                - recommendationMetadata: RecommendationMetadata
                + RecommendationResponse()
            }
            
            class MultilingualSearchRequest {
                - query: String
                - sourceLanguage: String
                - targetLanguages: List<String>
                - location: String
                - radius: Integer
                - page: Integer
                - size: Integer
                + MultilingualSearchRequest()
                + parseLocation(): Location
            }
            
            class MultilingualSearchResponse {
                - results: List<MultilingualPlaceResult>
                - pagination: Pagination
                - detectedLanguage: String
                - translationWarnings: List<String>
                + MultilingualSearchResponse()
            }
            
            class SearchCriteria {
                - location: Location
                - radius: Integer
                - categories: List<PlaceCategory>
                - transportMode: TransportMode
                - maxTravelTime: Integer
                - sortBy: SortCriteria
                - language: String
                + SearchCriteria()
                + getCacheKey(): String
            }
            
            enum SortCriteria {
                DISTANCE
                RATING
                POPULARITY
                RELEVANCE
            }
            
            enum TimeOfDay {
                MORNING
                AFTERNOON
                EVENING
                NIGHT
            }
            
            enum Weather {
                SUNNY
                CLOUDY
                RAINY
                SNOWY
            }
            
            enum DataSource {
                KAKAO
                GOOGLE
                CACHED
                MIXED
            }
        }
    }
    
    ' ===== location-infra 모듈 =====
    package "location-infra" {
        
        ' ----- Controller 레이어 -----
        package "controller" {
            class LocationController {
                - searchNearbyPlacesUseCase: SearchNearbyPlacesUseCase
                - getPlaceDetailsUseCase: GetPlaceDetailsUseCase
                - validatePlaceInfoUseCase: ValidatePlaceInfoUseCase
                - getRegionalRecommendationsUseCase: GetRegionalRecommendationsUseCase
                - searchMultilingualPlacesUseCase: SearchMultilingualPlacesUseCase
                + searchNearbyPlaces(request: NearbySearchRequest): ResponseEntity<ApiResponse<PageResponse<PlaceSummaryDto>>>
                + getPlaceDetails(placeId: String, includeReviews: Boolean, includePhotos: Boolean, language: String): ResponseEntity<ApiResponse<PlaceDetailsDto>>
                + validatePlaceInfo(placeId: String, request: ValidationRequest): ResponseEntity<ApiResponse<ValidationResponse>>
                + getRegionalRecommendations(request: RegionalRecommendationRequest): ResponseEntity<ApiResponse<RecommendationResponse>>
                + searchMultilingual(request: MultilingualSearchRequest): ResponseEntity<ApiResponse<MultilingualSearchResponse>>
                - handleException(ex: Exception): ResponseEntity<ApiResponse<Void>>
            }
            
            class LocationControllerAdvice {
                + handleResourceNotFound(ex: ResourceNotFoundException): ResponseEntity<ErrorResponse>
                + handleValidationException(ex: ValidationException): ResponseEntity<ErrorResponse>
                + handleExternalApiException(ex: ExternalApiException): ResponseEntity<ErrorResponse>
                + handleGeneralException(ex: Exception): ResponseEntity<ErrorResponse>
            }
        }
        
        ' ----- Gateway 레이어 (Adapters) -----
        package "gateway" {
            ' MCP Adapters
            class McpPlaceSearchAdapter implements PlaceSearchPort {
                - mcpClient: McpClient
                - placeMapper: PlaceMapper
                - circuitBreaker: CircuitBreaker
                - retryTemplate: RetryTemplate
                + searchNearby(location: Location, radius: Integer, categories: List<PlaceCategory>): List<Place>
                + searchByText(query: String, location: Location, language: String): List<Place>
                + getPlaceDetails(placeId: String, language: String): PlaceDetails
                - withCircuitBreaker(supplier: Supplier<T>): T
                - handleMcpError(error: McpError): void
            }
            
            class McpPlaceValidationAdapter implements PlaceValidationPort {
                - mcpClient: McpClient
                - validationMapper: ValidationMapper
                - circuitBreaker: CircuitBreaker
                + validateBusinessHours(placeId: String): BusinessHoursValidation
                + validateContactInfo(placeId: String): ContactValidation
                + checkOperationalStatus(placeId: String): OperationalStatus
                - callWithFallback(operation: Supplier<T>, fallback: T): T
            }
            
            class McpTranslationAdapter implements TranslationPort {
                - mcpClient: McpClient
                - translationCache: TranslationCache
                + detectLanguage(text: String): String
                + translate(text: String, targetLanguage: String): TranslatedText
                + translateBatch(texts: List<String>, targetLanguage: String): List<TranslatedText>
                - getCachedTranslation(text: String, targetLanguage: String): Optional<String>
            }
            
            class McpRegionDataAdapter implements RegionDataPort {
                - mcpClient: McpClient
                - regionMapper: RegionMapper
                - cacheManager: CacheManager
                + getRegionInfo(regionCode: String): RegionInfo
                + getPopularPlaces(regionCode: String, season: Season): List<Place>
                - cacheRegionData(regionCode: String, data: RegionInfo): void
            }
            
            ' Repository Implementations
            class PlaceRepositoryImpl implements PlaceRepository {
                - jpaRepository: PlaceJpaRepository
                - placeEntityMapper: PlaceEntityMapper
                - cacheManager: CacheManager
                + findNearby(criteria: SearchCriteria): List<Place>
                + findById(placeId: String): Optional<Place>
                + findByIds(placeIds: List<String>): List<Place>
                + save(place: Place): Place
                + saveAll(places: List<Place>): List<Place>
                - applyCacheAside(key: String, supplier: Supplier<T>): T
            }
            
            ' MCP Client
            class McpClient {
                - restTemplate: RestTemplate
                - apiConfig: McpApiConfig
                - requestBuilder: McpRequestBuilder
                - responseParser: McpResponseParser
                + searchPlaces(request: McpSearchRequest): McpSearchResponse
                + getPlaceDetails(placeId: String): McpPlaceDetails
                + validatePlace(placeId: String, options: McpValidationOptions): McpValidationResult
                + translateText(request: McpTranslateRequest): McpTranslateResponse
                + getRegionData(regionCode: String): McpRegionData
                - executeRequest(request: HttpEntity<T>, url: String, responseType: Class<R>): R
            }
            
            ' Circuit Breaker
            class CircuitBreaker {
                - state: CircuitBreakerState
                - failureThreshold: Integer
                - timeout: Duration
                - halfOpenRequests: Integer
                + execute(supplier: Supplier<T>): T
                + executeWithFallback(supplier: Supplier<T>, fallback: T): T
                - recordSuccess(): void
                - recordFailure(): void
                - shouldAllowRequest(): Boolean
            }
            
            enum CircuitBreakerState {
                CLOSED
                OPEN
                HALF_OPEN
            }
        }
        
        ' ----- Entity 레이어 -----
        package "entity" {
            class PlaceEntity implements Auditable, Identifiable<String> {
                - id: String
                - name: String
                - description: String
                - category: String
                - subCategories: String
                - location: String  // GEOGRAPHY(POINT)
                - latitude: Double
                - longitude: Double
                - address: String
                - streetAddress: String
                - postalCode: String
                - country: String
                - region: String
                - district: String
                - neighborhood: String
                - rating: Double
                - reviewCount: Integer
                - priceLevel: Integer
                - tags: String
                - thumbnailUrl: String
                - isActive: Boolean
                - dataSource: String
                - externalId: String
                - createdAt: LocalDateTime
                - updatedAt: LocalDateTime
                - lastValidated: LocalDateTime
                - version: Integer
                + PlaceEntity()
            }
            
            class PlaceDetailsEntity {
                - placeId: String @Id
                - phone: String
                - email: String
                - socialMedia: String  // JSONB
                - website: String
                - reservationUrl: String
                - amenities: String  // JSONB
                - photos: String  // JSONB
                - popularTimes: String  // JSONB
                - createdAt: LocalDateTime
                - updatedAt: LocalDateTime
                + PlaceDetailsEntity()
            }
            
            class BusinessHoursEntity {
                - id: Long @Id @GeneratedValue
                - placeId: String
                - dayOfWeek: Integer
                - openTime: LocalTime
                - closeTime: LocalTime
                - breakStart: LocalTime
                - breakEnd: LocalTime
                - is24Hours: Boolean
                - isClosed: Boolean
                - createdAt: LocalDateTime
                - updatedAt: LocalDateTime
                + BusinessHoursEntity()
            }
            
            class SpecialHoursEntity {
                - id: Long @Id @GeneratedValue
                - placeId: String
                - date: LocalDate
                - openTime: LocalTime
                - closeTime: LocalTime
                - isClosed: Boolean
                - reason: String
                - createdAt: LocalDateTime
                + SpecialHoursEntity()
            }
            
            class ReviewEntity {
                - id: Long @Id @GeneratedValue
                - placeId: String
                - externalId: String
                - author: String
                - rating: Double
                - text: String
                - language: String
                - helpfulCount: Integer
                - photos: String  // JSONB
                - dataSource: String
                - createdAt: LocalDateTime
                - importedAt: LocalDateTime
                + ReviewEntity()
            }
            
            class RegionInfoEntity {
                - regionCode: String @Id
                - regionName: String
                - parentCode: String
                - characteristics: String  // JSONB
                - popularCategories: String  // JSONB
                - seasonalHighlights: String  // JSONB
                - timezone: String
                - createdAt: LocalDateTime
                - updatedAt: LocalDateTime
                + RegionInfoEntity()
            }
            
            class PlaceSearchCacheEntity {
                - cacheKey: String @Id
                - searchCriteria: String  // JSONB
                - resultIds: String  // JSONB
                - resultCount: Integer
                - createdAt: LocalDateTime
                - expiresAt: LocalDateTime
                + PlaceSearchCacheEntity()
            }
            
            class TranslationCacheEntity {
                - id: Long @Id @GeneratedValue
                - originalText: String
                - sourceLanguage: String
                - targetLanguage: String
                - translatedText: String
                - createdAt: LocalDateTime
                - expiresAt: LocalDateTime
                + TranslationCacheEntity()
            }
            
            interface PlaceJpaRepository extends JpaRepository<PlaceEntity, String> {
                + findByLocationNear(latitude: Double, longitude: Double, distance: Double): List<PlaceEntity>
                + findByCategoryIn(categories: List<String>): List<PlaceEntity>
                + findByIdIn(ids: List<String>): List<PlaceEntity>
            }
            
            interface PlaceDetailsJpaRepository extends JpaRepository<PlaceDetailsEntity, String> {
                + findByPlaceId(placeId: String): Optional<PlaceDetailsEntity>
            }
            
            interface BusinessHoursJpaRepository extends JpaRepository<BusinessHoursEntity, Long> {
                + findByPlaceId(placeId: String): List<BusinessHoursEntity>
                + findByPlaceIdAndDayOfWeek(placeId: String, dayOfWeek: Integer): Optional<BusinessHoursEntity>
            }
            
            interface SpecialHoursJpaRepository extends JpaRepository<SpecialHoursEntity, Long> {
                + findByPlaceIdAndDate(placeId: String, date: LocalDate): Optional<SpecialHoursEntity>
                + findByPlaceIdAndDateBetween(placeId: String, start: LocalDate, end: LocalDate): List<SpecialHoursEntity>
            }
            
            interface ReviewJpaRepository extends JpaRepository<ReviewEntity, Long> {
                + findByPlaceId(placeId: String): List<ReviewEntity>
                + findByPlaceIdOrderByCreatedAtDesc(placeId: String): List<ReviewEntity>
                + findByDataSourceAndExternalId(dataSource: String, externalId: String): Optional<ReviewEntity>
            }
            
            interface RegionInfoJpaRepository extends JpaRepository<RegionInfoEntity, String> {
                + findByParentCode(parentCode: String): List<RegionInfoEntity>
            }
            
            interface PlaceSearchCacheJpaRepository extends JpaRepository<PlaceSearchCacheEntity, String> {
                + deleteByExpiresAtBefore(timestamp: LocalDateTime): void
            }
            
            interface TranslationCacheJpaRepository extends JpaRepository<TranslationCacheEntity, Long> {
                + findByOriginalTextAndSourceLanguageAndTargetLanguage(originalText: String, sourceLanguage: String, targetLanguage: String): Optional<TranslationCacheEntity>
                + deleteByExpiresAtBefore(timestamp: LocalDateTime): void
            }
        }
        
        ' ----- Config 레이어 -----
        package "config" {
            class LocationServiceConfig extends BaseConfig {
                - mcpApiUrl: String
                - mcpApiKey: String
                - cacheEnabled: Boolean
                - circuitBreakerEnabled: Boolean
                + LocationServiceConfig()
                + mcpClient(): McpClient
                + circuitBreaker(): CircuitBreaker
                + cacheManager(): CacheManager
            }
            
            class McpApiConfig {
                - baseUrl: String
                - apiKey: String
                - timeout: Duration
                - maxRetries: Integer
                + McpApiConfig()
                + getSearchEndpoint(): String
                + getDetailsEndpoint(): String
                + getValidationEndpoint(): String
            }
            
            class CacheConfiguration {
                - placesCacheTtl: Duration
                - searchCacheTtl: Duration
                - regionCacheTtl: Duration
                + CacheConfiguration()
                + placesCacheConfig(): CacheConfig
                + searchCacheConfig(): CacheConfig
                + regionCacheConfig(): CacheConfig
            }
        }
    }
}

' 관계 정의
' UseCase 구현
PlaceSearchService ..|> SearchNearbyPlacesUseCase
PlaceSearchService ..|> SearchMultilingualPlacesUseCase
PlaceDetailService ..|> GetPlaceDetailsUseCase
PlaceValidationService ..|> ValidatePlaceInfoUseCase
RegionalRecommendationService ..|> GetRegionalRecommendationsUseCase

' Port 구현
McpPlaceSearchAdapter ..|> PlaceSearchPort
McpPlaceValidationAdapter ..|> PlaceValidationPort
McpTranslationAdapter ..|> TranslationPort
McpRegionDataAdapter ..|> RegionDataPort
PlaceRepositoryImpl ..|> PlaceRepository

' 의존관계
LocationController --> SearchNearbyPlacesUseCase
LocationController --> GetPlaceDetailsUseCase
LocationController --> ValidatePlaceInfoUseCase
LocationController --> GetRegionalRecommendationsUseCase
LocationController --> SearchMultilingualPlacesUseCase

PlaceSearchService --> PlaceSearchPort
PlaceSearchService --> PlaceRepository
PlaceSearchService --> TranslationPort
PlaceSearchService --> PlaceCacheService

PlaceDetailService --> PlaceSearchPort
PlaceDetailService --> PlaceRepository
PlaceDetailService --> PlaceCacheService
PlaceDetailService --> ReviewAnalyzer

PlaceValidationService --> PlaceValidationPort
PlaceValidationService --> PlaceRepository

RegionalRecommendationService --> RegionDataPort
RegionalRecommendationService --> PlaceRepository
RegionalRecommendationService --> RecommendationEngine
RegionalRecommendationService --> PlaceCacheService

' Gateway 의존관계
McpPlaceSearchAdapter --> McpClient
McpPlaceSearchAdapter --> CircuitBreaker
McpPlaceValidationAdapter --> McpClient
McpPlaceValidationAdapter --> CircuitBreaker
McpTranslationAdapter --> McpClient
McpRegionDataAdapter --> McpClient

PlaceRepositoryImpl --> PlaceJpaRepository

' 도메인 관계
PlaceDetails --|> Place
Place --> Location
Place --> PlaceCategory
Place --> PriceLevel
PlaceDetails --> Contact
PlaceDetails --> BusinessHours
PlaceDetails --> Review
PlaceDetails --> Photo
PlaceDetails --> PopularTime
BusinessHours --> TimeSlot

' DTO 관계
PlaceDetailsDto --|> PlaceSummaryDto
PlaceSummaryDto --> LocationDto
ValidationResponse --> ValidationResults
RecommendationResponse --> RecommendedPlaceDto
RecommendationResponse --> RegionInfoDto
MultilingualSearchResponse --> MultilingualPlaceResult

' Entity 관계
PlaceDetailsEntity }o--|| PlaceEntity : "extends details"
BusinessHoursEntity }o--|| PlaceEntity : "belongs to"
SpecialHoursEntity }o--|| PlaceEntity : "belongs to"
ReviewEntity }o--|| PlaceEntity : "belongs to"
RegionInfoEntity ||--o{ RegionInfoEntity : "parent-child"

' Repository relationships
PlaceJpaRepository --> PlaceEntity
PlaceDetailsJpaRepository --> PlaceDetailsEntity
BusinessHoursJpaRepository --> BusinessHoursEntity
SpecialHoursJpaRepository --> SpecialHoursEntity
ReviewJpaRepository --> ReviewEntity
RegionInfoJpaRepository --> RegionInfoEntity
PlaceSearchCacheJpaRepository --> PlaceSearchCacheEntity
TranslationCacheJpaRepository --> TranslationCacheEntity

@enduml