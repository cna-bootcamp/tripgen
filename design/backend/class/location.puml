@startuml
!theme mono

title Location Service - Layered Architecture (Detailed)

' ===== Controller Layer =====
package "com.unicorn.tripgen.location.controller" {
    class LocationController {
        -locationService: LocationService
        -cacheService: CacheService
        +LocationController(locationService: LocationService, cacheService: CacheService)
        +searchNearbyPlaces(request: NearbySearchRequest): ApiResponse<NearbySearchResponse>
        +searchByKeyword(keyword: String, latitude: Double, longitude: Double, radius: Integer, category: String, sort: String, page: Integer, size: Integer): ApiResponse<KeywordSearchResponse>
        +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): ApiResponse<PlaceDetails>
        +getPlaceRecommendations(placeId: String, tripId: String): ApiResponse<Object>
        +getBusinessHours(placeId: String): ApiResponse<BusinessHours>
        -buildPlaceDetailsResponse(place: Place, aiRecommendation: AIRecommendation, reviews: List<Review>): PlaceDetails
        -validateSearchRequest(request: NearbySearchRequest): void
        -buildPageResponse(places: List<Place>, totalCount: Long, currentPage: Integer, size: Integer): PageResponse<PlaceCard>
    }
}

' ===== Service Layer =====
package "com.unicorn.tripgen.location.service" {
    interface LocationService {
        +searchNearbyPlaces(request: NearbySearchRequest): NearbySearchResponse
        +searchByKeyword(keyword: String, coordinates: Coordinates, searchOptions: SearchOptions): KeywordSearchResponse
        +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
        +getPlaceRecommendationsCached(placeId: String, tripId: String): Object
        +getBusinessHours(placeId: String): BusinessHours
        +cachePlaceData(place: Place): void
        +invalidateCache(placeId: String): void
    }
    
    class LocationServiceImpl implements LocationService {
        -placeRepository: PlaceRepository
        -cacheService: CacheService
        -externalApiService: ExternalApiService
        -aiServiceClient: AIServiceClient
        -weatherService: WeatherService
        +LocationServiceImpl(placeRepository: PlaceRepository, cacheService: CacheService, externalApiService: ExternalApiService, aiServiceClient: AIServiceClient, weatherService: WeatherService)
        +searchNearbyPlaces(request: NearbySearchRequest): NearbySearchResponse
        +searchByKeyword(keyword: String, coordinates: Coordinates, searchOptions: SearchOptions): KeywordSearchResponse
        +getPlaceDetails(placeId: String, includeAI: Boolean, includeReviews: Boolean): PlaceDetails
        +getPlaceRecommendationsCached(placeId: String, tripId: String): Object
        +getBusinessHours(placeId: String): BusinessHours
        +cachePlaceData(place: Place): void
        +invalidateCache(placeId: String): void
        -mergeExternalData(place: Place, externalData: ExternalPlaceData): Place
        -filterByCategory(places: List<Place>, category: PlaceCategory): List<Place>
        -sortPlaces(places: List<Place>, sortType: SortType): List<Place>
        -calculateTravelTime(origin: Coordinates, destination: Coordinates, transportMode: TransportMode): Integer
        -buildCacheKey(prefix: String, params: String): String
        -requestAIRecommendation(placeId: String, tripId: String): void
    }
    
    interface ExternalApiService {
        +searchPlacesByLocation(coordinates: Coordinates, radius: Integer, category: PlaceCategory): List<ExternalPlaceData>
        +searchPlacesByKeyword(keyword: String, coordinates: Coordinates, radius: Integer): List<ExternalPlaceData>
        +getPlaceDetails(placeId: String): ExternalPlaceData
        +getBusinessHours(placeId: String): BusinessHours
        +getPlacePhotos(placeId: String): List<String>
    }
    
    class GooglePlacesService implements ExternalApiService {
        -googleApiKey: String
        -restTemplate: RestTemplate
        -rateLimiter: RateLimiter
        +GooglePlacesService(googleApiKey: String, restTemplate: RestTemplate)
        +searchPlacesByLocation(coordinates: Coordinates, radius: Integer, category: PlaceCategory): List<ExternalPlaceData>
        +searchPlacesByKeyword(keyword: String, coordinates: Coordinates, radius: Integer): List<ExternalPlaceData>
        +getPlaceDetails(placeId: String): ExternalPlaceData
        +getBusinessHours(placeId: String): BusinessHours
        +getPlacePhotos(placeId: String): List<String>
        -buildSearchUrl(coordinates: Coordinates, radius: Integer, type: String): String
        -parseGoogleResponse(response: String): List<ExternalPlaceData>
        -handleApiError(response: String): void
        -applyRateLimit(): void
    }
    
    interface WeatherService {
        +getCurrentWeather(coordinates: Coordinates): WeatherInfo
        +getWeatherForecast(coordinates: Coordinates, days: Integer): List<WeatherForecast>
    }
    
    class OpenWeatherService implements WeatherService {
        -apiKey: String
        -restTemplate: RestTemplate
        +OpenWeatherService(apiKey: String, restTemplate: RestTemplate)
        +getCurrentWeather(coordinates: Coordinates): WeatherInfo
        +getWeatherForecast(coordinates: Coordinates, days: Integer): List<WeatherForecast>
        -buildWeatherUrl(coordinates: Coordinates, endpoint: String): String
        -parseWeatherResponse(response: String): WeatherInfo
    }
    
    interface AIServiceClient {
        +requestRecommendation(placeId: String, tripId: String): void
        +getRecommendationStatus(placeId: String): AIProcessingStatus
    }
    
    class AIServiceClientImpl implements AIServiceClient {
        -aiServiceUrl: String
        -restTemplate: RestTemplate
        -messageQueue: MessageQueue
        +AIServiceClientImpl(aiServiceUrl: String, restTemplate: RestTemplate, messageQueue: MessageQueue)
        +requestRecommendation(placeId: String, tripId: String): void
        +getRecommendationStatus(placeId: String): AIProcessingStatus
        -sendAsyncRequest(request: AIRecommendationRequest): void
        -handleAIServiceError(error: Exception): void
    }
}

' ===== Repository Layer =====
package "com.unicorn.tripgen.location.repository" {
    interface PlaceRepository extends JpaRepository<Place, String> {
        +findByPlaceId(placeId: String): Optional<Place>
        +findByCoordinatesNear(latitude: Double, longitude: Double, distance: Double): List<Place>
        +findByNameContainingIgnoreCase(name: String): List<Place>
        +findByCategoryAndCoordinatesNear(category: PlaceCategory, latitude: Double, longitude: Double, distance: Double): List<Place>
        +findByPlaceIdIn(placeIds: Set<String>): List<Place>
        +existsByPlaceId(placeId: String): Boolean
        +countByCategoryAndCoordinatesNear(category: PlaceCategory, latitude: Double, longitude: Double, distance: Double): Long
    }
    
    interface ReviewRepository extends JpaRepository<Review, String> {
        +findByPlaceIdOrderByCreatedAtDesc(placeId: String, pageable: Pageable): List<Review>
        +findByPlaceIdAndLanguage(placeId: String, language: String): List<Review>
        +countByPlaceId(placeId: String): Long
        +findTopByPlaceIdOrderByRatingDesc(placeId: String): Optional<Review>
    }
    
    interface AIRecommendationRepository extends JpaRepository<AIRecommendation, String> {
        +findByPlaceId(placeId: String): Optional<AIRecommendation>
        +findByPlaceIdAndTripId(placeId: String, tripId: String): Optional<AIRecommendation>
        +deleteByPlaceId(placeId: String): void
        +findByPlaceIdInAndGeneratedAtAfter(placeIds: Set<String>, generatedAt: LocalDateTime): List<AIRecommendation>
        +existsByPlaceIdAndGeneratedAtAfter(placeId: String, generatedAt: LocalDateTime): Boolean
    }
}

' ===== Entity Layer =====
package "com.unicorn.tripgen.location.entity" {
    class Place extends BaseTimeEntity {
        -id: String
        -placeId: String
        -name: String
        -category: PlaceCategory
        -description: String
        -rating: Double
        -reviewCount: Integer
        -priceLevel: Integer
        -latitude: Double
        -longitude: Double
        -address: String
        -searchKeyword: String
        -parkingKeyword: String
        -region: Region
        -phone: String
        -website: String
        -imageUrls: List<String>
        -isActive: Boolean
        -lastUpdated: LocalDateTime
        +Place()
        +Place(placeId: String, name: String, category: PlaceCategory)
        +updateBasicInfo(name: String, description: String, rating: Double): void
        +updateLocation(latitude: Double, longitude: Double, address: String): void
        +updateContactInfo(phone: String, website: String): void
        +addImageUrl(imageUrl: String): void
        +removeImageUrl(imageUrl: String): void
        +getCoordinates(): Coordinates
        +calculateDistanceTo(coordinates: Coordinates): Double
        +isInternational(): Boolean
        +markAsUpdated(): void
    }
    
    class Review extends BaseTimeEntity {
        -id: String
        -reviewId: String
        -placeId: String
        -authorName: String
        -rating: Integer
        -text: String
        -language: String
        -reviewTime: LocalDateTime
        -relativeTimeDescription: String
        -isVerified: Boolean
        +Review()
        +Review(reviewId: String, placeId: String, authorName: String, rating: Integer, text: String)
        +updateContent(text: String, rating: Integer): void
        +setVerificationStatus(isVerified: Boolean): void
        +isRecentReview(): Boolean
        +getReviewAge(): Long
    }
    
    class AIRecommendation extends BaseTimeEntity {
        -id: String
        -placeId: String
        -tripId: String
        -recommendReason: String
        -description: String
        -specialEvents: String
        -bestVisitTime: String
        -estimatedDuration: String
        -photoSpots: List<String>
        -practicalTips: List<String>
        -weatherTips: String
        -alternativePlaces: List<AlternativePlace>
        -generatedAt: LocalDateTime
        -isValid: Boolean
        -cacheExpiry: LocalDateTime
        +AIRecommendation()
        +AIRecommendation(placeId: String, tripId: String)
        +updateRecommendation(recommendReason: String, description: String): void
        +addPhotoSpot(photoSpot: String): void
        +addPracticalTip(tip: String): void
        +addAlternativePlace(place: AlternativePlace): void
        +isExpired(): Boolean
        +extendCacheExpiry(hours: Integer): void
        +markAsGenerated(): void
    }
    
    class AlternativePlace {
        -name: String
        -reason: String
        -distance: String
        +AlternativePlace()
        +AlternativePlace(name: String, reason: String, distance: String)
    }
    
    enum PlaceCategory {
        +ALL
        +TOURIST
        +RESTAURANT
        +LAUNDRY
        +ACCOMMODATION
        +SHOPPING
        +ENTERTAINMENT
        +TRANSPORT
        -displayName: String
        +PlaceCategory(displayName: String)
        +getDisplayName(): String
        +fromString(category: String): PlaceCategory
    }
    
    enum Region {
        +DOMESTIC
        +INTERNATIONAL
        -displayName: String
        +Region(displayName: String)
        +getDisplayName(): String
    }
    
    enum TransportMode {
        +PUBLIC_TRANSPORT
        +CAR
        +WALKING
        -displayName: String
        +TransportMode(displayName: String)
        +getDisplayName(): String
    }
    
    enum SortType {
        +DISTANCE
        +RATING
        +NAME
        +REVIEWS
        -displayName: String
        +SortType(displayName: String)
        +getDisplayName(): String
    }
}

' ===== DTO Layer =====
package "com.unicorn.tripgen.location.dto" {
    class NearbySearchRequest {
        -origin: LocationDto
        -transportMode: String
        -timeRange: Integer
        -category: String
        -sort: String
        -page: Integer
        -size: Integer
        +NearbySearchRequest()
        +validate(): void
        +getCoordinates(): Coordinates
        +getTransportMode(): TransportMode
        +getPlaceCategory(): PlaceCategory
        +getSortType(): SortType
    }
    
    class NearbySearchResponse {
        -totalCount: Integer
        -page: Integer
        -size: Integer
        -hasNext: Boolean
        -places: List<PlaceCard>
        +NearbySearchResponse()
        +NearbySearchResponse(places: List<PlaceCard>, totalCount: Integer, page: Integer, size: Integer)
        +addPlace(place: PlaceCard): void
        +isEmpty(): Boolean
    }
    
    class KeywordSearchResponse {
        -keyword: String
        -totalCount: Integer
        -page: Integer
        -size: Integer
        -hasNext: Boolean
        -places: List<PlaceCard>
        +KeywordSearchResponse()
        +KeywordSearchResponse(keyword: String, places: List<PlaceCard>, totalCount: Integer, page: Integer, size: Integer)
        +addPlace(place: PlaceCard): void
        +isEmpty(): Boolean
    }
    
    class PlaceCard {
        -placeId: String
        -name: String
        -category: String
        -rating: Double
        -reviewCount: Integer
        -address: String
        -distance: Integer
        -travelTime: Integer
        -imageUrl: String
        +PlaceCard()
        +PlaceCard(placeId: String, name: String, category: String)
        +updateTravelInfo(distance: Integer, travelTime: Integer): void
        +hasImage(): Boolean
    }
    
    class PlaceDetails {
        -placeId: String
        -name: String
        -category: String
        -description: String
        -rating: Double
        -reviewCount: Integer
        -priceLevel: Integer
        -images: List<String>
        -location: LocationInfo
        -businessHours: BusinessHours
        -contact: ContactInfo
        -aiRecommendation: AIRecommendationDto
        -reviews: List<ReviewDto>
        +PlaceDetails()
        +PlaceDetails(placeId: String, name: String, category: String)
        +setAIRecommendation(aiRecommendation: AIRecommendationDto): void
        +addReview(review: ReviewDto): void
        +hasAIRecommendation(): Boolean
    }
    
    class LocationDto {
        -latitude: Double
        -longitude: Double
        -address: String
        +LocationDto()
        +LocationDto(latitude: Double, longitude: Double)
        +validate(): void
        +getCoordinates(): Coordinates
        +calculateDistanceTo(other: LocationDto): Double
    }
    
    class LocationInfo {
        -latitude: Double
        -longitude: Double
        -address: String
        -searchKeyword: String
        -parkingKeyword: String
        -region: String
        +LocationInfo()
        +LocationInfo(latitude: Double, longitude: Double, address: String)
        +getCoordinates(): Coordinates
        +isInternational(): Boolean
    }
    
    class BusinessHours {
        -isOpen: Boolean
        -currentStatus: String
        -todayHours: String
        -weeklyHours: List<DayHours>
        +BusinessHours()
        +BusinessHours(isOpen: Boolean, currentStatus: String, todayHours: String)
        +addDayHours(dayHours: DayHours): void
        +isCurrentlyOpen(): Boolean
    }
    
    class DayHours {
        -day: String
        -hours: String
        -isToday: Boolean
        +DayHours()
        +DayHours(day: String, hours: String, isToday: Boolean)
    }
    
    class ContactInfo {
        -phone: String
        -website: String
        +ContactInfo()
        +ContactInfo(phone: String, website: String)
        +hasContact(): Boolean
    }
    
    class AIRecommendationDto {
        -recommendReason: String
        -tips: TipsDto
        +AIRecommendationDto()
        +AIRecommendationDto(recommendReason: String, tips: TipsDto)
        +hasTips(): Boolean
    }
    
    class TipsDto {
        -description: String
        -specialEvents: String
        -bestVisitTime: String
        -estimatedDuration: String
        -photoSpots: List<String>
        -practicalTips: List<String>
        -weatherTips: String
        -alternativePlaces: List<AlternativePlaceDto>
        +TipsDto()
        +addPhotoSpot(photoSpot: String): void
        +addPracticalTip(tip: String): void
        +addAlternativePlace(place: AlternativePlaceDto): void
    }
    
    class AlternativePlaceDto {
        -name: String
        -reason: String
        +AlternativePlaceDto()
        +AlternativePlaceDto(name: String, reason: String)
    }
    
    class ReviewDto {
        -reviewId: String
        -authorName: String
        -rating: Integer
        -text: String
        -time: Long
        -relativeTimeDescription: String
        -language: String
        +ReviewDto()
        +ReviewDto(reviewId: String, authorName: String, rating: Integer, text: String)
        +isPositiveReview(): Boolean
        +getFormattedTime(): String
    }
    
    class SearchOptions {
        -radius: Integer
        -category: PlaceCategory
        -sortType: SortType
        -page: Integer
        -size: Integer
        +SearchOptions()
        +SearchOptions(radius: Integer, category: PlaceCategory, sortType: SortType)
        +validate(): void
        +getOffset(): Integer
    }
    
    class Coordinates {
        -latitude: Double
        -longitude: Double
        +Coordinates()
        +Coordinates(latitude: Double, longitude: Double)
        +validate(): void
        +calculateDistanceTo(other: Coordinates): Double
        +isValid(): Boolean
    }
    
    class ExternalPlaceData {
        -placeId: String
        -name: String
        -category: String
        -rating: Double
        -reviewCount: Integer
        -latitude: Double
        -longitude: Double
        -address: String
        -phone: String
        -website: String
        -imageUrls: List<String>
        -businessHours: BusinessHours
        +ExternalPlaceData()
        +ExternalPlaceData(placeId: String, name: String)
        +toPlace(): Place
        +hasValidData(): Boolean
    }
    
    class WeatherInfo {
        -temperature: Double
        -humidity: Integer
        -description: String
        -iconCode: String
        +WeatherInfo()
        +WeatherInfo(temperature: Double, humidity: Integer, description: String)
        +getFormattedTemperature(): String
        +isGoodWeather(): Boolean
    }
    
    class WeatherForecast {
        -date: LocalDate
        -temperature: Double
        -humidity: Integer
        -description: String
        -iconCode: String
        +WeatherForecast()
        +WeatherForecast(date: LocalDate, temperature: Double, description: String)
        +getFormattedDate(): String
        +isSuitableForOutdoor(): Boolean
    }
    
    class AIRecommendationRequest {
        -placeId: String
        -tripId: String
        -userPreferences: Map<String, Object>
        +AIRecommendationRequest()
        +AIRecommendationRequest(placeId: String, tripId: String)
        +addPreference(key: String, value: Object): void
        +validate(): void
    }
    
    enum AIProcessingStatus {
        +REQUESTED
        +PROCESSING
        +COMPLETED
        +FAILED
        -displayName: String
        +AIProcessingStatus(displayName: String)
        +getDisplayName(): String
    }
}

' ===== Config Layer =====
package "com.unicorn.tripgen.location.config" {
    class LocationConfig {
        +googlePlacesService(googleApiKey: String, restTemplate: RestTemplate): GooglePlacesService
        +openWeatherService(weatherApiKey: String, restTemplate: RestTemplate): OpenWeatherService
        +aiServiceClient(aiServiceUrl: String, restTemplate: RestTemplate, messageQueue: MessageQueue): AIServiceClient
        +rateLimiter(): RateLimiter
        +cacheManager(): CacheManager
    }
    
    class ExternalApiConfig {
        -googleApiKey: String
        -weatherApiKey: String
        -aiServiceUrl: String
        -googleApiBaseUrl: String
        -weatherApiBaseUrl: String
        -requestTimeout: Integer
        -maxRetries: Integer
        +restTemplate(): RestTemplate
        +httpClientConnectionManager(): PoolingHttpClientConnectionManager
        +configureTimeouts(factory: ClientHttpRequestFactory): void
    }
    
    class CacheConfig {
        -redisHost: String
        -redisPort: Integer
        -redisPassword: String
        -defaultTtl: Duration
        -maxCacheSize: Long
        +redisConnectionFactory(): LettuceConnectionFactory
        +redisTemplate(): RedisTemplate<String, Object>
        +cacheManager(): RedisCacheManager
        +cacheKeyGenerator(): KeyGenerator
    }
}

' ===== Relationships =====
LocationController --> LocationService : uses
LocationController --> CacheService : uses
LocationServiceImpl --> PlaceRepository : uses
LocationServiceImpl --> CacheService : uses
LocationServiceImpl --> ExternalApiService : uses
LocationServiceImpl --> AIServiceClient : uses
LocationServiceImpl --> WeatherService : uses
GooglePlacesService --> RestTemplate : uses
OpenWeatherService --> RestTemplate : uses
AIServiceClientImpl --> RestTemplate : uses
AIServiceClientImpl --> MessageQueue : uses

PlaceRepository --> Place : manages
ReviewRepository --> Review : manages
AIRecommendationRepository --> AIRecommendation : manages

Place --> PlaceCategory : uses
Place --> Region : uses
Place --> BaseTimeEntity : extends
Review --> BaseTimeEntity : extends
AIRecommendation --> BaseTimeEntity : extends
AIRecommendation --> AlternativePlace : contains

NearbySearchRequest --> LocationDto : contains
NearbySearchResponse --> PlaceCard : contains
KeywordSearchResponse --> PlaceCard : contains
PlaceDetails --> LocationInfo : contains
PlaceDetails --> BusinessHours : contains
PlaceDetails --> ContactInfo : contains
PlaceDetails --> AIRecommendationDto : contains
PlaceDetails --> ReviewDto : contains
AIRecommendationDto --> TipsDto : contains
TipsDto --> AlternativePlaceDto : contains
BusinessHours --> DayHours : contains
SearchOptions --> PlaceCategory : uses
SearchOptions --> SortType : uses
ExternalPlaceData --> Place : converts
AIRecommendationRequest --> Map : contains

LocationConfig --> GooglePlacesService : creates
LocationConfig --> OpenWeatherService : creates
LocationConfig --> AIServiceClient : creates
ExternalApiConfig --> RestTemplate : creates
CacheConfig --> RedisTemplate : creates

@enduml