@startuml
!theme mono

title User 서비스 간단 클래스 설계서 (Layered Architecture)

' ======================================
' Layered Architecture Overview
' ======================================
package "Controller Layer" {
    class UserController {
        -UserService userService
        +registerUser()
        +loginUser()
        +logoutUser()
        +getProfile()
        +updateProfile()
        +uploadAvatar()
        +changePassword()
        +checkUsername()
        +checkEmail()
    }
}

package "Service Layer" {
    interface UserService {
        +register()
        +login()
        +logout()
        +getProfile()
        +updateProfile()
        +uploadAvatar()
        +changePassword()
        +checkUsernameAvailability()
        +checkEmailAvailability()
    }
    
    class UserServiceImpl {
        -UserRepository userRepository
        -PasswordEncoder passwordEncoder
        -JwtTokenProvider jwtTokenProvider
        -RedisTemplate redisTemplate
        -FileStorageService fileStorageService
        +register()
        +login()
        +logout()
        +getProfile()
        +updateProfile()
        +uploadAvatar()
        +changePassword()
        +checkUsernameAvailability()
        +checkEmailAvailability()
    }
}

package "Repository Layer" {
    interface UserRepository {
        +save()
        +findById()
        +findByUserId()
        +findByUsername()
        +findByEmail()
        +existsByUsername()
        +existsByEmail()
        +updateLastLoginAt()
        +updateLoginAttempts()
    }
    
    class UserRepositoryImpl {
        -JdbcTemplate jdbcTemplate
        -UserRowMapper userRowMapper
        +save()
        +findById()
        +findByUserId()
        +findByUsername()
        +findByEmail()
        +existsByUsername()
        +existsByEmail()
    }
}

package "Entity Layer" {
    class User {
        -Long id
        -String userId
        -String username
        -String password
        -String name
        -String email
        -String phone
        -String avatarUrl
        -UserStatus status
        -int loginAttempts
        -LocalDateTime lockedUntil
        -LocalDateTime lastLoginAt
        +isAccountLocked()
        +incrementLoginAttempts()
        +resetLoginAttempts()
        +lockAccount()
        +updateLastLogin()
    }
    
    enum UserStatus {
        ACTIVE
        INACTIVE
        SUSPENDED
        LOCKED
        DELETED
    }
}

package "DTO Layer" {
    class RegisterRequest {
        -String name
        -String email
        -String phone
        -String username
        -String password
        -String passwordConfirm
        -boolean termsAccepted
    }
    
    class LoginRequest {
        -String username
        -String password
        -boolean rememberMe
    }
    
    class UpdateProfileRequest {
        -String name
        -String phone
        -String email
    }
    
    class ChangePasswordRequest {
        -String currentPassword
        -String newPassword
        -String newPasswordConfirm
    }
    
    class RegisterResponse {
        -String userId
        -String username
        -String message
    }
    
    class LoginResponse {
        -String accessToken
        -String refreshToken
        -String tokenType
        -int expiresIn
        -UserProfile user
    }
    
    class UserProfile {
        -String userId
        -String username
        -String name
        -String email
        -String phone
        -String avatarUrl
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
    }
}

package "Configuration Layer" {
    class UserConfig {
        +passwordEncoder()
        +jwtTokenProvider()
        +userDetailsService()
        +fileStorageService()
    }
    
    class JwtTokenProvider {
        -String secretKey
        -long accessTokenValidityTime
        -long refreshTokenValidityTime
        +generateAccessToken()
        +generateRefreshToken()
        +validateToken()
        +getUsernameFromToken()
    }
    
    class FileStorageService {
        -String uploadPath
        -long maxFileSize
        +uploadFile()
        +deleteFile()
        +validateFile()
    }
}

' ======================================
' Layered Architecture Relationships
' ======================================

' Layer Dependencies (Top to Bottom)
UserController --> UserService : depends on
UserService <|.. UserServiceImpl : implements
UserServiceImpl --> UserRepository : depends on
UserRepository <|.. UserRepositoryImpl : implements
UserRepositoryImpl --> User : manages

' Cross-cutting Dependencies
UserServiceImpl --> JwtTokenProvider : uses
UserServiceImpl --> FileStorageService : uses
UserController --> RegisterRequest : uses
UserController --> LoginRequest : uses
UserController --> UpdateProfileRequest : uses
UserController --> ChangePasswordRequest : uses
UserController --> RegisterResponse : creates
UserController --> LoginResponse : creates
UserController --> UserProfile : creates

User --> UserStatus : has

UserConfig --> JwtTokenProvider : creates
UserConfig --> FileStorageService : creates

note top of UserController : "Presentation Layer\n- HTTP 요청/응답 처리\n- 데이터 검증\n- 보안 인증"

note top of UserService : "Business Layer\n- 비즈니스 로직\n- 트랜잭션 관리\n- 데이터 변환"

note top of UserRepository : "Data Access Layer\n- 데이터 영속성\n- 쿼리 실행\n- 매핑"

note top of User : "Domain Layer\n- 도메인 엔티티\n- 비즈니스 규칙"

@enduml