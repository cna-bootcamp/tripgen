@startuml
!theme mono

title User Service - 간단 클래스 설계서
subtitle Layered Architecture Pattern | Package: com.unicorn.tripgen

' ======================================
' Controller Layer
' ======================================
package "Controller Layer" {
    class UserController {
        +registerUser: 회원등록
        +loginUser: 로그인
        +logoutUser: 로그아웃
        +getProfile: 프로필 조회
        +updateProfile: 프로필 수정
        +uploadAvatar: 프로필 이미지 업로드
        +changePassword: 비밀번호 변경
        +checkUsername: 아이디 중복 확인
        +checkEmail: 이메일 중복 확인
    }
}

' ======================================
' Service Layer
' ======================================
package "Service Layer" {
    interface UserService {
        +registerUser: 회원등록 처리
        +authenticateUser: 사용자 인증
        +logoutUser: 로그아웃 처리
        +getUserProfile: 프로필 조회
        +updateProfile: 프로필 수정
        +uploadAvatar: 프로필 이미지 업로드
        +changePassword: 비밀번호 변경
        +checkUsernameDuplication: 아이디 중복 확인
        +checkEmailDuplication: 이메일 중복 확인
        +validateLoginAttempt: 로그인 시도 검증
        +increaseFailedLoginCount: 실패 횟수 증가
        +resetFailedLoginCount: 실패 횟수 초기화
    }

    class UserServiceImpl {
        +registerUser: 회원등록 처리
        +authenticateUser: 사용자 인증
        +logoutUser: 로그아웃 처리
        +getUserProfile: 프로필 조회
        +updateProfile: 프로필 수정
        +uploadAvatar: 프로필 이미지 업로드
        +changePassword: 비밀번호 변경
        +checkUsernameDuplication: 아이디 중복 확인
        +checkEmailDuplication: 이메일 중복 확인
        +validateLoginAttempt: 로그인 시도 검증
        +increaseFailedLoginCount: 실패 횟수 증가
        +resetFailedLoginCount: 실패 횟수 초기화
    }

    interface TokenService {
        +generateAccessToken: 액세스 토큰 생성
        +generateRefreshToken: 리프레시 토큰 생성
        +validateToken: 토큰 검증
        +extractUserIdFromToken: 토큰에서 사용자 ID 추출
        +isTokenExpired: 토큰 만료 여부 확인
        +invalidateToken: 토큰 무효화
        +getTokenExpirationTime: 토큰 만료 시간 조회
    }

    class JwtTokenService {
        +generateAccessToken: 액세스 토큰 생성
        +generateRefreshToken: 리프레시 토큰 생성
        +validateToken: 토큰 검증
        +extractUserIdFromToken: 토큰에서 사용자 ID 추출
        +isTokenExpired: 토큰 만료 여부 확인
        +invalidateToken: 토큰 무효화
        +getTokenExpirationTime: 토큰 만료 시간 조회
    }

    interface FileStorageService {
        +uploadFile: 파일 업로드
        +deleteFile: 파일 삭제
        +generateFileName: 파일명 생성
        +validateFileType: 파일 타입 검증
        +validateFileSize: 파일 크기 검증
    }

    class S3FileStorageService {
        +uploadFile: 파일 업로드
        +deleteFile: 파일 삭제
        +generateFileName: 파일명 생성
        +validateFileType: 파일 타입 검증
        +validateFileSize: 파일 크기 검증
    }

    interface CacheService {
        +get: 캐시 조회
        +set: 캐시 저장
        +delete: 캐시 삭제
        +increment: 카운터 증가
        +exists: 키 존재 여부 확인
        +setWithExpire: 만료 시간과 함께 저장
    }

    class RedisCacheService {
        +get: 캐시 조회
        +set: 캐시 저장
        +delete: 캐시 삭제
        +increment: 카운터 증가
        +exists: 키 존재 여부 확인
        +setWithExpire: 만료 시간과 함께 저장
    }
}

' ======================================
' Domain Layer
' ======================================
package "Domain Layer" {
    class User {
        +incrementFailedLoginCount: 실패 횟수 증가
        +resetFailedLoginCount: 실패 횟수 초기화
        +lockAccount: 계정 잠금
        +unlockAccount: 계정 잠금 해제
        +isAccountLocked: 계정 잠금 상태 확인
        +updateProfile: 프로필 정보 업데이트
        +changePassword: 비밀번호 변경
    }

    enum UserStatus {
        +getUserStatus: 사용자 상태 조회
        +isActive: 활성 상태 여부 확인
    }
}

' ======================================
' DTO Layer
' ======================================
package "DTO Layer" {
    class RegisterRequest {
        +isPasswordMatched: 비밀번호 일치 확인
        +validate: 요청 데이터 검증
    }

    class RegisterResponse
    class LoginRequest {
        +validate: 요청 데이터 검증
    }
    class LoginResponse
    class UserProfile
    class UpdateProfileRequest {
        +validate: 요청 데이터 검증
    }
    class ChangePasswordRequest {
        +isNewPasswordMatched: 새 비밀번호 일치 확인
        +validate: 요청 데이터 검증
    }
    class AvatarUploadResponse
    class DuplicationCheckResponse
}

' ======================================
' Repository Layer
' ======================================
package "Repository Layer" {
    interface UserRepository {
        +save: 사용자 저장
        +findById: ID로 사용자 조회
        +findByUsername: 아이디로 사용자 조회
        +findByEmail: 이메일로 사용자 조회
        +deleteById: ID로 사용자 삭제
        +existsByUsername: 아이디 존재 여부 확인
        +existsByEmail: 이메일 존재 여부 확인
        +findByUsernameAndIsAccountLockedFalse: 잠금되지 않은 사용자 조회
        +updateFailedLoginCount: 실패 횟수 업데이트
        +updateLastLoginAttempt: 마지막 로그인 시도 시간 업데이트
        +lockAccount: 계정 잠금
        +unlockAccount: 계정 잠금 해제
        +countByCreatedAtBetween: 기간별 가입자 수 조회
    }

    class UserRepositoryImpl {
        +save: 사용자 저장
        +findById: ID로 사용자 조회
        +findByUsername: 아이디로 사용자 조회
        +findByEmail: 이메일로 사용자 조회
        +deleteById: ID로 사용자 삭제
        +existsByUsername: 아이디 존재 여부 확인
        +existsByEmail: 이메일 존재 여부 확인
        +findByUsernameAndIsAccountLockedFalse: 잠금되지 않은 사용자 조회
        +updateFailedLoginCount: 실패 횟수 업데이트
        +updateLastLoginAttempt: 마지막 로그인 시도 시간 업데이트
        +lockAccount: 계정 잠금
        +unlockAccount: 계정 잠금 해제
        +countByCreatedAtBetween: 기간별 가입자 수 조회
    }

    class UserEntity
}

' ======================================
' Mapper Layer
' ======================================
package "Mapper Layer" {
    interface UserMapper {
        +toUser: 엔티티를 도메인으로 변환
        +toEntity: 도메인을 엔티티로 변환
        +toUserProfile: 도메인을 프로필 DTO로 변환
        +toRegisterResponse: 도메인을 등록 응답 DTO로 변환
        +toUser: 등록 요청 DTO를 도메인으로 변환
        +updateUserFromRequest: 요청 DTO로 도메인 업데이트
    }

    class UserMapperImpl {
        +toUser: 엔티티를 도메인으로 변환
        +toEntity: 도메인을 엔티티로 변환
        +toUserProfile: 도메인을 프로필 DTO로 변환
        +toRegisterResponse: 도메인을 등록 응답 DTO로 변환
        +toUser: 등록 요청 DTO를 도메인으로 변환
        +updateUserFromRequest: 요청 DTO로 도메인 업데이트
    }
}

' ======================================
' Configuration Layer
' ======================================
package "Configuration Layer" {
    class UserServiceConfig {
        +passwordEncoder: 비밀번호 인코더 빈 설정
        +jwtTokenService: JWT 토큰 서비스 빈 설정
        +s3FileStorageService: S3 파일 저장 서비스 빈 설정
        +redisCacheService: Redis 캐시 서비스 빈 설정
        +userMapper: 사용자 매퍼 빈 설정
        +userRepository: 사용자 리포지토리 빈 설정
        +userService: 사용자 서비스 빈 설정
    }

    class SecurityConfig {
        +configureHttpSecurity: HTTP 보안 설정
        +jwtAuthenticationFilter: JWT 인증 필터 빈 설정
        +authenticationEntryPoint: 인증 진입점 빈 설정
        +accessDeniedHandler: 접근 거부 핸들러 빈 설정
    }

    class CacheConfig {
        +redisConnectionFactory: Redis 연결 팩토리 빈 설정
        +redisTemplate: Redis 템플릿 빈 설정
        +cacheManager: 캐시 매니저 빈 설정
        +configureCacheDefaults: 캐시 기본 설정
    }
}

' ======================================
' Relationships
' ======================================

' Controller Dependencies
UserController --> UserService

' Service Implementations
UserService <|.. UserServiceImpl
TokenService <|.. JwtTokenService
FileStorageService <|.. S3FileStorageService
CacheService <|.. RedisCacheService

' Service Dependencies
UserServiceImpl --> UserRepository
UserServiceImpl --> TokenService
UserServiceImpl --> FileStorageService
UserServiceImpl --> CacheService
UserServiceImpl --> UserMapper

' Repository Implementation
UserRepository <|.. UserRepositoryImpl

' Mapper Implementation
UserMapper <|.. UserMapperImpl

' Domain Relationships
User --> UserStatus

' DTO Relationships
LoginResponse --> UserProfile

' Entity Mapping
UserMapper --> User
UserMapper --> UserEntity
UserMapper --> UserProfile
UserMapper --> RegisterResponse

@enduml