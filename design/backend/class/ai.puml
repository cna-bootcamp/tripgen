@startuml
!theme mono

title AI 서비스 클래스 설계서 (Layered Architecture)

' ======================================
' Controller Layer
' ======================================
package "Controller Layer" {
    class AIScheduleController {
        -AIScheduleService aiScheduleService
        -AIScheduleValidator scheduleValidator
        +AIScheduleController(aiScheduleService: AIScheduleService, scheduleValidator: AIScheduleValidator)
        +generateAISchedule(request: GenerateScheduleRequest): ResponseEntity<GenerateScheduleResponse>
        +getGenerationStatus(requestId: String): ResponseEntity<GenerationStatusResponse>
        +getGeneratedSchedule(requestId: String): ResponseEntity<GeneratedScheduleResponse>
        +cancelGeneration(requestId: String): ResponseEntity<Void>
        +regenerateDaySchedule(request: RegenerateScheduleRequest): ResponseEntity<GenerateScheduleResponse>
        +analyzeWeatherImpact(tripId: String, request: WeatherImpactRequest): ResponseEntity<WeatherImpactResponse>
    }

    class AIRecommendationController {
        -AIRecommendationService recommendationService
        -RecommendationValidator recommendationValidator
        +AIRecommendationController(recommendationService: AIRecommendationService, recommendationValidator: RecommendationValidator)
        +generatePlaceRecommendations(placeId: String, request: RecommendationRequest): ResponseEntity<RecommendationResponse>
    }
}

' ======================================
' Service Layer
' ======================================
package "Service Layer" {
    interface AIScheduleService {
        +generateSchedule(request: GenerateScheduleRequest): GenerateScheduleResponse
        +getGenerationStatus(requestId: String): GenerationStatusResponse
        +getGeneratedSchedule(requestId: String): GeneratedScheduleDto
        +cancelGeneration(requestId: String): void
        +regenerateDaySchedule(request: RegenerateScheduleRequest): GenerateScheduleResponse
        +analyzeWeatherImpact(tripId: String, request: WeatherImpactRequest): WeatherImpactResponse
    }

    class AIScheduleServiceImpl {
        -AIScheduleRepository scheduleRepository
        -AIJobRepository jobRepository
        -AIModelClient aiModelClient
        -WeatherServiceClient weatherClient
        -LocationServiceClient locationClient
        -CacheManager cacheManager
        -MessageQueue messageQueue
        +AIScheduleServiceImpl(scheduleRepository: AIScheduleRepository, jobRepository: AIJobRepository, aiModelClient: AIModelClient, weatherClient: WeatherServiceClient, locationClient: LocationServiceClient, cacheManager: CacheManager, messageQueue: MessageQueue)
        +generateSchedule(request: GenerateScheduleRequest): GenerateScheduleResponse
        +getGenerationStatus(requestId: String): GenerationStatusResponse
        +getGeneratedSchedule(requestId: String): GeneratedScheduleDto
        +cancelGeneration(requestId: String): void
        +regenerateDaySchedule(request: RegenerateScheduleRequest): GenerateScheduleResponse
        +analyzeWeatherImpact(tripId: String, request: WeatherImpactRequest): WeatherImpactResponse
        -processScheduleGeneration(request: GenerateScheduleRequest, requestId: String): void
        -optimizeScheduleWithAI(scheduleData: ScheduleOptimizationData): List<DailySchedule>
        -validateScheduleConstraints(schedules: List<DailySchedule>): ValidationResult
        -calculateTravelTimes(places: List<PlaceInfo>, transportMode: String): TravelTimeMatrix
        -considerHealthConstraints(places: List<PlaceInfo>, healthProfiles: List<HealthProfile>): List<PlaceInfo>
        -applyWeatherConsiderations(schedules: List<DailySchedule>, weatherData: List<WeatherInfo>): List<DailySchedule>
    }

    interface AIRecommendationService {
        +generatePlaceRecommendations(placeId: String, request: RecommendationRequest): RecommendationResponse
        +getCachedRecommendations(placeId: String, profileHash: String): RecommendationResponse
        +cacheRecommendations(placeId: String, profileHash: String, recommendations: RecommendationResponse): void
    }

    class AIRecommendationServiceImpl {
        -AIRecommendationRepository recommendationRepository
        -AIModelClient aiModelClient
        -LocationServiceClient locationClient
        -CacheManager cacheManager
        +AIRecommendationServiceImpl(recommendationRepository: AIRecommendationRepository, aiModelClient: AIModelClient, locationClient: LocationServiceClient, cacheManager: CacheManager)
        +generatePlaceRecommendations(placeId: String, request: RecommendationRequest): RecommendationResponse
        +getCachedRecommendations(placeId: String, profileHash: String): RecommendationResponse
        +cacheRecommendations(placeId: String, profileHash: String, recommendations: RecommendationResponse): void
        -generatePersonalizedRecommendations(place: PlaceInfo, userProfile: UserProfile, tripContext: TripContext): RecommendationData
        -generateProfileHash(userProfile: UserProfile, tripContext: TripContext): String
        -extractPlaceInsights(place: PlaceInfo): PlaceInsights
        -generateAlternativePlaces(place: PlaceInfo, userProfile: UserProfile): List<AlternativePlace>
    }

    class AIJobService {
        -AIJobRepository jobRepository
        -MessageQueue messageQueue
        +AIJobService(jobRepository: AIJobRepository, messageQueue: MessageQueue)
        +createJob(jobType: AIJobType, requestId: String, payload: String): AIJob
        +updateJobStatus(requestId: String, status: AIJobStatus, progress: int, currentStep: String): void
        +updateJobProgress(requestId: String, progress: int, currentStep: String): void
        +completeJob(requestId: String, result: String): void
        +failJob(requestId: String, errorMessage: String): void
        +getJobStatus(requestId: String): AIJob
        +cancelJob(requestId: String): void
        +cleanupExpiredJobs(): void
    }
}

' ======================================
' Repository Layer
' ======================================
package "Repository Layer" {
    interface AIScheduleRepository {
        +save(schedule: AISchedule): AISchedule
        +findByRequestId(requestId: String): Optional<AISchedule>
        +findByTripId(tripId: String): List<AISchedule>
        +deleteByRequestId(requestId: String): void
        +findByTripIdAndDay(tripId: String, day: int): Optional<AISchedule>
        +findExpiredSchedules(expiredBefore: LocalDateTime): List<AISchedule>
        +deleteExpiredSchedules(expiredBefore: LocalDateTime): int
    }

    interface AIJobRepository {
        +save(job: AIJob): AIJob
        +findByRequestId(requestId: String): Optional<AIJob>
        +findByStatus(status: AIJobStatus): List<AIJob>
        +findExpiredJobs(expiredBefore: LocalDateTime): List<AIJob>
        +deleteExpiredJobs(expiredBefore: LocalDateTime): int
        +updateJobStatus(requestId: String, status: AIJobStatus, progress: int, currentStep: String): int
        +findProcessingJobs(): List<AIJob>
    }

    interface AIRecommendationRepository {
        +save(recommendation: AIRecommendation): AIRecommendation
        +findByPlaceIdAndProfileHash(placeId: String, profileHash: String): Optional<AIRecommendation>
        +findByPlaceId(placeId: String): List<AIRecommendation>
        +deleteExpired(expiredBefore: LocalDateTime): int
        +findExpiredRecommendations(expiredBefore: LocalDateTime): List<AIRecommendation>
    }
}

' ======================================
' Entity Layer
' ======================================
package "Entity Layer" {
    class AISchedule {
        -Long id
        -String requestId
        -String tripId
        -AIJobStatus status
        -String scheduleData
        -LocalDateTime generatedAt
        -LocalDateTime expiredAt
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +AISchedule()
        +AISchedule(requestId: String, tripId: String, status: AIJobStatus)
        +getId(): Long
        +getRequestId(): String
        +setRequestId(requestId: String): void
        +getTripId(): String
        +setTripId(tripId: String): void
        +getStatus(): AIJobStatus
        +setStatus(status: AIJobStatus): void
        +getScheduleData(): String
        +setScheduleData(scheduleData: String): void
        +getGeneratedAt(): LocalDateTime
        +setGeneratedAt(generatedAt: LocalDateTime): void
        +getExpiredAt(): LocalDateTime
        +setExpiredAt(expiredAt: LocalDateTime): void
        +isExpired(): boolean
    }

    class AIJob {
        -Long id
        -String requestId
        -AIJobType jobType
        -AIJobStatus status
        -String payload
        -String result
        -int progress
        -String currentStep
        -String errorMessage
        -LocalDateTime startedAt
        -LocalDateTime completedAt
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +AIJob()
        +AIJob(requestId: String, jobType: AIJobType, payload: String)
        +getId(): Long
        +getRequestId(): String
        +setRequestId(requestId: String): void
        +getJobType(): AIJobType
        +setJobType(jobType: AIJobType): void
        +getStatus(): AIJobStatus
        +setStatus(status: AIJobStatus): void
        +getPayload(): String
        +setPayload(payload: String): void
        +getResult(): String
        +setResult(result: String): void
        +getProgress(): int
        +setProgress(progress: int): void
        +getCurrentStep(): String
        +setCurrentStep(currentStep: String): void
        +getErrorMessage(): String
        +setErrorMessage(errorMessage: String): void
        +getStartedAt(): LocalDateTime
        +setStartedAt(startedAt: LocalDateTime): void
        +getCompletedAt(): LocalDateTime
        +setCompletedAt(completedAt: LocalDateTime): void
        +isCompleted(): boolean
        +isFailed(): boolean
        +isProcessing(): boolean
    }

    class AIRecommendation {
        -Long id
        -String placeId
        -String profileHash
        -String recommendationData
        -LocalDateTime generatedAt
        -LocalDateTime expiredAt
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +AIRecommendation()
        +AIRecommendation(placeId: String, profileHash: String, recommendationData: String)
        +getId(): Long
        +getPlaceId(): String
        +setPlaceId(placeId: String): void
        +getProfileHash(): String
        +setProfileHash(profileHash: String): void
        +getRecommendationData(): String
        +setRecommendationData(recommendationData: String): void
        +getGeneratedAt(): LocalDateTime
        +setGeneratedAt(generatedAt: LocalDateTime): void
        +getExpiredAt(): LocalDateTime
        +setExpiredAt(expiredAt: LocalDateTime): void
        +isExpired(): boolean
    }
}

' ======================================
' DTO Layer
' ======================================
package "DTO Layer" {
    class GenerateScheduleRequest {
        -String tripId
        -String tripName
        -String transportMode
        -String startTime
        -List<TripMember> members
        -List<Destination> destinations
        -String specialRequests
        +GenerateScheduleRequest()
        +getTripId(): String
        +setTripId(tripId: String): void
        +getTripName(): String
        +setTripName(tripName: String): void
        +getTransportMode(): String
        +setTransportMode(transportMode: String): void
        +getStartTime(): String
        +setStartTime(startTime: String): void
        +getMembers(): List<TripMember>
        +setMembers(members: List<TripMember>): void
        +getDestinations(): List<Destination>
        +setDestinations(destinations: List<Destination>): void
        +getSpecialRequests(): String
        +setSpecialRequests(specialRequests: String): void
    }

    class GenerateScheduleResponse {
        -String requestId
        -AIJobStatus status
        -String message
        -int estimatedTime
        +GenerateScheduleResponse()
        +GenerateScheduleResponse(requestId: String, status: AIJobStatus, message: String)
        +getRequestId(): String
        +setRequestId(requestId: String): void
        +getStatus(): AIJobStatus
        +setStatus(status: AIJobStatus): void
        +getMessage(): String
        +setMessage(message: String): void
        +getEstimatedTime(): int
        +setEstimatedTime(estimatedTime: int): void
    }

    class GenerationStatusResponse {
        -String requestId
        -AIJobStatus status
        -int progress
        -String currentStep
        -List<ProcessStep> steps
        -int estimatedTime
        -String error
        +GenerationStatusResponse()
        +getRequestId(): String
        +setRequestId(requestId: String): void
        +getStatus(): AIJobStatus
        +setStatus(status: AIJobStatus): void
        +getProgress(): int
        +setProgress(progress: int): void
        +getCurrentStep(): String
        +setCurrentStep(currentStep: String): void
        +getSteps(): List<ProcessStep>
        +setSteps(steps: List<ProcessStep>): void
        +getEstimatedTime(): int
        +setEstimatedTime(estimatedTime: int): void
        +getError(): String
        +setError(error: String): void
    }

    class GeneratedScheduleDto {
        -String requestId
        -String tripId
        -AIJobStatus status
        -LocalDateTime generatedAt
        -List<DailyScheduleDto> schedules
        -ScheduleMetadata metadata
        +GeneratedScheduleDto()
        +getRequestId(): String
        +setRequestId(requestId: String): void
        +getTripId(): String
        +setTripId(tripId: String): void
        +getStatus(): AIJobStatus
        +setStatus(status: AIJobStatus): void
        +getGeneratedAt(): LocalDateTime
        +setGeneratedAt(generatedAt: LocalDateTime): void
        +getSchedules(): List<DailyScheduleDto>
        +setSchedules(schedules: List<DailyScheduleDto>): void
        +getMetadata(): ScheduleMetadata
        +setMetadata(metadata: ScheduleMetadata): void
    }

    class RecommendationRequest {
        -String placeName
        -String placeType
        -String placeAddress
        -UserProfile userProfile
        -TripContext tripContext
        +RecommendationRequest()
        +getPlaceName(): String
        +setPlaceName(placeName: String): void
        +getPlaceType(): String
        +setPlaceType(placeType: String): void
        +getPlaceAddress(): String
        +setPlaceAddress(placeAddress: String): void
        +getUserProfile(): UserProfile
        +setUserProfile(userProfile: UserProfile): void
        +getTripContext(): TripContext
        +setTripContext(tripContext: TripContext): void
    }

    class RecommendationResponse {
        -String placeId
        -RecommendationData recommendations
        -LocalDateTime generatedAt
        -LocalDateTime cacheExpiry
        +RecommendationResponse()
        +getPlaceId(): String
        +setPlaceId(placeId: String): void
        +getRecommendations(): RecommendationData
        +setRecommendations(recommendations: RecommendationData): void
        +getGeneratedAt(): LocalDateTime
        +setGeneratedAt(generatedAt: LocalDateTime): void
        +getCacheExpiry(): LocalDateTime
        +setCacheExpiry(cacheExpiry: LocalDateTime): void
    }

    class WeatherImpactRequest {
        -List<DailyScheduleDto> schedules
        -List<WeatherChange> weatherChanges
        +WeatherImpactRequest()
        +getSchedules(): List<DailyScheduleDto>
        +setSchedules(schedules: List<DailyScheduleDto>): void
        +getWeatherChanges(): List<WeatherChange>
        +setWeatherChanges(weatherChanges: List<WeatherChange>): void
    }

    class WeatherImpactResponse {
        -List<ImpactedDay> impactedDays
        +WeatherImpactResponse()
        +getImpactedDays(): List<ImpactedDay>
        +setImpactedDays(impactedDays: List<ImpactedDay>): void
    }
}

' ======================================
' Enum Classes
' ======================================
package "Enums" {
    enum AIJobType {
        SCHEDULE_GENERATION
        SCHEDULE_REGENERATION
        RECOMMENDATION_GENERATION
        WEATHER_IMPACT_ANALYSIS
    }

    enum AIJobStatus {
        QUEUED
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
    }

    enum ProcessStepStatus {
        PENDING
        PROCESSING
        COMPLETED
        FAILED
    }
}

' ======================================
' External Clients
' ======================================
package "External Clients" {
    interface AIModelClient {
        +generateSchedule(optimizationData: ScheduleOptimizationData): AIScheduleResult
        +generateRecommendations(place: PlaceInfo, userProfile: UserProfile, tripContext: TripContext): AIRecommendationResult
        +analyzeWeatherImpact(schedules: List<DailySchedule>, weatherChanges: List<WeatherChange>): WeatherImpactResult
        +optimizeRoutes(places: List<PlaceInfo>, constraints: RouteConstraints): RouteOptimizationResult
    }

    class OpenAIClient {
        -String apiKey
        -String baseUrl
        -RestTemplate restTemplate
        +OpenAIClient(apiKey: String, baseUrl: String, restTemplate: RestTemplate)
        +generateSchedule(optimizationData: ScheduleOptimizationData): AIScheduleResult
        +generateRecommendations(place: PlaceInfo, userProfile: UserProfile, tripContext: TripContext): AIRecommendationResult
        +analyzeWeatherImpact(schedules: List<DailySchedule>, weatherChanges: List<WeatherChange>): WeatherImpactResult
        +optimizeRoutes(places: List<PlaceInfo>, constraints: RouteConstraints): RouteOptimizationResult
        -buildSchedulePrompt(data: ScheduleOptimizationData): String
        -buildRecommendationPrompt(place: PlaceInfo, userProfile: UserProfile, tripContext: TripContext): String
        -parseScheduleResponse(response: String): AIScheduleResult
        -parseRecommendationResponse(response: String): AIRecommendationResult
    }

    class ClaudeClient {
        -String apiKey
        -String baseUrl
        -RestTemplate restTemplate
        +ClaudeClient(apiKey: String, baseUrl: String, restTemplate: RestTemplate)
        +generateSchedule(optimizationData: ScheduleOptimizationData): AIScheduleResult
        +generateRecommendations(place: PlaceInfo, userProfile: UserProfile, tripContext: TripContext): AIRecommendationResult
        +analyzeWeatherImpact(schedules: List<DailySchedule>, weatherChanges: List<WeatherChange>): WeatherImpactResult
        +optimizeRoutes(places: List<PlaceInfo>, constraints: RouteConstraints): RouteOptimizationResult
        -buildAnthropicRequest(messages: List<Message>): AnthropicRequest
        -parseAnthropicResponse(response: AnthropicResponse): AIResult
    }

    interface WeatherServiceClient {
        +getWeatherInfo(destinations: List<Destination>): List<WeatherInfo>
        +getWeatherForecast(location: String, startDate: LocalDate, endDate: LocalDate): List<WeatherInfo>
    }

    interface LocationServiceClient {
        +getPlaceDetails(placeId: String): PlaceInfo
        +searchPlaces(query: String, location: String): List<PlaceInfo>
    }
}

' ======================================
' Validation Layer
' ======================================
package "Validation Layer" {
    class AIScheduleValidator {
        +validateGenerateScheduleRequest(request: GenerateScheduleRequest): void
        +validateRegenerateScheduleRequest(request: RegenerateScheduleRequest): void
        +validateWeatherImpactRequest(request: WeatherImpactRequest): void
        -validateTripMembers(members: List<TripMember>): void
        -validateDestinations(destinations: List<Destination>): void
        -validateTransportMode(transportMode: String): void
        -validateTimeFormat(time: String): void
    }

    class RecommendationValidator {
        +validateRecommendationRequest(request: RecommendationRequest): void
        -validatePlaceInfo(placeName: String, placeType: String): void
        -validateUserProfile(userProfile: UserProfile): void
        -validateTripContext(tripContext: TripContext): void
    }
}

' ======================================
' Cache & Message Queue
' ======================================
package "Infrastructure" {
    interface CacheManager {
        +get(key: String): Object
        +put(key: String, value: Object, expiration: Duration): void
        +evict(key: String): void
        +clear(): void
    }

    interface MessageQueue {
        +sendMessage(queue: String, message: Object): void
        +receiveMessage(queue: String): Object
        +sendDelayedMessage(queue: String, message: Object, delay: Duration): void
    }
}

' ======================================
' Relationships
' ======================================

' Controller Layer Associations (의존성 주입으로 보유)
AIScheduleController --> "1" AIScheduleService : -aiScheduleService
AIScheduleController --> "1" AIScheduleValidator : -scheduleValidator
AIRecommendationController --> "1" AIRecommendationService : -recommendationService
AIRecommendationController --> "1" RecommendationValidator : -recommendationValidator

' Service Interface Realizations (인터페이스 구현)
AIScheduleService <|.. AIScheduleServiceImpl : implements
AIRecommendationService <|.. AIRecommendationServiceImpl : implements

' Service Layer Associations (의존성 주입으로 보유)
AIScheduleServiceImpl --> "1" AIScheduleRepository : -scheduleRepository
AIScheduleServiceImpl --> "1" AIJobRepository : -jobRepository
AIScheduleServiceImpl --> "1" AIModelClient : -aiModelClient
AIScheduleServiceImpl --> "1" WeatherServiceClient : -weatherClient
AIScheduleServiceImpl --> "1" LocationServiceClient : -locationClient
AIScheduleServiceImpl --> "1" CacheManager : -cacheManager
AIScheduleServiceImpl --> "1" MessageQueue : -messageQueue

AIRecommendationServiceImpl --> "1" AIRecommendationRepository : -recommendationRepository
AIRecommendationServiceImpl --> "1" AIModelClient : -aiModelClient
AIRecommendationServiceImpl --> "1" LocationServiceClient : -locationClient
AIRecommendationServiceImpl --> "1" CacheManager : -cacheManager

AIJobService --> "1" AIJobRepository : -jobRepository
AIJobService --> "1" MessageQueue : -messageQueue

' External Client Realizations (인터페이스 구현)
AIModelClient <|.. OpenAIClient : implements
AIModelClient <|.. ClaudeClient : implements

' Repository Layer Dependencies (메서드에서 Entity 관리)
AIScheduleRepository ..> AISchedule : manages
AIJobRepository ..> AIJob : manages
AIRecommendationRepository ..> AIRecommendation : manages

' Controller Layer Dependencies (메서드 파라미터/반환값)
AIScheduleController ..> GenerateScheduleRequest : uses
AIScheduleController ..> GenerateScheduleResponse : uses
AIScheduleController ..> GenerationStatusResponse : uses
AIScheduleController ..> GeneratedScheduleResponse : uses
AIScheduleController ..> RegenerateScheduleRequest : uses
AIScheduleController ..> WeatherImpactRequest : uses
AIScheduleController ..> WeatherImpactResponse : uses

AIRecommendationController ..> RecommendationRequest : uses
AIRecommendationController ..> RecommendationResponse : uses

' Service Layer Dependencies (메서드 파라미터/반환값)
AIScheduleServiceImpl ..> GenerateScheduleRequest : uses
AIScheduleServiceImpl ..> GenerateScheduleResponse : uses
AIScheduleServiceImpl ..> GenerationStatusResponse : uses
AIScheduleServiceImpl ..> GeneratedScheduleDto : uses
AIScheduleServiceImpl ..> RegenerateScheduleRequest : uses
AIScheduleServiceImpl ..> WeatherImpactRequest : uses
AIScheduleServiceImpl ..> WeatherImpactResponse : uses

AIRecommendationServiceImpl ..> RecommendationRequest : uses
AIRecommendationServiceImpl ..> RecommendationResponse : uses

' Entity Enum Dependencies (프로퍼티로 사용)
AISchedule --> "1" AIJobStatus : -status
AIJob --> "1" AIJobType : -jobType
AIJob --> "1" AIJobStatus : -status

' DTO Enum Dependencies (프로퍼티로 사용)
GenerateScheduleResponse --> "1" AIJobStatus : -status
GenerationStatusResponse --> "1" AIJobStatus : -status
GeneratedScheduleDto --> "1" AIJobStatus : -status

@enduml