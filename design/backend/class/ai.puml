@startuml
!theme mono

title AI Service - Detailed Class Design (Layered Architecture)

' ===== AI Service Controller Layer =====
package "com.unicorn.tripgen.ai.controller" <<Container>> {
    class AIScheduleController {
        -aiScheduleService: AIScheduleService
        -generationStatusService: GenerationStatusService
        +AIScheduleController(aiScheduleService: AIScheduleService, generationStatusService: GenerationStatusService)
        +generateAISchedule(@RequestBody request: GenerateScheduleRequestDto): ResponseEntity<ApiResponse<GenerateScheduleResponseDto>>
        +getGenerationStatus(@PathVariable requestId: String): ResponseEntity<ApiResponse<GenerationStatusResponseDto>>
        +getGeneratedSchedule(@PathVariable requestId: String): ResponseEntity<ApiResponse<GeneratedScheduleResponseDto>>
        +cancelGeneration(@PathVariable requestId: String): ResponseEntity<Void>
        +regenerateDaySchedule(@RequestBody request: RegenerateScheduleRequestDto): ResponseEntity<ApiResponse<GenerateScheduleResponseDto>>
        +analyzeWeatherImpact(@PathVariable tripId: String, @RequestBody request: WeatherImpactRequestDto): ResponseEntity<ApiResponse<WeatherImpactResponseDto>>
    }

    class AIRecommendationController {
        -aiRecommendationService: AIRecommendationService
        +AIRecommendationController(aiRecommendationService: AIRecommendationService)
        +generatePlaceRecommendations(@PathVariable placeId: String, @RequestBody request: RecommendationRequestDto): ResponseEntity<ApiResponse<RecommendationResponseDto>>
    }

    class AIExceptionHandler {
        +handleAIServiceException(ex: AIServiceException): ResponseEntity<ApiResponse<Void>>
        +handleAIModelException(ex: AIModelException): ResponseEntity<ApiResponse<Void>>
        +handleGenerationTimeoutException(ex: GenerationTimeoutException): ResponseEntity<ApiResponse<Void>>
        +handleValidationException(ex: ValidationException): ResponseEntity<ApiResponse<Void>>
    }
}

' ===== AI Service Layer =====
package "com.unicorn.tripgen.ai.service" <<Container>> {
    interface AIScheduleService {
        +generateSchedule(request: GenerateScheduleRequestDto): GenerateScheduleResponseDto
        +getGenerationStatus(requestId: String): GenerationStatusResponseDto
        +getGeneratedSchedule(requestId: String): GeneratedScheduleResponseDto
        +cancelGeneration(requestId: String): void
        +regenerateDaySchedule(request: RegenerateScheduleRequestDto): GenerateScheduleResponseDto
        +analyzeWeatherImpact(tripId: String, request: WeatherImpactRequestDto): WeatherImpactResponseDto
    }

    class AIScheduleServiceImpl implements AIScheduleService {
        -aiModelService: AIModelService
        -scheduleRepository: ScheduleRepository
        -generationStatusRepository: GenerationStatusRepository
        -cacheService: CacheService
        -eventPublisher: EventPublisher
        -asyncTaskExecutor: TaskExecutor
        +AIScheduleServiceImpl(aiModelService: AIModelService, scheduleRepository: ScheduleRepository, generationStatusRepository: GenerationStatusRepository, cacheService: CacheService, eventPublisher: EventPublisher, asyncTaskExecutor: TaskExecutor)
        +generateSchedule(request: GenerateScheduleRequestDto): GenerateScheduleResponseDto
        +getGenerationStatus(requestId: String): GenerationStatusResponseDto
        +getGeneratedSchedule(requestId: String): GeneratedScheduleResponseDto
        +cancelGeneration(requestId: String): void
        +regenerateDaySchedule(request: RegenerateScheduleRequestDto): GenerateScheduleResponseDto
        +analyzeWeatherImpact(tripId: String, request: WeatherImpactRequestDto): WeatherImpactResponseDto
        -processScheduleGeneration(request: GenerateScheduleRequestDto, requestId: String): void
        -validateGenerationRequest(request: GenerateScheduleRequestDto): void
        -buildPrompt(request: GenerateScheduleRequestDto): String
        -parseAIResponse(response: String): List<DailySchedule>
        -saveGeneratedSchedule(requestId: String, schedules: List<DailySchedule>): void
        -updateGenerationStatus(requestId: String, status: GenerationStatus, progress: Integer, step: String): void
    }

    interface AIRecommendationService {
        +generatePlaceRecommendations(placeId: String, request: RecommendationRequestDto): RecommendationResponseDto
    }

    class AIRecommendationServiceImpl implements AIRecommendationService {
        -aiModelService: AIModelService
        -recommendationRepository: RecommendationRepository
        -cacheService: CacheService
        +AIRecommendationServiceImpl(aiModelService: AIModelService, recommendationRepository: RecommendationRepository, cacheService: CacheService)
        +generatePlaceRecommendations(placeId: String, request: RecommendationRequestDto): RecommendationResponseDto
        -buildRecommendationPrompt(placeId: String, request: RecommendationRequestDto): String
        -parseRecommendationResponse(response: String): PlaceRecommendation
        -cacheRecommendation(placeId: String, recommendation: PlaceRecommendation): void
    }

    interface GenerationStatusService {
        +createGenerationStatus(requestId: String, tripId: String): void
        +updateStatus(requestId: String, status: GenerationStatus, progress: Integer, step: String): void
        +getStatusByRequestId(requestId: String): GenerationStatusEntity
        +markAsCompleted(requestId: String): void
        +markAsFailed(requestId: String, error: String): void
    }

    class GenerationStatusServiceImpl implements GenerationStatusService {
        -generationStatusRepository: GenerationStatusRepository
        -cacheService: CacheService
        +GenerationStatusServiceImpl(generationStatusRepository: GenerationStatusRepository, cacheService: CacheService)
        +createGenerationStatus(requestId: String, tripId: String): void
        +updateStatus(requestId: String, status: GenerationStatus, progress: Integer, step: String): void
        +getStatusByRequestId(requestId: String): GenerationStatusEntity
        +markAsCompleted(requestId: String): void
        +markAsFailed(requestId: String, error: String): void
        -cacheStatus(status: GenerationStatusEntity): void
    }

    interface AIModelService {
        +generateSchedule(prompt: String): String
        +generateRecommendation(prompt: String): String
        +analyzeWeatherImpact(prompt: String): String
    }

    class OpenAIModelService implements AIModelService {
        -openAIClient: OpenAIClient
        -modelConfig: AIModelConfig
        +OpenAIModelService(openAIClient: OpenAIClient, modelConfig: AIModelConfig)
        +generateSchedule(prompt: String): String
        +generateRecommendation(prompt: String): String
        +analyzeWeatherImpact(prompt: String): String
        -buildCompletionRequest(prompt: String, maxTokens: Integer): CompletionRequest
        -extractContentFromResponse(response: CompletionResponse): String
        -handleRateLimiting(): void
    }

    class GeminiModelService implements AIModelService {
        -geminiClient: GeminiClient
        -modelConfig: AIModelConfig
        +GeminiModelService(geminiClient: GeminiClient, modelConfig: AIModelConfig)
        +generateSchedule(prompt: String): String
        +generateRecommendation(prompt: String): String
        +analyzeWeatherImpact(prompt: String): String
        -buildGenerateContentRequest(prompt: String): GenerateContentRequest
        -extractTextFromResponse(response: GenerateContentResponse): String
    }
}

' ===== AI Repository Layer =====
package "com.unicorn.tripgen.ai.repository" <<Container>> {
    interface ScheduleRepository extends JpaRepository<SchedulePlan, String> {
        +findByRequestId(requestId: String): Optional<SchedulePlan>
        +findByTripId(tripId: String): List<SchedulePlan>
        +deleteByRequestId(requestId: String): void
        +findByTripIdAndDay(tripId: String, day: Integer): Optional<SchedulePlan>
    }

    interface GenerationStatusRepository extends JpaRepository<GenerationStatusEntity, String> {
        +findByRequestId(requestId: String): Optional<GenerationStatusEntity>
        +findByStatusAndCreatedAtBefore(status: GenerationStatus, cutoffTime: LocalDateTime): List<GenerationStatusEntity>
        +deleteByRequestId(requestId: String): void
    }

    interface RecommendationRepository extends JpaRepository<PlaceRecommendationEntity, String> {
        +findByPlaceId(placeId: String): Optional<PlaceRecommendationEntity>
        +findByPlaceIdAndCacheExpiryAfter(placeId: String, now: LocalDateTime): Optional<PlaceRecommendationEntity>
        +deleteByPlaceId(placeId: String): void
        +deleteByPlaceIdIn(placeIds: List<String>): void
    }
}

' ===== AI Entity Layer =====
package "com.unicorn.tripgen.ai.entity" <<Container>> {
    class SchedulePlan extends BaseTimeEntity {
        -id: String
        -requestId: String
        -tripId: String
        -day: Integer
        -date: LocalDate
        -destinationName: String
        -weather: String
        -places: String
        -metadata: String
        +SchedulePlan()
        +SchedulePlan(requestId: String, tripId: String, day: Integer, date: LocalDate, destinationName: String, weather: String, places: String, metadata: String)
        +getId(): String
        +getRequestId(): String
        +getTripId(): String
        +getDay(): Integer
        +getDate(): LocalDate
        +getDestinationName(): String
        +getWeather(): String
        +getPlaces(): String
        +getMetadata(): String
    }

    class GenerationStatusEntity extends BaseTimeEntity {
        -id: String
        -requestId: String
        -tripId: String
        -status: GenerationStatus
        -progress: Integer
        -currentStep: String
        -steps: String
        -estimatedTime: Integer
        -error: String
        +GenerationStatusEntity()
        +GenerationStatusEntity(requestId: String, tripId: String, status: GenerationStatus)
        +getId(): String
        +getRequestId(): String
        +getTripId(): String
        +getStatus(): GenerationStatus
        +getProgress(): Integer
        +getCurrentStep(): String
        +getSteps(): String
        +getEstimatedTime(): Integer
        +getError(): String
        +updateProgress(progress: Integer, step: String): void
        +markCompleted(): void
        +markFailed(error: String): void
    }

    class PlaceRecommendationEntity extends BaseTimeEntity {
        -id: String
        -placeId: String
        -recommendations: String
        -cacheExpiry: LocalDateTime
        +PlaceRecommendationEntity()
        +PlaceRecommendationEntity(placeId: String, recommendations: String, cacheExpiry: LocalDateTime)
        +getId(): String
        +getPlaceId(): String
        +getRecommendations(): String
        +getCacheExpiry(): LocalDateTime
        +isExpired(): boolean
    }

    enum GenerationStatus {
        QUEUED
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
    }
}

' ===== AI DTO Layer =====
package "com.unicorn.tripgen.ai.dto" <<Container>> {
    class GenerateScheduleRequestDto {
        -tripId: String
        -tripName: String
        -transportMode: String
        -startTime: String
        -members: List<TripMemberDto>
        -destinations: List<TripDestinationDto>
        -specialRequests: String
        +GenerateScheduleRequestDto()
        +getTripId(): String
        +getTripName(): String
        +getTransportMode(): String
        +getStartTime(): String
        +getMembers(): List<TripMemberDto>
        +getDestinations(): List<TripDestinationDto>
        +getSpecialRequests(): String
        +validate(): void
    }

    class GenerateScheduleResponseDto {
        -requestId: String
        -status: String
        -message: String
        -estimatedTime: Integer
        +GenerateScheduleResponseDto()
        +GenerateScheduleResponseDto(requestId: String, status: String, message: String, estimatedTime: Integer)
        +getRequestId(): String
        +getStatus(): String
        +getMessage(): String
        +getEstimatedTime(): Integer
    }

    class GenerationStatusResponseDto {
        -requestId: String
        -status: String
        -progress: Integer
        -currentStep: String
        -steps: List<GenerationStepDto>
        -estimatedTime: Integer
        -error: String
        +GenerationStatusResponseDto()
        +getRequestId(): String
        +getStatus(): String
        +getProgress(): Integer
        +getCurrentStep(): String
        +getSteps(): List<GenerationStepDto>
        +getEstimatedTime(): Integer
        +getError(): String
    }

    class GeneratedScheduleResponseDto {
        -requestId: String
        -tripId: String
        -status: String
        -generatedAt: LocalDateTime
        -schedules: List<DailyScheduleDto>
        -metadata: ScheduleMetadataDto
        +GeneratedScheduleResponseDto()
        +getRequestId(): String
        +getTripId(): String
        +getStatus(): String
        +getGeneratedAt(): LocalDateTime
        +getSchedules(): List<DailyScheduleDto>
        +getMetadata(): ScheduleMetadataDto
    }

    class RegenerateScheduleRequestDto {
        -tripId: String
        -day: Integer
        -existingSchedules: List<ExistingScheduleDto>
        -specialRequests: String
        +RegenerateScheduleRequestDto()
        +getTripId(): String
        +getDay(): Integer
        +getExistingSchedules(): List<ExistingScheduleDto>
        +getSpecialRequests(): String
    }

    class RecommendationRequestDto {
        -placeName: String
        -placeType: String
        -placeAddress: String
        -userProfile: UserProfileDto
        -tripContext: TripContextDto
        +RecommendationRequestDto()
        +getPlaceName(): String
        +getPlaceType(): String
        +getPlaceAddress(): String
        +getUserProfile(): UserProfileDto
        +getTripContext(): TripContextDto
    }

    class RecommendationResponseDto {
        -placeId: String
        -recommendations: PlaceRecommendationDto
        -generatedAt: LocalDateTime
        -cacheExpiry: LocalDateTime
        +RecommendationResponseDto()
        +getPlaceId(): String
        +getRecommendations(): PlaceRecommendationDto
        +getGeneratedAt(): LocalDateTime
        +getCacheExpiry(): LocalDateTime
    }

    class WeatherImpactRequestDto {
        -schedules: List<ScheduleForAnalysisDto>
        -weatherChanges: List<WeatherChangeDto>
        +WeatherImpactRequestDto()
        +getSchedules(): List<ScheduleForAnalysisDto>
        +getWeatherChanges(): List<WeatherChangeDto>
    }

    class WeatherImpactResponseDto {
        -impactedDays: List<ImpactedDayDto>
        +WeatherImpactResponseDto()
        +getImpactedDays(): List<ImpactedDayDto>
    }

    ' Supporting DTOs
    class TripMemberDto {
        -name: String
        -age: Integer
        -gender: String
        -healthStatus: String
        -preferences: List<String>
    }

    class TripDestinationDto {
        -destinationName: String
        -nights: Integer
        -startDate: LocalDate
        -endDate: LocalDate
        -accommodation: String
        -checkInTime: String
        -checkOutTime: String
    }

    class DailyScheduleDto {
        -day: Integer
        -date: LocalDate
        -destinationName: String
        -weather: WeatherDto
        -places: List<PlaceScheduleDto>
    }

    class PlaceScheduleDto {
        -placeId: String
        -placeName: String
        -category: String
        -startTime: String
        -duration: Integer
        -transportation: TransportationDto
        -healthConsideration: HealthConsiderationDto
        -weatherConsideration: WeatherConsiderationDto
    }

    class GenerationStepDto {
        -step: String
        -status: String
    }

    class ScheduleMetadataDto {
        -totalDays: Integer
        -totalPlaces: Integer
        -healthStatusConsidered: String
        -weatherConsidered: Boolean
    }

    class ExistingScheduleDto {
        -day: Integer
        -places: List<String>
    }

    class UserProfileDto {
        -memberComposition: String
        -healthStatus: String
        -transportMode: String
        -preferences: List<String>
    }

    class TripContextDto {
        -visitDate: LocalDate
        -visitTime: String
        -previousPlace: String
        -nextPlace: String
    }

    class PlaceRecommendationDto {
        -reasons: List<String>
        -tips: RecommendationTipsDto
    }

    class RecommendationTipsDto {
        -description: String
        -events: List<String>
        -bestVisitTime: String
        -estimatedDuration: String
        -photoSpots: List<String>
        -practicalTips: List<String>
        -alternativePlaces: List<AlternativePlaceDto>
    }

    class AlternativePlaceDto {
        -name: String
        -reason: String
        -distance: String
    }

    class ScheduleForAnalysisDto {
        -day: Integer
        -date: LocalDate
        -places: List<AnalysisPlaceDto>
    }

    class AnalysisPlaceDto {
        -placeId: String
        -isOutdoor: Boolean
    }

    class WeatherChangeDto {
        -date: LocalDate
        -previousCondition: String
        -newCondition: String
        -severity: String
    }

    class ImpactedDayDto {
        -day: Integer
        -date: LocalDate
        -reason: String
        -affectedPlaces: List<String>
        -recommendation: String
        -alternativeOptions: List<String>
    }

    class WeatherDto {
        -condition: String
        -temperature: TemperatureDto
        -precipitation: Double
        -warnings: List<String>
    }

    class TemperatureDto {
        -min: Double
        -max: Double
    }

    class TransportationDto {
        -type: String
        -duration: Integer
        -distance: Double
        -route: String
        -parkingInfo: ParkingInfoDto
    }

    class ParkingInfoDto {
        -name: String
        -distance: String
        -estimatedCost: String
    }

    class HealthConsiderationDto {
        -restPoints: List<String>
        -optionalActivities: OptionalActivitiesDto
        -accessibility: List<String>
        -walkingDistance: Double
    }

    class OptionalActivitiesDto {
        -basic: String
        -active: String
    }

    class WeatherConsiderationDto {
        -indoorAlternative: String
        -preparationItems: List<String>
    }
}

' ===== AI Configuration Layer =====
package "com.unicorn.tripgen.ai.config" <<Container>> {
    class AIServiceConfig {
        +openAIClient(): OpenAIClient
        +geminiClient(): GeminiClient
        +aiModelConfig(): AIModelConfig
        +asyncTaskExecutor(): TaskExecutor
        +aiModelService(@Value("${ai.provider}") provider: String, openAIClient: OpenAIClient, geminiClient: GeminiClient, modelConfig: AIModelConfig): AIModelService
    }

    class AIModelConfig {
        -provider: String
        -openaiApiKey: String
        -openaiModel: String
        -openaiMaxTokens: Integer
        -openaiTemperature: Double
        -geminiApiKey: String
        -geminiModel: String
        -geminiMaxTokens: Integer
        -geminiTemperature: Double
        -requestTimeoutSeconds: Integer
        -retryAttempts: Integer
        +getProvider(): String
        +getOpenaiApiKey(): String
        +getOpenaiModel(): String
        +getOpenaiMaxTokens(): Integer
        +getOpenaiTemperature(): Double
        +getGeminiApiKey(): String
        +getGeminiModel(): String
        +getGeminiMaxTokens(): Integer
        +getGeminiTemperature(): Double
        +getRequestTimeoutSeconds(): Integer
        +getRetryAttempts(): Integer
    }

    class CacheConfig {
        +redisCacheManager(): CacheManager
        +redisTemplate(): RedisTemplate<String, Object>
        +cacheService(redisTemplate: RedisTemplate<String, Object>): CacheService
    }

    class AsyncConfig {
        +taskExecutor(): TaskExecutor
        +aiTaskExecutor(): TaskExecutor
    }
}

' ===== Exception Classes =====
package "com.unicorn.tripgen.ai.exception" <<Container>> {
    class AIServiceException extends BusinessException {
        +AIServiceException(message: String)
        +AIServiceException(message: String, cause: Throwable)
    }

    class AIModelException extends InfraException {
        +AIModelException(message: String)
        +AIModelException(message: String, cause: Throwable)
    }

    class GenerationTimeoutException extends InfraException {
        +GenerationTimeoutException(message: String)
        +GenerationTimeoutException(requestId: String, timeoutSeconds: Integer)
    }

    class ScheduleNotFoundException extends BusinessException {
        +ScheduleNotFoundException(requestId: String)
    }

    class RecommendationNotFoundException extends BusinessException {
        +RecommendationNotFoundException(placeId: String)
    }
}

' ===== Event Classes =====
package "com.unicorn.tripgen.ai.event" <<Container>> {
    class ScheduleGenerationStartedEvent extends BaseEvent {
        -requestId: String
        -tripId: String
        +ScheduleGenerationStartedEvent(requestId: String, tripId: String)
        +getRequestId(): String
        +getTripId(): String
    }

    class ScheduleGenerationCompletedEvent extends BaseEvent {
        -requestId: String
        -tripId: String
        -totalPlaces: Integer
        +ScheduleGenerationCompletedEvent(requestId: String, tripId: String, totalPlaces: Integer)
        +getRequestId(): String
        +getTripId(): String
        +getTotalPlaces(): Integer
    }

    class ScheduleGenerationFailedEvent extends BaseEvent {
        -requestId: String
        -tripId: String
        -error: String
        +ScheduleGenerationFailedEvent(requestId: String, tripId: String, error: String)
        +getRequestId(): String
        +getTripId(): String
        +getError(): String
    }
}

' ===== Model Classes =====
package "com.unicorn.tripgen.ai.model" <<Container>> {
    class DailySchedule {
        -day: Integer
        -date: LocalDate
        -destinationName: String
        -weather: Weather
        -places: List<PlaceSchedule>
        +DailySchedule()
        +DailySchedule(day: Integer, date: LocalDate, destinationName: String, weather: Weather, places: List<PlaceSchedule>)
        +getDay(): Integer
        +getDate(): LocalDate
        +getDestinationName(): String
        +getWeather(): Weather
        +getPlaces(): List<PlaceSchedule>
    }

    class PlaceSchedule {
        -placeId: String
        -placeName: String
        -category: String
        -startTime: LocalTime
        -duration: Integer
        -transportation: Transportation
        -healthConsideration: HealthConsideration
        -weatherConsideration: WeatherConsideration
        +PlaceSchedule()
        +getPlaceId(): String
        +getPlaceName(): String
        +getCategory(): String
        +getStartTime(): LocalTime
        +getDuration(): Integer
        +getTransportation(): Transportation
        +getHealthConsideration(): HealthConsideration
        +getWeatherConsideration(): WeatherConsideration
    }

    class PlaceRecommendation {
        -reasons: List<String>
        -tips: RecommendationTips
        +PlaceRecommendation()
        +PlaceRecommendation(reasons: List<String>, tips: RecommendationTips)
        +getReasons(): List<String>
        +getTips(): RecommendationTips
    }

    class RecommendationTips {
        -description: String
        -events: List<String>
        -bestVisitTime: String
        -estimatedDuration: String
        -photoSpots: List<String>
        -practicalTips: List<String>
        -alternativePlaces: List<AlternativePlace>
        +RecommendationTips()
        +getDescription(): String
        +getEvents(): List<String>
        +getBestVisitTime(): String
        +getEstimatedDuration(): String
        +getPhotoSpots(): List<String>
        +getPracticalTips(): List<String>
        +getAlternativePlaces(): List<AlternativePlace>
    }

    class AlternativePlace {
        -name: String
        -reason: String
        -distance: String
        +AlternativePlace()
        +AlternativePlace(name: String, reason: String, distance: String)
        +getName(): String
        +getReason(): String
        +getDistance(): String
    }

    class Weather {
        -condition: String
        -temperature: Temperature
        -precipitation: Double
        -warnings: List<String>
        +Weather()
        +getCondition(): String
        +getTemperature(): Temperature
        +getPrecipitation(): Double
        +getWarnings(): List<String>
    }

    class Temperature {
        -min: Double
        -max: Double
        +Temperature()
        +Temperature(min: Double, max: Double)
        +getMin(): Double
        +getMax(): Double
    }

    class Transportation {
        -type: String
        -duration: Integer
        -distance: Double
        -route: String
        -parkingInfo: ParkingInfo
        +Transportation()
        +getType(): String
        +getDuration(): Integer
        +getDistance(): Double
        +getRoute(): String
        +getParkingInfo(): ParkingInfo
    }

    class ParkingInfo {
        -name: String
        -distance: String
        -estimatedCost: String
        +ParkingInfo()
        +ParkingInfo(name: String, distance: String, estimatedCost: String)
        +getName(): String
        +getDistance(): String
        +getEstimatedCost(): String
    }

    class HealthConsideration {
        -restPoints: List<String>
        -optionalActivities: OptionalActivities
        -accessibility: List<String>
        -walkingDistance: Double
        +HealthConsideration()
        +getRestPoints(): List<String>
        +getOptionalActivities(): OptionalActivities
        +getAccessibility(): List<String>
        +getWalkingDistance(): Double
    }

    class OptionalActivities {
        -basic: String
        -active: String
        +OptionalActivities()
        +OptionalActivities(basic: String, active: String)
        +getBasic(): String
        +getActive(): String
    }

    class WeatherConsideration {
        -indoorAlternative: String
        -preparationItems: List<String>
        +WeatherConsideration()
        +WeatherConsideration(indoorAlternative: String, preparationItems: List<String>)
        +getIndoorAlternative(): String
        +getPreparationItems(): List<String>
    }
}

' ===== Relationships =====
' Controller Dependencies
AIScheduleController --> AIScheduleService : uses
AIScheduleController --> GenerationStatusService : uses
AIRecommendationController --> AIRecommendationService : uses

' Service Dependencies
AIScheduleServiceImpl --> AIModelService : uses
AIScheduleServiceImpl --> ScheduleRepository : uses
AIScheduleServiceImpl --> GenerationStatusRepository : uses
AIScheduleServiceImpl --> CacheService : uses
AIScheduleServiceImpl --> EventPublisher : uses

AIRecommendationServiceImpl --> AIModelService : uses
AIRecommendationServiceImpl --> RecommendationRepository : uses
AIRecommendationServiceImpl --> CacheService : uses

GenerationStatusServiceImpl --> GenerationStatusRepository : uses
GenerationStatusServiceImpl --> CacheService : uses

OpenAIModelService --> AIModelConfig : uses
GeminiModelService --> AIModelConfig : uses

' Entity Relationships
SchedulePlan --|> BaseTimeEntity : extends
GenerationStatusEntity --|> BaseTimeEntity : extends
PlaceRecommendationEntity --|> BaseTimeEntity : extends

' Exception Relationships
AIServiceException --|> BusinessException : extends
AIModelException --|> InfraException : extends
GenerationTimeoutException --|> InfraException : extends
ScheduleNotFoundException --|> BusinessException : extends
RecommendationNotFoundException --|> BusinessException : extends

' Event Relationships
ScheduleGenerationStartedEvent --|> BaseEvent : extends
ScheduleGenerationCompletedEvent --|> BaseEvent : extends
ScheduleGenerationFailedEvent --|> BaseEvent : extends

' Configuration Dependencies
AIServiceConfig --> AIModelConfig : creates
AIServiceConfig --> OpenAIModelService : creates
AIServiceConfig --> GeminiModelService : creates
CacheConfig --> CacheService : creates

' Model Relationships
DailySchedule --> Weather : contains
DailySchedule --> PlaceSchedule : contains
PlaceSchedule --> Transportation : contains
PlaceSchedule --> HealthConsideration : contains
PlaceSchedule --> WeatherConsideration : contains
PlaceRecommendation --> RecommendationTips : contains
RecommendationTips --> AlternativePlace : contains
Weather --> Temperature : contains
Transportation --> ParkingInfo : contains
HealthConsideration --> OptionalActivities : contains

@enduml