@startuml
!theme mono

title User Service - 클래스 설계

' 패키지 정의
package "com.tripgen.user.presentation.controller" {
    class UserController {
        - userService: UserService
        - authService: AuthService
        - validationService: ValidationService
        - imageService: ImageService
        - jwtTokenService: JwtTokenService
        --
        + registerUser(RegisterRequest): ResponseEntity<RegisterResponse>
        + loginUser(LoginRequest): ResponseEntity<LoginResponse>
        + logoutUser(HttpServletRequest): ResponseEntity<Void>
        + getProfile(HttpServletRequest): ResponseEntity<UserProfile>
        + updateProfile(UpdateProfileRequest, HttpServletRequest): ResponseEntity<UserProfile>
        + uploadAvatar(MultipartFile, HttpServletRequest): ResponseEntity<Map<String, String>>
        + changePassword(ChangePasswordRequest, HttpServletRequest): ResponseEntity<Map<String, String>>
        + checkUsername(String): ResponseEntity<Map<String, Object>>
        + checkEmail(String): ResponseEntity<Map<String, Object>>
        - extractToken(HttpServletRequest): String
    }
}

package "com.tripgen.user.application.service" {
    class UserService {
        - userRepository: UserRepository
        - passwordEncoder: PasswordEncoder
        - emailService: EmailService
        - cacheManager: CacheManager
        --
        + createUser(RegisterRequest): User
        + updateProfile(Long, UpdateProfileRequest): User
        + changePassword(Long, String, String): void
        + getUserById(Long): User
        + checkUsernameAvailability(String): boolean
        + checkEmailAvailability(String): boolean
        - validateUniqueConstraints(String, String): void
        - updateCache(User): void
    }

    class AuthService {
        - userRepository: UserRepository
        - passwordEncoder: PasswordEncoder
        - jwtTokenService: JwtTokenService
        - sessionService: SessionService
        - cacheManager: CacheManager
        - maxLoginAttempts: int = 5
        --
        + authenticateUser(String, String, boolean): AuthResult
        + logout(String): void
        + checkLoginAttempts(String): boolean
        + incrementFailureCount(String): void
        + clearFailureCount(String): void
        - validateCredentials(User, String): boolean
        - createAuthResult(User, boolean): AuthResult
    }

    class ValidationService {
        - usernamePattern: Pattern
        - emailPattern: Pattern
        - passwordPattern: Pattern
        - phonePattern: Pattern
        --
        + validateRegisterRequest(RegisterRequest): ValidationResult
        + validateLoginRequest(LoginRequest): ValidationResult
        + validateUpdateProfileRequest(UpdateProfileRequest): ValidationResult
        + validatePasswordChangeRequest(ChangePasswordRequest): ValidationResult
        + validateImageFile(MultipartFile): ValidationResult
        - checkPasswordStrength(String): PasswordStrength
    }

    class JwtTokenService {
        - secretKey: String
        - accessTokenExpiry: long = 3600000
        - refreshTokenExpiry: long = 604800000
        --
        + generateTokenPair(Long, String): TokenPair
        + validateToken(String): boolean
        + extractClaims(String): Claims
        + extractUserId(String): Long
        + extractUsername(String): String
        + blacklistToken(String): void
        - createToken(Map<String, Object>, long): String
    }

    class SessionService {
        - redisTemplate: RedisTemplate
        - defaultSessionTimeout: long = 1800
        - rememberMeTimeout: long = 2592000
        --
        + createSession(Long, TokenPair, boolean): SessionInfo
        + getSession(String): Optional<SessionInfo>
        + invalidateSession(String): void
        + invalidateAllUserSessions(Long): void
        + extendSession(String): void
    }

    class ImageService {
        - fileStorageService: FileStorageService
        - userRepository: UserRepository
        - maxFileSize: long = 5242880
        - allowedTypes: List<String>
        --
        + uploadProfileImage(Long, MultipartFile): String
        + deleteProfileImage(Long): void
        - resizeAndOptimize(BufferedImage): BufferedImage
        - validateImageFile(MultipartFile): void
    }

    class EmailService {
        - mailSender: JavaMailSender
        - templateEngine: TemplateEngine
        - fromAddress: String
        --
        + sendWelcomeEmail(User): void
        + sendVerificationEmail(String, String): void
        + sendPasswordChangeNotification(User): void
        - createEmailContent(String, Map<String, Object>): String
    }
}

package "com.tripgen.user.domain.model" {
    class User {
        - id: Long
        - username: String
        - password: String
        - name: String
        - email: String
        - phone: String
        - avatarUrl: String
        - status: UserStatus
        - emailVerified: boolean
        - termsAccepted: boolean
        - createdAt: LocalDateTime
        - updatedAt: LocalDateTime
        - lastLoginAt: LocalDateTime
        --
        + updateProfile(String, String, String): void
        + updatePassword(String): void
        + updateAvatar(String): void
        + updateLastLogin(): void
        + lock(): void
        + unlock(): void
        + isActive(): boolean
    }

    enum UserStatus {
        ACTIVE
        INACTIVE
        LOCKED
        DELETED
    }

    class AuthResult {
        - success: boolean
        - user: User
        - tokenPair: TokenPair
        - sessionInfo: SessionInfo
        --
        + isSuccess(): boolean
        + getUser(): User
        + getTokenPair(): TokenPair
        + getSessionInfo(): SessionInfo
    }

    class TokenPair {
        - accessToken: String
        - refreshToken: String
        - accessTokenExpiry: LocalDateTime
        - refreshTokenExpiry: LocalDateTime
        --
        + getAccessToken(): String
        + getRefreshToken(): String
        + getAccessTokenExpiry(): LocalDateTime
        + getRefreshTokenExpiry(): LocalDateTime
    }

    class SessionInfo {
        - sessionId: String
        - userId: Long
        - createdAt: LocalDateTime
        - expiresAt: LocalDateTime
        - rememberMe: boolean
        --
        + getSessionId(): String
        + getUserId(): Long
        + getCreatedAt(): LocalDateTime
        + getExpiresAt(): LocalDateTime
        + isRememberMe(): boolean
        + isExpired(): boolean
    }

    class ValidationResult {
        - valid: boolean
        - errors: Map<String, List<String>>
        --
        + isValid(): boolean
        + getErrors(): Map<String, List<String>>
        + addError(String, String): void
        + hasFieldError(String): boolean
    }

    enum PasswordStrength {
        WEAK
        MEDIUM
        STRONG
    }
}

package "com.tripgen.user.domain.repository" {
    interface UserRepository {
        + save(User): User
        + findById(Long): Optional<User>
        + findByUsername(String): Optional<User>
        + findByEmail(String): Optional<User>
        + existsByUsername(String): boolean
        + existsByEmail(String): boolean
        + updatePassword(Long, String): void
        + updateProfileImageUrl(Long, String): void
        + deleteById(Long): void
    }
}

package "com.tripgen.user.infrastructure.persistence" {
    class UserRepositoryImpl implements UserRepository {
        - jdbcTemplate: JdbcTemplate
        - userRowMapper: RowMapper<User>
        --
        + save(User): User
        + findById(Long): Optional<User>
        + findByUsername(String): Optional<User>
        + findByEmail(String): Optional<User>
        + existsByUsername(String): boolean
        + existsByEmail(String): boolean
        + updatePassword(Long, String): void
        + updateProfileImageUrl(Long, String): void
        + deleteById(Long): void
    }
}

package "com.tripgen.user.infrastructure.storage" {
    interface FileStorageService {
        + saveFile(MultipartFile, String): String
        + deleteFile(String): void
        + getFileUrl(String): String
    }

    class S3StorageService implements FileStorageService {
        - s3Client: AmazonS3
        - bucketName: String
        --
        + saveFile(MultipartFile, String): String
        + deleteFile(String): void
        + getFileUrl(String): String
        - generateFileName(String, String): String
    }
}

package "com.tripgen.user.infrastructure.security" {
    interface PasswordEncoder {
        + encode(String): String
        + matches(String, String): boolean
    }

    class BCryptPasswordEncoder implements PasswordEncoder {
        - strength: int = 10
        --
        + encode(String): String
        + matches(String, String): boolean
    }
}

package "com.tripgen.user.infrastructure.cache" {
    interface CacheManager {
        + get(String): Optional<Object>
        + put(String, Object): void
        + put(String, Object, long): void
        + evict(String): void
        + evictAll(): void
    }

    class RedisCacheManager implements CacheManager {
        - redisTemplate: RedisTemplate
        - defaultTTL: long = 3600
        --
        + get(String): Optional<Object>
        + put(String, Object): void
        + put(String, Object, long): void
        + evict(String): void
        + evictAll(): void
    }
}

package "com.tripgen.user.presentation.dto.request" {
    class RegisterRequest {
        - name: String
        - email: String
        - phone: String
        - username: String
        - password: String
        - passwordConfirm: String
        - termsAccepted: boolean
    }

    class LoginRequest {
        - username: String
        - password: String
        - rememberMe: boolean
    }

    class UpdateProfileRequest {
        - name: String
        - phone: String
        - email: String
    }

    class ChangePasswordRequest {
        - currentPassword: String
        - newPassword: String
        - newPasswordConfirm: String
    }
}

package "com.tripgen.user.presentation.dto.response" {
    class RegisterResponse {
        - userId: String
        - username: String
        - message: String
    }

    class LoginResponse {
        - accessToken: String
        - refreshToken: String
        - tokenType: String
        - expiresIn: long
        - user: UserProfile
    }

    class UserProfile {
        - userId: String
        - username: String
        - name: String
        - email: String
        - phone: String
        - avatarUrl: String
        - createdAt: LocalDateTime
        - updatedAt: LocalDateTime
    }
}

package "com.tripgen.user.common.exception" {
    class UserNotFoundException extends RuntimeException {
        - userId: Long
        - username: String
        --
        + UserNotFoundException(Long)
        + UserNotFoundException(String)
    }

    class DuplicateUserException extends RuntimeException {
        - field: String
        - value: String
        --
        + DuplicateUserException(String, String)
    }

    class InvalidCredentialsException extends RuntimeException {
        - attempts: int
        --
        + InvalidCredentialsException(String)
        + InvalidCredentialsException(String, int)
    }

    class AccountLockedException extends RuntimeException {
        - lockUntil: LocalDateTime
        --
        + AccountLockedException(String, LocalDateTime)
    }
}

' 관계 정의
UserController --> UserService
UserController --> AuthService
UserController --> ValidationService
UserController --> ImageService
UserController --> JwtTokenService

UserService --> UserRepository
UserService --> PasswordEncoder
UserService --> EmailService
UserService --> CacheManager

AuthService --> UserRepository
AuthService --> PasswordEncoder
AuthService --> JwtTokenService
AuthService --> SessionService
AuthService --> CacheManager

ImageService --> FileStorageService
ImageService --> UserRepository

SessionService --> CacheManager

User --> UserStatus

AuthResult --> User
AuthResult --> TokenPair
AuthResult --> SessionInfo

ValidationResult --> PasswordStrength

UserRepository <|.. UserRepositoryImpl
FileStorageService <|.. S3StorageService
PasswordEncoder <|.. BCryptPasswordEncoder
CacheManager <|.. RedisCacheManager

@enduml