@startuml
!theme mono
title "장소 서비스 - 실시간 정보 검증 내부 시퀀스"

participant "LocationController" as Controller
participant "LocationService" as Service
participant "ValidationService" as ValidationSvc
participant "CacheService" as Cache
participant "CircuitBreaker" as CB
participant "MCPAdapter" as MCP
participant "DataScoreCalculator" as Calculator

== 실시간 정보 검증 플로우 ==

Controller -> Service: validatePlaceInfo(placeId, validationRequest)
note right: POST /places/{placeId}/validate\n요청 처리 시작

Service -> Service: parseValidationRequest()
note right: 검증 항목 파싱:\n- 영업시간 검증\n- 연락처 정보 검증\n- 영업상태 확인

Service -> Cache: getCachedValidation(placeId)
note right: 최근 검증 결과 확인\n(캐시 TTL: 300초)

alt 최근 검증 결과 있음
    Cache --> Service: validationResult
    note right: 5분 이내 검증 결과 반환\n빠른 응답 제공
    
    Service -> Calculator: updateFreshnessScore(cachedResult)
    Calculator --> Service: updatedScore
    
    Service --> Controller: ValidationResponse(cached=true)
    
else 캐시 미스 또는 만료
    Service -> ValidationSvc: performRealtimeValidation(placeId, request)
    
    ValidationSvc -> CB: execute(validateBusinessHours, timeout=5000)
    note right: Circuit Breaker 설정:\n- Timeout: 5초 (일반 요청보다 짧음)\n- Failure Threshold: 3\n- Recovery Time: 30초
    
    CB -> MCP: getBusinessStatus(placeId)
    note right: MCP API 호출:\n현재 영업 상태 확인
    
    alt MCP 응답 성공
        MCP --> CB: businessStatusResponse
        CB --> ValidationSvc: statusData
        
        ValidationSvc -> CB: execute(validateContactInfo, timeout=3000)
        CB -> MCP: verifyContactInfo(placeId)
        note right: 연락처 정보 검증:\n전화번호 유효성, 응답률
        
        MCP --> CB: contactVerificationResponse
        CB --> ValidationSvc: contactData
        
        ValidationSvc -> Calculator: calculateFreshnessScore(statusData, contactData)
        note right: 신선도 점수 계산:\n- 마지막 업데이트 시간\n- 정보 정확성\n- 응답 성공률
        
        Calculator --> ValidationSvc: freshnessScore
        
        ValidationSvc -> ValidationSvc: buildValidationResult()
        note right: 검증 결과 구성:\n- 영업 상태\n- 연락처 유효성\n- 데이터 신선도\n- 경고 메시지
        
        ValidationSvc -> Cache: cacheValidationResult(placeId, result, TTL=300)
        note right: 검증 결과 캐싱\n짧은 TTL로 최신성 보장
        
        ValidationSvc --> Service: validationResult
        
    else Circuit Breaker 열림 또는 타임아웃
        CB --> ValidationSvc: CircuitBreakerException
        
        ValidationSvc -> ValidationSvc: buildFallbackResult()
        note right: Fallback 처리:\n- 캐시된 기본 정보 사용\n- 검증 불가 상태 표시\n- 재시도 안내 메시지
        
        ValidationSvc --> Service: fallbackResult
    end
    
    Service -> Service: addWarningsIfNeeded(result)
    note right: 경고 메시지 추가:\n- "실시간 검증 불가"\n- "정보 확인 필요"\n- "직접 연락 권장"
    
    Service --> Controller: ValidationResponse
end

Controller -> Controller: formatResponse(validationResult)
note right: 응답 포맷팅:\n- 검증 시각 추가\n- 데이터 소스 표시\n- 경고 메시지 포함

Controller --> Client: HTTP 200 ValidationResponse
note right: 응답 구조:\n{\n  "place_id": "string",\n  "validation_timestamp": "datetime",\n  "results": {\n    "is_operational": boolean,\n    "business_hours_valid": boolean,\n    "contact_info_valid": boolean,\n    "data_freshness_score": 0-100\n  },\n  "warnings": ["string"],\n  "data_source": "kakao|google|cached"\n}

@enduml