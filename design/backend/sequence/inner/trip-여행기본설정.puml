@startuml
!theme mono

title Trip Service - 여행기본설정 내부 시퀀스 (프론트엔드 최적화)

' UFR-TRIP-030: 여행 기본정보 설정 시나리오
' 프론트엔드에서 상태 관리, 백엔드는 최종 저장만 처리

actor User
boundary "Frontend State" as Frontend
participant TripController
participant TripService
participant ValidationService
participant TripRepository
database "Redis Cache<<E>>" as RedisCache

== 1. 화면 초기화 및 기존 데이터 복원 ==
User -> Frontend: 기본설정 화면 접근

Frontend -> Frontend: localStorage에서 임시 데이터 확인
note right: 자동 저장된 여행 정보 복원

alt 임시 데이터 존재
    Frontend -> Frontend: 폼 데이터 복원
    note right: 여행명, 이동수단, 멤버 목록
else 신규 생성
    Frontend -> Frontend: 기본값 설정
    note right: 이동수단 기본값: 자동차
end

Frontend -> User: 화면 렌더링 완료

== 2. 프론트엔드 상태 관리 ==
User -> Frontend: 여행명 입력 "유럽가족여행"

Frontend -> Frontend: 실시간 입력 검증
note right: 16자 이하 확인, 즉시 UI 피드백

Frontend -> Frontend: 상태 업데이트
note right: 로컬 상태 관리 (Redux/Zustand)

User -> Frontend: 이동수단 변경 (자동차 선택)

Frontend -> Frontend: 선택 상태 업데이트
note right: UI 즉시 반영

== 3. 멤버 관리 (완전 프론트엔드) ==
User -> Frontend: "+" 버튼 클릭

Frontend -> Frontend: 멤버 추가 폼 표시
note right: 모달/인라인 폼 즉시 표시

User -> Frontend: 멤버 정보 입력
note right: 이름, 나이, 성별, 건강상태, 선호도

Frontend -> Frontend: 실시간 입력 검증
note right: 필수 항목, 나이 범위, 최대 10명 확인

User -> Frontend: "멤버 추가" 클릭

Frontend -> Frontend: 멤버 배열에 추가
note right: 로컬 상태에만 저장, 서버 호출 없음

Frontend -> Frontend: 멤버 목록 UI 업데이트
note right: 새 멤버 카드 즉시 표시

== 4. 스마트 자동 저장 ==
Frontend -> Frontend: 데이터 변경 감지
note right: 3초 debounce 적용

Frontend -> Frontend: localStorage 임시 저장
note right: 브라우저 종료 대비 로컬 백업

== 5. 최종 저장 (서버 호출) ==
User -> Frontend: "다음 단계" 버튼 클릭

Frontend -> Frontend: 최종 검증
note right: 필수 항목 완성도 확인

Frontend -> TripController: POST /trips/basic-settings
note right: 여행명, 이동수단, 멤버 배열 일괄 전송

activate TripController
TripController -> ValidationService: validateTripBasicData()
activate ValidationService

ValidationService -> ValidationService: 비즈니스 규칙 검증
note right: 멤버 수 제한, 여행명 중복 등

ValidationService --> TripController: 검증 완료
deactivate ValidationService

TripController -> TripService: createTripWithMembers()
activate TripService

TripService -> TripService: 여행 ID 생성
note right: UUID 생성

TripService -> TripRepository: saveTrip()
activate TripRepository
TripRepository --> TripService: 저장된 여행 정보
deactivate TripRepository

TripService -> TripRepository: saveTripMembers()
activate TripRepository
note right: 멤버 정보 일괄 저장
TripRepository --> TripService: 저장 완료
deactivate TripRepository

TripService -> RedisCache: cacheTripBasicData()
activate RedisCache
note right: 빠른 조회를 위한 캐시
RedisCache --> TripService: 캐시 완료
deactivate RedisCache

TripService --> TripController: 저장 성공 (tripId)
deactivate TripService

TripController --> Frontend: 201 Created (tripId)
deactivate TripController

Frontend -> Frontend: localStorage 임시 데이터 삭제
note right: 정상 저장 완료로 임시 데이터 정리

Frontend -> User: 여행지설정 화면으로 이동

== 오류 처리 ==
alt 서버 오류 발생
    TripController --> Frontend: 400/500 Error
    Frontend -> Frontend: 오류 메시지 표시
    note right: 사용자 친화적 오류 안내
    Frontend -> Frontend: 임시 데이터 유지
    note right: 사용자 입력 손실 방지
end

@enduml