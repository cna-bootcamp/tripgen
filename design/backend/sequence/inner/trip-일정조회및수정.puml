@startuml
!theme mono

title Trip Service - 일정조회및수정 내부 시퀀스 (프론트엔드 최적화)

' UFR-TRIP-060: 생성된 일정 조회 및 수정 시나리오
' 프론트엔드에서 드래그앤드롭, 순서 변경 등 관리, 서버는 최종 저장만

actor User
boundary "Frontend State" as Frontend
participant TripController
participant TripService
participant ScheduleService
participant "Location<<E>>" as LocationService
participant "AI<<E>>" as AIService
participant TripRepository
database "Redis Cache<<E>>" as RedisCache

== 1. 일정 데이터 로딩 ==
User -> Frontend: 생성된일정조회 화면 접근

Frontend -> TripController: GET /trips/{tripId}/schedules
activate TripController

TripController -> RedisCache: getCachedSchedules()
activate RedisCache

alt 캐시 히트
    RedisCache --> TripController: 캐시된 일정 데이터
else 캐시 미스
    TripController -> TripService: getSchedulesByTripId()
    activate TripService
    TripService -> TripRepository: findSchedulesByTripId()
    activate TripRepository
    TripRepository --> TripService: 일정 데이터
    deactivate TripRepository
    TripService --> TripController: 일정 데이터
    deactivate TripService
    
    TripController -> RedisCache: cacheSchedules()
    RedisCache --> TripController: 캐시 완료
end
deactivate RedisCache

TripController --> Frontend: 200 OK (일정 데이터)
deactivate TripController

Frontend -> Frontend: 일정 데이터 상태 저장
note right: Redux/Zustand 상태 관리

Frontend -> User: 일정 화면 렌더링 완료

== 2. 실시간 일정 수정 (프론트엔드) ==
User -> Frontend: 장소 카드 드래그 시작

Frontend -> Frontend: 드래그 상태 활성화
note right: react-beautiful-dnd 사용

User -> Frontend: 새로운 위치에 드롭

Frontend -> Frontend: 로컬 순서 변경
note right: 즉시 UI 반영, 서버 호출 없음

Frontend -> Frontend: 변경 사항 추적
note right: 변경된 항목만 기록

== 3. 장소 삭제 (즉시 반영) ==
User -> Frontend: 장소 카드 선택

Frontend -> Frontend: 액션 버튼 표시
note right: 상세정보, 길찾기, 삭제 버튼

User -> Frontend: 삭제 버튼 클릭

Frontend -> Frontend: 확인 다이얼로그
note right: "이 장소를 삭제하시겠습니까?"

User -> Frontend: 삭제 확인

Frontend -> Frontend: 로컬 배열에서 제거
note right: 즉시 UI에서 제거

Frontend -> Frontend: 후속 일정 자동 조정
note right: 시간 간격 재계산

== 4. 스마트 배치 저장 ==
Frontend -> Frontend: 변경 사항 감지
note right: 사용자가 수정 완료 후 2초 대기

Frontend -> Frontend: 자동 저장 여부 판단
note right: 변경된 항목이 있는 경우에만

Frontend -> TripController: PATCH /trips/{tripId}/schedules/order
note right: 변경된 순서 정보만 전송

activate TripController
TripController -> TripService: updateScheduleOrder()
activate TripService

TripService -> TripRepository: updatePlaceOrder()
activate TripRepository
note right: 순서 정보만 업데이트
TripRepository --> TripService: 업데이트 완료
deactivate TripRepository

TripService -> RedisCache: invalidateScheduleCache()
activate RedisCache
note right: 캐시 무효화
RedisCache --> TripService: 캐시 삭제 완료
deactivate RedisCache

TripService --> TripController: 순서 변경 완료
deactivate TripService

TripController --> Frontend: 200 OK
deactivate TripController

Frontend -> Frontend: 저장 완료 표시
note right: 사용자에게 저장 완료 피드백

== 5. 장소 상세정보 조회 ==
User -> Frontend: 장소 카드의 "상세정보" 클릭

Frontend -> LocationService: GET /locations/{placeId}/details
activate LocationService

LocationService -> RedisCache: getCachedPlaceDetails()
activate RedisCache

alt 캐시 히트
    RedisCache --> LocationService: 캐시된 장소 상세정보
else 캐시 미스
    LocationService -> LocationService: 지역별 API 호출
    note right: 국내(카카오) vs 해외(구글)
    LocationService -> RedisCache: cachePlaceDetails()
    RedisCache --> LocationService: 캐시 완료
end
deactivate RedisCache

LocationService -> AIService: getPersonalizedRecommendation()
activate AIService
note right: 사용자 프로필 기반 추천
AIService --> LocationService: 개인화된 추천 정보
deactivate AIService

LocationService --> Frontend: 200 OK (상세정보 + AI 추천)
deactivate LocationService

Frontend -> Frontend: 상세정보 모달/화면 표시

== 6. 일자별 재생성 ==
User -> Frontend: 특정 날짜 탭의 "다시 생성" 클릭

Frontend -> Frontend: 재생성 확인 다이얼로그
note right: "이 날의 일정을 다시 생성하시겠습니까?"

User -> Frontend: 재생성 확인

Frontend -> Frontend: 로딩 상태 표시
note right: 해당 날짜만 로딩 표시

Frontend -> AIService: POST /ai/schedules/regenerate-day
note right: 특정 날짜 재생성 요청
activate AIService

AIService -> AIService: 해당일 일정 재생성
note right: 기존 일정 참고하여 새 일정 생성

AIService --> Frontend: 200 OK (새 일정)
deactivate AIService

Frontend -> Frontend: 해당 날짜 일정 교체
note right: 실시간으로 새 일정 표시

Frontend -> TripController: PATCH /trips/{tripId}/schedules/day/{dayNumber}
note right: 새 일정 자동 저장
activate TripController

TripController -> TripService: updateDaySchedule()
activate TripService
TripService -> TripRepository: saveDaySchedule()
activate TripRepository
TripRepository --> TripService: 저장 완료
deactivate TripRepository
TripService --> TripController: 업데이트 완료
deactivate TripService

TripController --> Frontend: 200 OK
deactivate TripController

== 오류 처리 ==
alt 순서 변경 실패
    TripController --> Frontend: 400/500 Error
    Frontend -> Frontend: 로컬 상태 롤백
    note right: 이전 순서로 복원
    Frontend -> Frontend: 오류 메시지 표시
else 재생성 실패
    AIService --> Frontend: 500 Error
    Frontend -> Frontend: 기존 일정 유지
    note right: "재생성에 실패했습니다. 다시 시도해주세요"
end

@enduml