@startuml
!theme mono
title "장소 서비스 - Claude 추천 장소 일괄 검증 내부 시퀀스"

participant "LocationController" as Controller
participant "LocationService" as Service
participant "PlaceValidationService" as ValidationSvc
participant "PlaceSearchService" as SearchSvc
participant "CacheService" as Cache
participant "CircuitBreaker" as CB
participant "KakaoMCPAdapter" as KakaoMCP
participant "GoogleMCPAdapter" as GoogleMCP
participant "ConfidenceCalculator" as Calculator

== Claude 추천 장소 일괄 검증 플로우 ==

Controller -> Service: validateClaudePlaces(validationRequest)
note right: POST /places/validate-batch\n요청 처리 시작

Service -> Service: parseValidationRequest()
note right: 요청 파싱:\n- 검증할 장소 목록\n- 검색 반경\n- 언어 설정\n- 대체 장소 포함 여부

Service -> ValidationSvc: validatePlacesBatch(places, searchRadius, language)

loop 각 Claude 추천 장소별 검증
    ValidationSvc -> ValidationSvc: extractSearchKeywords(place.name, place.context)
    note right: 검색 키워드 추출:\n- 장소명 정규화\n- 카테고리 키워드 추가\n- 위치 정보 결합
    
    ValidationSvc -> Cache: getCachedValidation(searchKey)
    note right: 캐시 확인 (TTL: 1800초)\n동일한 검색 키워드 재사용
    
    alt 캐시 히트
        Cache --> ValidationSvc: cachedValidationResult
        note right: 30분 이내 검증 결과 재사용
        
    else 캐시 미스
        ValidationSvc -> CB: execute(searchNearbyPlaces, timeout=10000)
        note right: Circuit Breaker 설정:\n- Timeout: 10초 (배치 처리용)\n- Failure Threshold: 5\n- Recovery Time: 60초
        
        par Kakao 검색
            CB -> KakaoMCP: searchByKeyword(searchKeywords, location, radius)
            note right: 카카오 MCP를 통한 검색:\n- 키워드 기반 검색\n- 위치 반경 내 필터링\n- 카테고리 매칭
            
            KakaoMCP --> CB: kakaoSearchResults
            
        and Google 검색 (보완용)
            CB -> GoogleMCP: searchNearby(searchKeywords, location, radius)
            note right: 구글 MCP를 통한 검색:\n- Places API 활용\n- 평점/리뷰 정보 포함\n- 영업시간 정보 확인
            
            GoogleMCP --> CB: googleSearchResults
        end
        
        CB --> ValidationSvc: combinedSearchResults
        
        ValidationSvc -> Calculator: calculateMatchConfidence(originalPlace, searchResults)
        note right: 매칭 신뢰도 계산:\n- 이름 유사도 (Levenshtein)\n- 위치 거리 (Haversine)\n- 카테고리 일치도\n- 컨텍스트 매칭
        
        Calculator --> ValidationSvc: confidenceScores
        
        ValidationSvc -> ValidationSvc: selectBestMatch(searchResults, confidenceScores)
        note right: 최적 매치 선정:\n- 신뢰도 0.7 이상\n- 랜드마크 거리 고려\n- 영업 상태 확인
        
        alt 높은 신뢰도 매치 발견 (≥ 0.85)
            ValidationSvc -> ValidationSvc: status = "found"
            
        else 중간 신뢰도 매치 (0.6-0.84)
            ValidationSvc -> ValidationSvc: status = "found_similar"
            
        else 낮은 신뢰도 (< 0.6)
            ValidationSvc -> ValidationSvc: status = "not_found"
            
        else 여러 후보 존재
            ValidationSvc -> ValidationSvc: status = "ambiguous"
        end
        
        alt 대체 장소 제안 포함 요청
            ValidationSvc -> SearchSvc: findAlternativePlaces(originalPlace, matchedPlace)
            note right: 대체 장소 검색:\n- 같은 카테고리\n- 더 가까운 위치\n- 더 높은 평점
            
            SearchSvc -> KakaoMCP: searchNearby(category, location, radius=200)
            KakaoMCP --> SearchSvc: nearbyAlternatives
            
            SearchSvc -> Calculator: rankAlternatives(alternatives, originalPlace)
            Calculator --> SearchSvc: rankedAlternatives
            
            SearchSvc --> ValidationSvc: alternativeSuggestions (최대 5개)
        end
        
        ValidationSvc -> Cache: cacheValidationResult(searchKey, result, TTL=1800)
        note right: 검증 결과 캐싱\n30분 TTL로 재사용
    end
    
    ValidationSvc -> ValidationSvc: addValidationWarnings(result)
    note right: 경고 메시지 추가:\n- "영업시간 확인 필요"\n- "최근 폐업 가능성"\n- "정확한 위치 재확인"
end

ValidationSvc -> ValidationSvc: buildBatchValidationResult()
note right: 일괄 검증 결과 구성:\n- validation_id 생성\n- 총 검증 장소 수\n- 각 장소별 검증 상태\n- 캐시 적중률

ValidationSvc --> Service: batchValidationResult

Service -> Service: calculateCacheHitRate(results)
note right: 성능 메트릭 계산:\n캐시 적중률로 성능 모니터링

Service --> Controller: PlaceValidationResult

Controller -> Controller: formatBatchResponse(validationResult)
note right: 응답 포맷팅:\n- 검증 시각 추가\n- 성능 메트릭 포함\n- 각 장소별 상세 정보

Controller --> Client: HTTP 200 PlaceValidationResult
note right: 응답 구조:\n{\n  "validation_id": "val_20240120_abc123",\n  "total_places": 10,\n  "validated_places": [\n    {\n      "original_name": "에펠탑 근처 카페",\n      "validation_status": "found|found_similar|not_found|ambiguous",\n      "matched_place": {...},\n      "confidence_score": 0.95,\n      "alternative_suggestions": [...],\n      "notes": "추가 정보",\n      "validation_warnings": [...]\n    }\n  ],\n  "validation_timestamp": "2024-01-20T10:30:00Z",\n  "cache_hit_rate": 0.6\n}

== 예외 처리 ==

alt Circuit Breaker 열림
    CB --> ValidationSvc: CircuitBreakerException
    
    ValidationSvc -> ValidationSvc: buildFailureResult()
    note right: Fallback 처리:\n- status = "validation_failed"\n- 에러 메시지 포함\n- 재시도 안내
    
    ValidationSvc --> Service: failureResult
    
    Service --> Controller: HTTP 503 Service Unavailable
    note right: 외부 API 사용 불가 상태\n재시도 요청 안내
end

alt 타임아웃 발생
    CB --> ValidationSvc: TimeoutException
    
    ValidationSvc -> ValidationSvc: buildPartialResult()
    note right: 부분 성공 처리:\n- 완료된 검증만 반환\n- 미완료 항목은 "timeout" 상태\n- 부분 성공 표시
    
    ValidationSvc --> Service: partialResult
    
    Service --> Controller: HTTP 200 (부분 성공)
    note right: 부분 성공 응답\n타임아웃된 항목 정보 포함
end

alt 검증 대상이 너무 많음 (> 50개)
    Service -> Service: validateRequestLimit()
    
    Service --> Controller: HTTP 400 Bad Request
    note right: 요청 제한 초과\n최대 50개까지 처리 가능
end

@enduml