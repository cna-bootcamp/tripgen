@startuml 물리아키텍처
!theme mono

title 여행 일정 생성 서비스 - 물리 아키텍처 (Azure Cloud)

' Azure Resource Group
rectangle "Resource Group (tripgen-rg)" {
    ' 네트워크 구성
    rectangle "Azure Virtual Network (tripgen-vnet)" {
        rectangle "AKS Subnet (tripgen-aks-subnet)" as aks_subnet
        rectangle "Database Subnet (tripgen-db-subnet)" as db_subnet
        rectangle "Cache Subnet (tripgen-cache-subnet)" as cache_subnet
    }

    ' 프론트엔드
    component "Azure Static Web Apps" as static_web {
        [React Application] as frontend
    }
    
    component "Azure CDN" as cdn
    
    ' 컨테이너 레지스트리
    component "Azure Container Registry" as acr {
        [Container Images] as images
    }
    
    ' 마이크로서비스 - Kubernetes 클러스터
    rectangle "Azure Kubernetes Service (AKS Cluster)" as aks {
        ' API Gateway
        rectangle "API Gateway" as gateway_ns {
            [Spring Cloud Gateway] as gateway
        }
        
        ' 마이크로서비스
        rectangle "Profile Service" as profile_ns {
            [Profile Service Pods (3 replicas)] as profile_pods
        }
        
        rectangle "Itinerary Service" as itinerary_ns {
            [Itinerary Service Pods (5 replicas)] as itinerary_pods
        }
        
        rectangle "Location Service" as location_ns {
            [Location Service Pods (3 replicas)] as location_pods
        }

        ' 인그레스 컨트롤러
        [NGINX Ingress Controller] as ingress
    }
    
    ' 데이터베이스 - VM 기반
    rectangle "Database VMs" as db_vms {
        component "Profile DB VM" as profile_vm {
            database "PostgreSQL\n(Profile DB)" as profile_db
        }
        
        component "Itinerary DB VM" as itinerary_vm {
            database "PostgreSQL\n(Itinerary DB)" as itinerary_db
        }
        
        component "Location DB VM" as location_vm {
            database "PostgreSQL\n(Location DB)" as location_db
        }
    }
    
    ' 캐시 - VM 기반
    component "Cache VM" as cache_vm {
        database "Redis Cluster\n(3 nodes)" as redis
    }
    
    ' 메시지 큐 - Azure 관리형
    component "Azure Service Bus" as servicebus {
        queue "Itinerary Generation Queue" as gen_queue
        queue "Validation Queue" as val_queue
        queue "Notification Queue" as notif_queue
    }
    
    ' 외부 API 연동
    cloud "External Services" {
        [Claude API] as claude_api
        [Kakao Local API] as kakao_api
        [Weather API] as weather_api
        [Transport API] as transport_api
    }
    
    ' Load Balancer
    component "Azure Load Balancer" as alb
}

' 연결 관계
cdn --> static_web : "Static content"
static_web --> alb : "API calls"
alb --> ingress : "Route traffic"
ingress --> gateway : "API routing"

' Gateway to Services
gateway --> profile_pods : "HTTP/REST"
gateway --> itinerary_pods : "HTTP/REST"
gateway --> location_pods : "HTTP/REST"

' Service to Database
profile_pods --> profile_db : "PostgreSQL protocol"
itinerary_pods --> itinerary_db : "PostgreSQL protocol"
location_pods --> location_db : "PostgreSQL protocol"

' Service to Cache
profile_pods ..> redis : "Redis protocol"
itinerary_pods ..> redis : "Redis protocol"
location_pods ..> redis : "Redis protocol"

' Service to Message Queue
itinerary_pods --> servicebus : "AMQP"
location_pods --> servicebus : "AMQP"

' External API connections
itinerary_pods --> claude_api : "HTTPS"
location_pods --> kakao_api : "HTTPS"
location_pods --> weather_api : "HTTPS"
location_pods --> transport_api : "HTTPS"

' Container Registry
acr --> aks : "Pull images"

note left of aks
  AKS Configuration:
  - Node Pool: Standard_D4s_v3 (3 nodes)
  - Auto-scaling enabled (3-10 nodes)
  - Kubernetes version: 1.28+
  - Network policy: Azure CNI
end note

note right of db_vms
  Database VMs:
  - VM Size: Standard_D2s_v3
  - OS: Ubuntu 22.04 LTS
  - PostgreSQL 15
  - Managed Disks (Premium SSD)
  - Daily backup to Azure Backup
end note

note bottom of servicebus
  Service Bus Configuration:
  - Standard tier
  - Partitioned queues
  - Message TTL: 24 hours
  - Dead letter queue enabled
end note

note left of redis
  Redis Configuration:
  - VM Size: Standard_D2s_v3
  - Redis 7.0
  - Cluster mode: 3 nodes
  - Persistence: AOF enabled
  - Maxmemory policy: allkeys-lru
end note

@enduml