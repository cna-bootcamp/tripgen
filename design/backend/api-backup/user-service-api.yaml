openapi: 3.0.0
info:
  title: User Service API
  description: TripGen 사용자 인증 및 사용자 정보 관리 서비스
  version: 1.0.0
  contact:
    name: 정백엔드
    email: backend@tripgen.com

servers:
  - url: http://localhost:8001/api/v1/users
    description: Local server
  - url: https://api.tripgen.com/api/v1/users
    description: Production server
  - url: https://virtserver.swaggerhub.com/tripgen/user-service/1.0.0
    description: SwaggerHub Mock API

paths:
  /auth/signup:
    post:
      x-user-story: UFR-USER-010
      x-controller: AuthController
      tags:
        - Authentication
      summary: 회원가입
      description: 신규 사용자 회원가입 처리
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          description: 잘못된 요청 (입력값 검증 실패)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 중복된 아이디 또는 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/check-username:
    get:
      x-user-story: UFR-USER-010
      x-controller: AuthController
      tags:
        - Authentication
      summary: 아이디 중복 확인
      description: 회원가입 시 아이디 중복 확인 (비동기)
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            minLength: 5
          example: "user123"
      responses:
        '200':
          description: 중복 확인 결과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAvailabilityResponse'

  /auth/check-email:
    get:
      x-user-story: UFR-USER-010
      x-controller: AuthController
      tags:
        - Authentication
      summary: 이메일 중복 확인
      description: 회원가입 시 이메일 중복 확인 (비동기)
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          example: "user@example.com"
      responses:
        '200':
          description: 중복 확인 결과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAvailabilityResponse'

  /auth/login:
    post:
      x-user-story: UFR-USER-020
      x-controller: AuthController
      tags:
        - Authentication
      summary: 로그인
      description: 사용자 로그인 처리
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: 계정 잠금 (5회 연속 실패)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      x-user-story: UFR-USER-040
      x-controller: AuthController
      tags:
        - Authentication
      summary: 로그아웃
      description: 현재 세션 종료
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/profile:
    get:
      x-user-story: UFR-USER-020
      x-controller: UserController
      tags:
        - User Profile
      summary: 프로필 조회
      description: 현재 로그인한 사용자의 프로필 정보 조회
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      x-user-story: UFR-USER-030
      x-controller: UserController
      tags:
        - User Profile
      summary: 프로필 수정
      description: 사용자 프로필 정보 수정
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/profile/image:
    post:
      x-user-story: UFR-USER-030
      x-controller: UserController
      tags:
        - User Profile
      summary: 프로필 이미지 업로드
      description: 프로필 이미지 업로드 (최대 5MB, JPG/PNG)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 프로필 이미지 파일
      responses:
        '200':
          description: 이미지 업로드 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
        '400':
          description: 잘못된 파일 형식 또는 크기 초과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/change-password:
    put:
      x-user-story: UFR-USER-030
      x-controller: UserController
      tags:
        - User Profile
      summary: 비밀번호 변경
      description: 사용자 비밀번호 변경
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: 비밀번호 변경 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 현재 비밀번호 불일치 또는 새 비밀번호 규칙 위반
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  schemas:
    SignupRequest:
      type: object
      required:
        - name
        - email
        - phone
        - username
        - password
        - passwordConfirm
        - agreeTerms
      properties:
        name:
          type: string
          minLength: 2
          description: 사용자 이름 (2자 이상)
          example: "홍길동"
        email:
          type: string
          format: email
          description: 이메일 주소
          example: "hong@example.com"
        phone:
          type: string
          pattern: '^01[0-9]-[0-9]{3,4}-[0-9]{4}$'
          description: 휴대폰 번호
          example: "010-1234-5678"
        username:
          type: string
          minLength: 5
          pattern: '^[a-zA-Z0-9]+$'
          description: 아이디 (5자 이상 영문/숫자)
          example: "hong123"
        password:
          type: string
          minLength: 8
          description: 비밀번호 (8자 이상, 영문/숫자/특수문자 포함)
          example: "Pass123!"
        passwordConfirm:
          type: string
          description: 비밀번호 확인
          example: "Pass123!"
        agreeTerms:
          type: boolean
          description: 이용약관 동의 여부
          example: true

    SignupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "회원가입이 완료되었습니다"
        userId:
          type: string
          example: "user_123456"

    CheckAvailabilityResponse:
      type: object
      properties:
        available:
          type: boolean
          example: true
        message:
          type: string
          example: "사용 가능한 아이디입니다"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 아이디
          example: "hong123"
        password:
          type: string
          description: 비밀번호
          example: "Pass123!"
        rememberMe:
          type: boolean
          description: 로그인 유지 여부
          default: false
          example: true

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        accessToken:
          type: string
          description: JWT 액세스 토큰
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: 리프레시 토큰
          example: "rf_eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/UserProfile'

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "안전하게 로그아웃되었습니다"

    UserProfile:
      type: object
      properties:
        userId:
          type: string
          example: "user_123456"
        username:
          type: string
          example: "hong123"
        name:
          type: string
          example: "홍길동"
        email:
          type: string
          example: "hong@example.com"
        phone:
          type: string
          example: "010-1234-5678"
        profileImage:
          type: string
          nullable: true
          description: 프로필 이미지 URL
          example: "https://api.tripgen.com/images/profile/user_123456.jpg"
        avatar:
          type: string
          description: 아바타 표시용 텍스트 (이름 첫 글자)
          example: "홍"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          description: 변경할 이름
          example: "김철수"
        phone:
          type: string
          pattern: '^01[0-9]-[0-9]{3,4}-[0-9]{4}$'
          description: 변경할 휴대폰 번호
          example: "010-9876-5432"
        email:
          type: string
          format: email
          description: 변경할 이메일 (재인증 필요)
          example: "kim@example.com"

    UpdateProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "프로필이 성공적으로 업데이트되었습니다"
        emailVerificationRequired:
          type: boolean
          description: 이메일 변경 시 재인증 필요 여부
          example: true
        user:
          $ref: '#/components/schemas/UserProfile'

    ImageUploadResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        imageUrl:
          type: string
          example: "https://api.tripgen.com/images/profile/user_123456.jpg"

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
        - newPasswordConfirm
      properties:
        currentPassword:
          type: string
          description: 현재 비밀번호
          example: "Pass123!"
        newPassword:
          type: string
          minLength: 8
          description: 새 비밀번호 (8자 이상, 영문/숫자/특수문자 포함)
          example: "NewPass456!"
        newPasswordConfirm:
          type: string
          description: 새 비밀번호 확인
          example: "NewPass456!"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "처리가 완료되었습니다"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "INVALID_REQUEST"
        message:
          type: string
          example: "요청이 올바르지 않습니다"
        details:
          type: object
          additionalProperties:
            type: string
          example:
            username: "이미 사용 중인 아이디입니다"
            password: "비밀번호는 8자 이상이어야 합니다"

  responses:
    UnauthorizedError:
      description: 인증 토큰이 없거나 유효하지 않음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "UNAUTHORIZED"
            message: "인증이 필요합니다"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 액세스 토큰을 사용한 인증

tags:
  - name: Authentication
    description: 사용자 인증 관련 API
  - name: User Profile
    description: 사용자 프로필 관리 API